0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node',
1 verbose cli   '/usr/local/bin/npm',
1 verbose cli   'install',
1 verbose cli   'body-parser' ]
2 info using npm@1.4.28
3 info using node@v0.10.33
4 verbose cache add [ 'body-parser', null ]
5 verbose cache add name=undefined spec="body-parser" args=["body-parser",null]
6 verbose parsed url { protocol: null,
6 verbose parsed url   slashes: null,
6 verbose parsed url   auth: null,
6 verbose parsed url   host: null,
6 verbose parsed url   port: null,
6 verbose parsed url   hostname: null,
6 verbose parsed url   hash: null,
6 verbose parsed url   search: null,
6 verbose parsed url   query: null,
6 verbose parsed url   pathname: 'body-parser',
6 verbose parsed url   path: 'body-parser',
6 verbose parsed url   href: 'body-parser' }
7 silly lockFile 14cf125c-body-parser body-parser
8 verbose lock body-parser /root/.npm/14cf125c-body-parser.lock
9 silly lockFile 14cf125c-body-parser body-parser
10 silly lockFile 14cf125c-body-parser body-parser
11 verbose addNamed [ 'body-parser', '' ]
12 verbose addNamed [ null, '*' ]
13 silly lockFile 9f665704-body-parser body-parser@
14 verbose lock body-parser@ /root/.npm/9f665704-body-parser.lock
15 silly addNameRange { name: 'body-parser', range: '*', hasData: false }
16 verbose request where is /body-parser
17 verbose request registry http://registry.npmjs.org/
18 verbose request id 4463215520690be4
19 verbose url raw /body-parser
20 verbose url resolving [ 'http://registry.npmjs.org/', './body-parser' ]
21 verbose url resolved http://registry.npmjs.org/body-parser
22 verbose request where is http://registry.npmjs.org/body-parser
23 info trying registry request attempt 1 at 23:35:26
24 http GET http://registry.npmjs.org/body-parser
25 http 200 http://registry.npmjs.org/body-parser
26 verbose bad json <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
26 verbose bad json
26 verbose bad json <html>
26 verbose bad json 	<head>
26 verbose bad json 		<meta name="robots" content="noindex,nofollow" />
26 verbose bad json 		<meta content="yes" name="apple-mobile-web-app-capable" />
26 verbose bad json         	<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
26 verbose bad json
26 verbose bad json 		<link rel="icon" type="image/vnd.microsoft.icon" href="img/favicon.ico"/>                          <link rel="shortcut icon" type="image/vnd.microsoft.icon" href="img/favicon.ico"/>
26 verbose bad json 		<link id="dynamicCSS" rel="stylesheet" type="text/css" href="/UserCheck/css/Blob_dynamic_css" />
26 verbose bad json 		<link id="staticCSS" rel="stylesheet" type="text/css" href="/UserCheck/css/Blob_static.css" />
26 verbose bad json
26 verbose bad json
26 verbose bad json 				<script type="text/javascript">
26 verbose bad json 			//Create a dynamic element to allow sending of the document mode of IE.
26 verbose bad json 			//This way we can notify PHP that it can display modern content instead of classic, despite the browser's reporting of being IE7.
26 verbose bad json 			var headID = document.getElementsByTagName("head")[0];
26 verbose bad json 			var cssNode = document.createElement('link');
26 verbose bad json 			cssNode.type = 'text/css';
26 verbose bad json 			cssNode.rel = 'stylesheet';
26 verbose bad json 			cssNode.href = "/UserCheck/css/UserCheckCSS" + (document.documentMode !== undefined ? "?documentMode=" + document.documentMode : "");
26 verbose bad json 			headID.appendChild(cssNode);
26 verbose bad json
26 verbose bad json
26 verbose bad json /*
26 verbose bad json ========================================================================================================================
26 verbose bad json PORTAL IS - ESSENTIALS INCLUSION - START
26 verbose bad json ________________________________________________________________________________________________________________________
26 verbose bad json */
26 verbose bad json // Set global PORTAL_IS namespace.
26 verbose bad json window.PORTAL_IS = {};
26 verbose bad json
26 verbose bad json // Set namespace.
26 verbose bad json PORTAL_IS.CONF = {};
26 verbose bad json
26 verbose bad json PORTAL_IS.CONF.AJAX_REQ_TIMEOUT = 15000;
26 verbose bad json
26 verbose bad json // These properties describes the external references of the portal.
26 verbose bad json PORTAL_IS.CONF.MULTI_PORTALS = {};
26 verbose bad json PORTAL_IS.CONF.MULTI_PORTALS.EXTERNAL_PATH 		= "";
26 verbose bad json PORTAL_IS.CONF.MULTI_PORTALS.EXTERNAL_PORT		= 443;
26 verbose bad json PORTAL_IS.CONF.MULTI_PORTALS.EXTERNAL_HOST		= "192.168.0.0";
26 verbose bad json PORTAL_IS.CONF.MULTI_PORTALS.EXTERNAL_SCHEME	= "https";
26 verbose bad json PORTAL_IS.CONF.MULTI_PORTALS.XSRF_TOKEN			= "";
26 verbose bad json
26 verbose bad json // The current web application name.
26 verbose bad json PORTAL_IS.CONF.WEBAPP_NAME = "UserCheck";
26 verbose bad json
26 verbose bad json // Debug configurations
26 verbose bad json PORTAL_IS.CONF.MAX_STACK_SIZE = 1000;
26 verbose bad json PORTAL_IS.CONF.QUIET_MODE		= "on".toLowerCase() == "on";
26 verbose bad json PORTAL_IS.CONF.DEBUG_LEVEL 	= 0;
26 verbose bad json
26 verbose bad json
26 verbose bad json // Set namespace.
26 verbose bad json window.PORTAL_IS.L10N = {}
26 verbose bad json
26 verbose bad json // Localization object.
26 verbose bad json //=============================================================================================
26 verbose bad json function __L10N()
26 verbose bad json {
26 verbose bad json 	this.strings = new Array();
26 verbose bad json 	this.browserLangs = new Array();
26 verbose bad json
26 verbose bad json 	this.init = function()
26 verbose bad json 	{
26 verbose bad json 		var obj = {"UC_TITLE":"Check Point UserCheck","UC_TITLE_MOBILE_DLP":"Check Point UserCheck Mobile DLP","BUTTON.OK":"OK","BUTTON.CANCEL":"Cancel","BUTTON.SEND":"Send","BUTTON.DISCARD":"Discard","BUTTON.APPROVE":"Approve","WRONG_ID":"This notification page has expired. You can safely close the page or ","TIMEOUT":"This notification page has expired. You can safely close the page or ","RETRY":"reload the original page.","REPORT_SUCCESS":"Report was sent successfully.","REPORT_ERROR":"An error occured while sending the report.","REQUIRED_FIELDS":"Required fields","ENTER_TEXT":"Enter text","RETURN_TO_SITE":"Return to site","UC.BLOCKED_IFRAME":"Learn more...","UC.INFO_IFRAME":"Click to resolve...","PLEASE_WAIT":"Please wait . . .","NO_SCRIPT":"This portal requires browser which support JavaScript.<br>Please make sure that you are using an updated browser and that JavaScript is enabled.","MSGBOX_TITLE_CONFIRMATION":"Confirmation","MSGBOX_TITLE_JUSTIFICATION":"Justification","MSGBOX_TITLE_APPROVER":"Approver","MSGBOX_TITLE_WARNING":"Warning","MSGBOX_TITLE_ATTENTION":"Attention","MSGBOX_TITLE_ERROR":"Error","MSGBOX_TITLE_REPORT_ERROR":"Report an error","MSGBOX_TITLE_EXTEND_EXPIRATION":"Extend expiration date","DEFAULT_GENERIC_CLIENT_ERROR":"An unexpected error has occurred.\nYou may still be able to continue working normally.\nPlease retry accessing the web page in a short while.\n\n","DEFAULT_GENERIC_TIMEOUT_CLIENT_ERROR":"You may not access this page, or this page has expired.\nPlease sign in.","LOG_REFERENCE_ID":"Log reference id: ","ERROR.LINK.SEND_ERROR_REPORT":"Send error report","ERROR.LINK.IM_HAVING_PROBLEMS":"I am having problems with this Portal.","CHECKPOINT_COPY_RIGHTS":"&copy;2011 Check Point Software Technologies Ltd.","EMAIL_SENT":"The email has been sent","EMAIL_DISCARDED":"The email has been discarded","EMAIL_ALREADY_SENT":"The email has already been sent","EMAIL_ALREADY_DISCARDED":"The email has already been discarded","UNKOWN_INCIDENT_STATUS":"The incident status is unkown","REVIEW_TEXT":"Review issue in portal","MAIL.ITEM.ATTACHMENTS":"Attachments","HTTP_LEARNING":"To complete the operation, <b>please return to site and resend the information<\/b>, thanks.","HTTP_LEARNING_ERROR_MSG":"Sending the message cannot be approved,<\/br> please contact your system administrator.","HTTP_LEARNING_ERROR_TOOLTIP":"Sending the message cannot be approved, please contact your system administrator.","CP_SCRUB_RESULT_SUCCESS":"","CP_SCRUB_RESULT_FAILURE":"File structure may be corrupted","CP_SCRUB_RESULT_TIMEOUT":"","CP_SCRUB_RESULT_UNSUPPORTED_FILE":"File format is not supported","CP_SCRUB_RESULT_NOT_SCRUBBED":"","CP_SCRUB_RESULT_INTERNAL_ERROR":"","CP_SCRUB_RESULT_NO_VALID_CONTRACT":"","CP_SCRUB_RESULT_SKIPPED_BY_TE_CONFIDENCE":"","CP_SCRUB_RESULT_OUT_OF_MEMORY":"","CP_SCRUB_RESULT_DOCSEC_FILE":"File encrypted using Checkpoint's Document Security","CP_SCRUB_RESULT_ENCRYPTED_FILE":"contains encrypted data","CP_SCRUB_RESULT_SKIPPED_BY_SCRIPT":"","CP_SCRUB_RESULT_DISK_LIMIT_REACHED":""};
26 verbose bad json
26 verbose bad json 		for(val in obj)
26 verbose bad json 			this.strings[val] = obj[val];
26 verbose bad json
26 verbose bad json 		obj = ["en"];
26 verbose bad json
26 verbose bad json 		for(val in obj)
26 verbose bad json 		{
26 verbose bad json 			this.browserLangs[val] = obj[val].split(';')[0];
26 verbose bad json 		}
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.getStr = function(stringId)
26 verbose bad json 	{
26 verbose bad json 		return this.strings[stringId];
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.selectLanguage = function(languageArray)
26 verbose bad json 	{
26 verbose bad json 		for(lang in this.browserLangs)
26 verbose bad json 		{
26 verbose bad json 			if(languageArray[this.browserLangs[lang]] === true)
26 verbose bad json 				return this.browserLangs[lang];
26 verbose bad json
26 verbose bad json 			if(languageArray[this.browserLangs[lang].substring(0, 2)] === true)
26 verbose bad json 				return this.browserLangs[lang].substring(0, 2);
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		//If nothing succeeded, return the default.
26 verbose bad json 		return "en";
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.reloadLanguageTo = function(lang, fallbackLang, callback)
26 verbose bad json 	{
26 verbose bad json 		var requestData = {};
26 verbose bad json
26 verbose bad json 		requestData.lang = lang;
26 verbose bad json 		requestData.fallbackLang = fallbackLang;
26 verbose bad json
26 verbose bad json 		var sAbsoluteURL = PORTAL_IS.TOOLS.getURL("data/GetTranslationData");
26 verbose bad json
26 verbose bad json 		sendAsynchronousRequest(sAbsoluteURL,
26 verbose bad json 								flattenObject(requestData),
26 verbose bad json 								this.asyncReloadLangHandler,
26 verbose bad json 								this,
26 verbose bad json 								[callback]);
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.asyncReloadLangHandler = function(xhrStatus, xhrResponse, callback)
26 verbose bad json 	{
26 verbose bad json 		if (xhrStatus != 200)
26 verbose bad json 		{
26 verbose bad json 			DEBUG.out('Retreiving translation data failed. ('+xhrStatus+')', DEBUG.ERROR);
26 verbose bad json 			return;
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		var obj = JSON.parse(xhrResponse);
26 verbose bad json 		this.strings = null; //Ensure removing of old values.
26 verbose bad json 		this.strings = new Array();
26 verbose bad json
26 verbose bad json 		for(val in obj)
26 verbose bad json 			this.strings[val] = obj[val];
26 verbose bad json
26 verbose bad json 		callback();
26 verbose bad json 	}
26 verbose bad json }
26 verbose bad json //=============================================================================================
26 verbose bad json
26 verbose bad json //Localization object.
26 verbose bad json L10N_Obj = new __L10N();
26 verbose bad json L10N_Obj.init();
26 verbose bad json PORTAL_IS.L10N.L10N_Obj = L10N_Obj;
26 verbose bad json
26 verbose bad json /*
26 verbose bad json ________________________________________________________________________________________________________________________
26 verbose bad json
26 verbose bad json PORTAL IS - ESSENTIALS INCLUSION - END
26 verbose bad json ========================================================================================================================
26 verbose bad json */
26 verbose bad json 			var noJSCrypto = "true";
26 verbose bad json 		</script>
26 verbose bad json 		<script type="text/javascript" src="js/Blob.js"></script>
26 verbose bad json 		<script type="text/javascript">
26 verbose bad json
26 verbose bad json
26 verbose bad json // Create namespace
26 verbose bad json window.UserCheck = {};
26 verbose bad json window.UserCheck.tools = {};
26 verbose bad json
26 verbose bad json // =======================================================================================
26 verbose bad json function parseSender(value)
26 verbose bad json {
26 verbose bad json 	return value.address;
26 verbose bad json }
26 verbose bad json // =======================================================================================
26 verbose bad json
26 verbose bad json
26 verbose bad json // =======================================================================================
26 verbose bad json // Render recipient list from and array.
26 verbose bad json // String[] recipientsArr   - Array of recipients.
26 verbose bad json // [int ellipsisLimit]      - A string beyond this length will be cut and added ellipsis. Optional, default is 0 - no ellipsis.
26 verbose bad json // [bool useLinebreakes]    - Should a line break be added after each recipient. Optional, default is true.
26 verbose bad json function recipientsArr2StrInTable(recipientsArr, ellipsisLimit, useLinebreakes)
26 verbose bad json {
26 verbose bad json     if (ellipsisLimit == undefined)
26 verbose bad json     {
26 verbose bad json         ellipsisLimit = 0;
26 verbose bad json     }
26 verbose bad json
26 verbose bad json     if (useLinebreakes == undefined)
26 verbose bad json     {
26 verbose bad json         useEllipsis = true;
26 verbose bad json     }
26 verbose bad json
26 verbose bad json 	var recipientsList = "";
26 verbose bad json
26 verbose bad json 	for (var i=0; i<recipientsArr.length; i++)
26 verbose bad json 	{
26 verbose bad json 		recipientsList += HTMLEncode(recipientsArr[i].address);
26 verbose bad json 		if (i < recipientsArr.length-1)
26 verbose bad json 		{
26 verbose bad json 			recipientsList += ", ";
26 verbose bad json 			if (useLinebreakes)
26 verbose bad json 			{
26 verbose bad json 			    recipientsList += "<br>";
26 verbose bad json             }
26 verbose bad json 		}
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	if (ellipsisLimit > 0)
26 verbose bad json 	{
26 verbose bad json 	    //recipientsList = Ext.util.Format.ellipsis(recipientsList, ellipsisLimit);
26 verbose bad json 	    recipientsList = recipientsList;
26 verbose bad json     }
26 verbose bad json
26 verbose bad json 	return recipientsList;
26 verbose bad json }
26 verbose bad json // =======================================================================================
26 verbose bad json
26 verbose bad json
26 verbose bad json // =======================================================================================
26 verbose bad json // Render recipient list from and array.
26 verbose bad json // Sender sender            - The sender data.
26 verbose bad json // [int ellipsisLimit]      - A string beyond this length will be cut and added ellipsis. Optional, default is 0 - no ellipsis.
26 verbose bad json // [bool useLinebreakes]    - Should a line break be added after each recipient. Optional, default is true.
26 verbose bad json function getSenderName(sender, ellipsisLimit)
26 verbose bad json {
26 verbose bad json     var output = "";
26 verbose bad json
26 verbose bad json     if (ellipsisLimit == undefined)
26 verbose bad json     {
26 verbose bad json         ellipsisLimit = 0;
26 verbose bad json     }
26 verbose bad json
26 verbose bad json     if (sender.name.empty())
26 verbose bad json     {
26 verbose bad json         output = sender.address;
26 verbose bad json     }
26 verbose bad json     else
26 verbose bad json     {
26 verbose bad json         output = sender.name;
26 verbose bad json     }
26 verbose bad json
26 verbose bad json //	if (ellipsisLimit > 0)
26 verbose bad json //	{
26 verbose bad json //	    output = Ext.util.Format.ellipsis(output, ellipsisLimit);
26 verbose bad json //    }
26 verbose bad json
26 verbose bad json 	 return output;
26 verbose bad json }
26 verbose bad json // =======================================================================================
26 verbose bad json
26 verbose bad json
26 verbose bad json // =======================================================================================
26 verbose bad json // Render recipient list from and array.
26 verbose bad json // String sender            - The subject string.
26 verbose bad json // [int ellipsisLimit]      - A string beyond this length will be cut and added ellipsis. Optional, default is 0 - no ellipsis.
26 verbose bad json // [bool useLinebreakes]    - Should a line break be added after each recipient. Optional, default is true.
26 verbose bad json function getSubject(subject, ellipsisLimit)
26 verbose bad json {
26 verbose bad json     var output = subject;
26 verbose bad json
26 verbose bad json     if (ellipsisLimit == undefined)
26 verbose bad json     {
26 verbose bad json         ellipsisLimit = 0;
26 verbose bad json     }
26 verbose bad json
26 verbose bad json //	if (ellipsisLimit > 0)
26 verbose bad json //	{
26 verbose bad json //	    output = Ext.util.Format.ellipsis(output, ellipsisLimit);
26 verbose bad json //    }
26 verbose bad json
26 verbose bad json 	 return output;
26 verbose bad json }
26 verbose bad json // =======================================================================================
26 verbose bad json
26 verbose bad json
26 verbose bad json // =======================================================================================
26 verbose bad json // tranform recipients array to string
26 verbose bad json function recipientsArr2Str(recipientsArr,type)
26 verbose bad json {
26 verbose bad json     var recipientsList = "";
26 verbose bad json     var address = "";
26 verbose bad json     var commaNeeded = false;
26 verbose bad json     for (var i=0; i<recipientsArr.length; i++)
26 verbose bad json     {
26 verbose bad json         if (type == recipientsArr[i].recipientType)
26 verbose bad json         {
26 verbose bad json             if (!commaNeeded)
26 verbose bad json                 commaNeeded = true;
26 verbose bad json             else
26 verbose bad json                 recipientsList += ", ";
26 verbose bad json
26 verbose bad json             address = HTMLEncode(recipientsArr[i].address);
26 verbose bad json             if (recipientsArr[i].isExternal)
26 verbose bad json             {
26 verbose bad json                 address = '<span ' + GetDomainColor(recipientsArr[i].address)+' >' + address + '</span>'
26 verbose bad json             }
26 verbose bad json             recipientsList += address;
26 verbose bad json         }
26 verbose bad json     }
26 verbose bad json
26 verbose bad json     return recipientsList;
26 verbose bad json }
26 verbose bad json
26 verbose bad json // =======================================================================================
26 verbose bad json function arr2Str(arr)
26 verbose bad json {
26 verbose bad json     var str = "";
26 verbose bad json     var commaNeeded = false;
26 verbose bad json     for (var i=0; i<arr.length; i++)
26 verbose bad json     {
26 verbose bad json         if (!commaNeeded)
26 verbose bad json         {
26 verbose bad json             commaNeeded = true;
26 verbose bad json         }
26 verbose bad json         else
26 verbose bad json         {
26 verbose bad json             str += ", ";
26 verbose bad json         }
26 verbose bad json         str += arr[i];
26 verbose bad json     }
26 verbose bad json
26 verbose bad json     return str;
26 verbose bad json }
26 verbose bad json
26 verbose bad json function GetDomainColor(str)
26 verbose bad json {
26 verbose bad json     // var highlightColors = new Array("FFFF00","00FF00","00FFFF","FF00FF","FF0000","FFFF99","99FF99","CCFFFF","FFCCFF", "FF9999")
26 verbose bad json 	var highlightColors = new Array("FFFF00","FF00FF","FF0000","FFBB00","FF9999");
26 verbose bad json     domainName = GetDomainName(str);
26 verbose bad json     if (domainName==null) return null;
26 verbose bad json
26 verbose bad json     hash=0;
26 verbose bad json     for (i=0; i<domainName.length; i++)
26 verbose bad json     {
26 verbose bad json         hash += domainName.charCodeAt(i);
26 verbose bad json     }
26 verbose bad json     hash = hash % (highlightColors.length);
26 verbose bad json     return 'style="background-color: #' + highlightColors[hash] + '; text-decoration: underline;"';
26 verbose bad json }
26 verbose bad json
26 verbose bad json /*
26 verbose bad json // =======================================================================================
26 verbose bad json UserCheck.tools.clearContainer = function(containerId)
26 verbose bad json {
26 verbose bad json     DEBUG.out("Clear container: "+containerId);
26 verbose bad json 	var container = Ext.getCmp(containerId);
26 verbose bad json     if ((container) && (container.items))
26 verbose bad json     {
26 verbose bad json         container.items.each(
26 verbose bad json             function(item)
26 verbose bad json             {
26 verbose bad json              container.remove(item, true);
26 verbose bad json             }
26 verbose bad json         );
26 verbose bad json     }
26 verbose bad json }
26 verbose bad json // =======================================================================================
26 verbose bad json */
26 verbose bad json
26 verbose bad json // Override poral_is error handler.
26 verbose bad json //=============================================================================================
26 verbose bad json window.genericTimeoutHandler = function(portalException)
26 verbose bad json {
26 verbose bad json 	DEBUG.out("UserCheck::genericTimeoutHandler.");
26 verbose bad json
26 verbose bad json 	if ((portalException == undefined) || (portalException == null))
26 verbose bad json 	{
26 verbose bad json 		portalException = new PortalException();
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	// Assign action to the Ok button.
26 verbose bad json 	// The event is added in order to get the exception, if it is set, that is set as the error message OK button attribute. see showPortalErrorMessage
26 verbose bad json 	postErrorHandler = function(event)
26 verbose bad json 	{
26 verbose bad json 		// Check if redirected due to timeout.
26 verbose bad json 		if (getCookie("isRedirectedDueTimeout") == "1")
26 verbose bad json 		{
26 verbose bad json 			// Delete the cookie to allow future errors.
26 verbose bad json 			setCookie("isRedirectedDueTimeout", "0", 0);
26 verbose bad json
26 verbose bad json 			// TODO: Redirect to error page.
26 verbose bad json 			return;
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		// Set cookie in order to prevent error loops.
26 verbose bad json 		setCookie("isRedirectedDueTimeout", "1", 5*60);
26 verbose bad json
26 verbose bad json 		genericPostErrorHandler(event);
26 verbose bad json
26 verbose bad json 		// Reload the page.
26 verbose bad json 		document.location.href=document.location.href;
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	// TODO: Get message from resource bundle.
26 verbose bad json 	//var errMsg = "Your session has expired or timed out.\nYou will be redirected to the login page.\n\n";
26 verbose bad json 	showPortalErrorMessage(portalException, postErrorHandler, true);
26 verbose bad json }
26 verbose bad json //=============================================================================================
26 verbose bad json
26 verbose bad json
26 verbose bad json
26 verbose bad json //=============================================================================================
26 verbose bad json window.genericErrorHandler = function(portalException, callback)
26 verbose bad json {
26 verbose bad json 	DEBUG.out("UserCheck::genericErrorHandler.");
26 verbose bad json 	if ((portalException == undefined) || (portalException == null))
26 verbose bad json 	{
26 verbose bad json 		portalException = new PortalException();
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	if (isNothingness(callback))
26 verbose bad json 	{
26 verbose bad json 		callback = new Callback();
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	// Assign action to the Ok button.
26 verbose bad json 	// The event is added in order to get the exception, if it is set, that is set as the error message OK button attribute. see showPortalErrorMessage
26 verbose bad json 	postErrorHandler = function(event)
26 verbose bad json 	{
26 verbose bad json 		genericPostErrorHandler(event);
26 verbose bad json         callback.call();
26 verbose bad json 		// No reload of the page.
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	showPortalErrorMessage(portalException, postErrorHandler, true);
26 verbose bad json 	return true; // This is required for the execption to stop from being passed to the browser.
26 verbose bad json }
26 verbose bad json //=============================================================================================
26 verbose bad json
26 verbose bad json
26 verbose bad json
26 verbose bad json //=============================================================================================
26 verbose bad json window.genericPostErrorHandler = function(event)
26 verbose bad json {
26 verbose bad json 	DEBUG.out("UserCheck::genericPostErrorHandler.");
26 verbose bad json 	// Just hide the error.
26 verbose bad json 	hidePortalErrorMessage();
26 verbose bad json }
26 verbose bad json //=============================================================================================
26 verbose bad json
26 verbose bad json //=============================================================================================
26 verbose bad json UserCheck.tools.sendErrorReport = function(userDesc, callback)
26 verbose bad json {
26 verbose bad json 	DEBUG.out("UserCheck.tools.sendErrorReport in.");
26 verbose bad json
26 verbose bad json     var sAbsoluteURL = getURL("data/submitErrorReport");
26 verbose bad json     var report = encodeURIComponent(DEBUG.compileErrorReport());
26 verbose bad json     var userDesc = encodeURIComponent(userDesc);
26 verbose bad json
26 verbose bad json 	var sendErrorReportCallback = new Callback();
26 verbose bad json 	sendErrorReportCallback.methodReference = UserCheck.tools.handleErrorReportResponse;
26 verbose bad json 	sendErrorReportCallback.args.push(callback);
26 verbose bad json
26 verbose bad json 	// Send report with no error handlers.
26 verbose bad json 	PORTAL_IS.AJAX_MGR.sendAsyncReq(sAbsoluteURL, "report="+report+"&userDesc="+userDesc, sendErrorReportCallback, null, null, "Sending of error report failed.");
26 verbose bad json
26 verbose bad json 	// Set error flag.
26 verbose bad json 	PORTAL_IS.TOOLS.errorMsgShown = false;
26 verbose bad json }
26 verbose bad json //=============================================================================================
26 verbose bad json
26 verbose bad json //=============================================================================================
26 verbose bad json UserCheck.tools.handleErrorReportResponse = function(xhrStatus, xhrResponse, callback)
26 verbose bad json {
26 verbose bad json 	DEBUG.out("UserCheck.tools.handleErrorReportResponse in.");
26 verbose bad json
26 verbose bad json 	// Set error flag.
26 verbose bad json 	PORTAL_IS.TOOLS.errorMsgShown = false;
26 verbose bad json
26 verbose bad json 	if (isNothingness(callback))
26 verbose bad json 	{
26 verbose bad json 		callback = new Callback();
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	if (xhrStatus != 200)
26 verbose bad json 	{
26 verbose bad json 		// TODO: Handle error.
26 verbose bad json 		DEBUG.out('Submitting error report failed. ('+xhrStatus+')', DEBUG.ERROR);
26 verbose bad json 		callback.call();
26 verbose bad json 		showPortalMessage("Sending of error report failed.");
26 verbose bad json 		return;
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	callback.call();
26 verbose bad json
26 verbose bad json 	showPortalMessage("Error report was sent successfully.\nThank you for your support.", null, UserCheck.MESSAGE_TYPE.Confirmation);
26 verbose bad json }
26 verbose bad json //=============================================================================================
26 verbose bad json
26 verbose bad json //=============================================================================================
26 verbose bad json UserCheck.tools.showErrorReport = function(callback)
26 verbose bad json {
26 verbose bad json 	DEBUG.out("UserCheck.tools.showErrorReport in.");
26 verbose bad json
26 verbose bad json 	// Create new callback with send report and store previous callback in it.
26 verbose bad json 	submitCallback = new Callback();
26 verbose bad json 	submitCallback.methodReference 	= DEBUG.sendErrorReport;
26 verbose bad json 	submitCallback.args = [callback];
26 verbose bad json
26 verbose bad json 	// Create new callback for cancel.
26 verbose bad json 	cancelCallback = new Callback();
26 verbose bad json 	cancelCallback.methodReference 	= function()
26 verbose bad json 	{
26 verbose bad json 		// Clear error flag.
26 verbose bad json 		PORTAL_IS.TOOLS.errorMsgShown = false;
26 verbose bad json 		callback.call();
26 verbose bad json 	};
26 verbose bad json
26 verbose bad json     // Hide any opened boxes.
26 verbose bad json     PORTAL_IS.TOOLS.hideGeneralContainer();
26 verbose bad json     PORTAL_IS.TOOLS.hideDialog();
26 verbose bad json     hidePortalMessage();
26 verbose bad json     hidePortalErrorMessage();
26 verbose bad json
26 verbose bad json  	PORTAL_IS.TOOLS.showDialog(	"Please describe the encountered problem in the text box below.",
26 verbose bad json  							"NOTICE: The report might include personal information from your mail items.\nThe report will not include your credentials.",
26 verbose bad json  							"I was trying to (e.g. review an email):\n\nWork flow which led to this error (e.g. access via email link):\n\nI am unable to:",
26 verbose bad json  							"Report an error",
26 verbose bad json  							submitCallback, cancelCallback, null, null, null, null, true);
26 verbose bad json
26 verbose bad json 	// Set error flag.
26 verbose bad json 	PORTAL_IS.TOOLS.errorMsgShown = true;
26 verbose bad json }
26 verbose bad json //=============================================================================================
26 verbose bad json
26 verbose bad json
26 verbose bad json //=============================================================================================
26 verbose bad json
26 verbose bad json
26 verbose bad json //=============================================================================================
26 verbose bad json
26 verbose bad json DEBUG.showErrorReport = UserCheck.tools.showErrorReport;
26 verbose bad json DEBUG.sendErrorReport = UserCheck.tools.sendErrorReport;
26 verbose bad json
26 verbose bad json UserCheck.tools.oTimeoutManager =
26 verbose bad json {
26 verbose bad json 	timerID: -1,
26 verbose bad json 	startTimeoutTimer: function(duration, callback)
26 verbose bad json 	{
26 verbose bad json 		var milisecs = duration * 1000;
26 verbose bad json 		DEBUG.out("UserCheck.tools.TimeoutManager: Starting timer for " + duration + " seconds.");
26 verbose bad json 		window.TimeoutManagerCallback = callback;
26 verbose bad json 		this.timerID = setTimeout("this.TimeoutManagerCallback();", milisecs);
26 verbose bad json 	},
26 verbose bad json 	stopTimeoutTimer: function()
26 verbose bad json 	{
26 verbose bad json 		clearTimeout(timerID);
26 verbose bad json 		timerID = -1;
26 verbose bad json 	}
26 verbose bad json };
26 verbose bad json
26 verbose bad json UserCheck.DataObj = {};
26 verbose bad json
26 verbose bad json // TODO: This should be defined as an "interface" class and other view managers should implement it.
26 verbose bad json
26 verbose bad json // UC's view manager.
26 verbose bad json window.UCViewManager = function()
26 verbose bad json {
26 verbose bad json 	this.lastRenderedCustomContentContainers = new Array();
26 verbose bad json 	this.defaultContainer = 'portal_main_view';
26 verbose bad json 	this.ignoreHashChange = false;
26 verbose bad json     this.wait = null;
26 verbose bad json     this.requestParams = null;
26 verbose bad json
26 verbose bad json 	// Hash to view mapping, enables us to set display another value than the actual view name.
26 verbose bad json 	//==================================================================================================================
26 verbose bad json 	this.hashViewMap = new Array();
26 verbose bad json 	//   		      Hash name									View name
26 verbose bad json 	//__________________________________________________________________________________________________________________
26 verbose bad json 	this.hashViewMap["UserAction"]								=	"UserAction";
26 verbose bad json 	this.hashViewMap["MainWithMenuView"]					=	"MainWithMenuView";
26 verbose bad json 	this.hashViewMap["Menu"]								=	"Menu";
26 verbose bad json 	this.hashViewMap["Logout"]								=	"Logout";
26 verbose bad json 	this.hashViewMap["MainView"]							=	"MainView";
26 verbose bad json 	this.hashViewMap["Error"]								=	"Error";
26 verbose bad json
26 verbose bad json 	// Get View name from Hash name.
26 verbose bad json 	this.hash2View = function(hash)
26 verbose bad json 	{
26 verbose bad json 		var view = this.hashViewMap[hash];
26 verbose bad json
26 verbose bad json 		if (isNothingness(view))
26 verbose bad json 		{
26 verbose bad json 			view = "UserAction";
26 verbose bad json 		}
26 verbose bad json 		return view;
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	// Get Hash name from View name.
26 verbose bad json 	this.view2Hash = function(view)
26 verbose bad json 	{
26 verbose bad json 		var hash = "UserAction";
26 verbose bad json 		for (key in this.hashViewMap)
26 verbose bad json 		{
26 verbose bad json 			if (this.hashViewMap[key] == view)
26 verbose bad json 			{
26 verbose bad json 				var hash = key;
26 verbose bad json 			}
26 verbose bad json 		}
26 verbose bad json 		return hash;
26 verbose bad json 	}
26 verbose bad json 	//==================================================================================================================
26 verbose bad json
26 verbose bad json     // Initialize view manager.
26 verbose bad json 	//=============================================================================================
26 verbose bad json 	this.init = function()
26 verbose bad json 	{
26 verbose bad json 		DEBUG.out("UCViewManager::init");
26 verbose bad json
26 verbose bad json 		// Bind history change handler.
26 verbose bad json 		$(window).bind('hashchange', viewManager.handleHistoryChange);
26 verbose bad json
26 verbose bad json         // Check address bar's hash and set desired view if exists.
26 verbose bad json 		var desiredView = this.parseHash().view;
26 verbose bad json 		if (isNothingness(desiredView))
26 verbose bad json 		{
26 verbose bad json 			desiredView = "";
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		DEBUG.out("UCViewManager::init, desired view: [" + desiredView + "]");
26 verbose bad json 		this.gotoNextView(desiredView);
26 verbose bad json 	}
26 verbose bad json 	//=============================================================================================
26 verbose bad json
26 verbose bad json
26 verbose bad json
26 verbose bad json     // Handle history changes (back/reload).
26 verbose bad json     // Overriding default handling.
26 verbose bad json 	//=============================================================================================
26 verbose bad json 	this.handleHistoryChange = function(e, ui)
26 verbose bad json 	{
26 verbose bad json 		// In some cases the hash is changed and no view load is required, checking if so.
26 verbose bad json 		if (!viewManager.ignoreHashChange && ui != undefined)
26 verbose bad json 		{
26 verbose bad json 			// Parse view from hash.
26 verbose bad json 			var desiredView = viewManager.parseHash().view;
26 verbose bad json 			DEBUG.out("UCViewManager::handleHistoryChange, desired view:" + desiredView);
26 verbose bad json 			viewManager.gotoNextView(desiredView);
26 verbose bad json 		}
26 verbose bad json 		else
26 verbose bad json 		{
26 verbose bad json 			DEBUG.out("UCViewManager::handleHistoryChange, hash changed ignored.");
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		// Reset the ignore flag.
26 verbose bad json         viewManager.ignoreHashChange = false;
26 verbose bad json 	}
26 verbose bad json 	//=============================================================================================
26 verbose bad json
26 verbose bad json
26 verbose bad json 	// Queries the server for next desired view and than call for rendering it.
26 verbose bad json 	// Will call upon callback when done rendering the view.
26 verbose bad json 	//=============================================================================================
26 verbose bad json 	this.gotoNextView = function(requestedView, callback)
26 verbose bad json 	{
26 verbose bad json     	DEBUG.out("UCViewManager::gotoNextView");
26 verbose bad json
26 verbose bad json     	if (isNothingness(callback))
26 verbose bad json     	{
26 verbose bad json     	    callback = new Callback();
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json         // Check what is the next view.
26 verbose bad json         var sAbsoluteURL 	= PORTAL_IS.TOOLS.getURL("GetNextView");
26 verbose bad json 		var parameters 		= (isNothingness(requestedView)) ? ("") : ("requestedView=" + encodeURIComponent(requestedView));
26 verbose bad json
26 verbose bad json 		var gotoNextViewCallback = new Callback();
26 verbose bad json 			gotoNextViewCallback.methodReference    = this.handleGotoNextViewRequest;
26 verbose bad json 			gotoNextViewCallback.thisArgument       = this;
26 verbose bad json 			gotoNextViewCallback.args               = [callback];
26 verbose bad json
26 verbose bad json         PORTAL_IS.AJAX_MGR.sendAsyncReq(sAbsoluteURL, parameters, gotoNextViewCallback);
26 verbose bad json 	}
26 verbose bad json 	//=============================================================================================
26 verbose bad json
26 verbose bad json
26 verbose bad json 	// Handle next view query.
26 verbose bad json 	//=============================================================================================
26 verbose bad json 	this.handleGotoNextViewRequest = function(xhrStatus, xhrResponse, callback)
26 verbose bad json 	{
26 verbose bad json 		DEBUG.out("UCViewManager::handleGotoNextViewRequest");
26 verbose bad json
26 verbose bad json 		if (isNothingness(callback))
26 verbose bad json     	{
26 verbose bad json     	    callback = new Callback();
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		if (xhrStatus != 200)
26 verbose bad json 		{
26 verbose bad json 			DEBUG.out('Retreiving next view failed. ('+xhrStatus+')', DEBUG.ERROR);
26 verbose bad json 			callback.call();
26 verbose bad json 			return;
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		var nextViewJSONObj = JSON.parse(xhrResponse);
26 verbose bad json         var nextView = nextViewJSONObj.view;
26 verbose bad json 		DEBUG.out("UCViewManager::handleGotoNextViewRequest, next view:" + nextView);
26 verbose bad json
26 verbose bad json 		// Extract the data (request params) from hash and relay it onto next hash.
26 verbose bad json 		// As hash changing handler will be passed back to this method we set the Ignore flag to TRUE
26 verbose bad json 		// and call for the gotoView method.
26 verbose bad json 		viewManager.changeHash(nextView, viewManager.parseHash().data, true);
26 verbose bad json
26 verbose bad json 		viewManager.gotoView(nextView, callback);
26 verbose bad json 	}
26 verbose bad json 	//=============================================================================================
26 verbose bad json
26 verbose bad json
26 verbose bad json 	// Get view contents (CSS, JS and HTML).
26 verbose bad json 	// Will call upon callback when done rendering the view.
26 verbose bad json 	//=============================================================================================
26 verbose bad json 	this.gotoView = function(view, callback)
26 verbose bad json 	{
26 verbose bad json         DEBUG.out("UCViewManager::gotoView view: ["+view+"]");
26 verbose bad json
26 verbose bad json         if (callback == undefined)
26 verbose bad json     	{
26 verbose bad json     	    callback = new Callback();
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		var hash = this.parseHash().view;
26 verbose bad json 		var parameters = (hash == "") ? ("view="+encodeURIComponent(hash)) : ( "requestedView=" + encodeURIComponent(view) + "&view="+encodeURIComponent(hash) );
26 verbose bad json
26 verbose bad json 		sendAsynchronousRequest(PORTAL_IS.TOOLS.getURL("viewManager/GetViewData"),
26 verbose bad json 								parameters,
26 verbose bad json 								this.handleNewView,
26 verbose bad json 								this,
26 verbose bad json 								[callback]);
26 verbose bad json 	}
26 verbose bad json 	//=============================================================================================
26 verbose bad json
26 verbose bad json
26 verbose bad json     // Handle new view rendering.
26 verbose bad json 	//=============================================================================================
26 verbose bad json 	this.handleNewView = function(xhrStatus, xhrResponse, callback)
26 verbose bad json 	{
26 verbose bad json 		if (callback == undefined)
26 verbose bad json     	{
26 verbose bad json     	    callback = new Callback();
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		if (xhrStatus != 200)
26 verbose bad json 		{
26 verbose bad json 			// TODO: Handle error.
26 verbose bad json 			DEBUG.out('Retreiving view failed. ('+xhrStatus+')', DEBUG.ERROR);
26 verbose bad json 			callback.call();
26 verbose bad json 			return;
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		var newViewJSONObj = JSON.parse(xhrResponse);
26 verbose bad json         var newView = newViewJSONObj.view;
26 verbose bad json 		DEBUG.out("UCViewManager::handleNewView, Parsed from JSON - view:" + newView);
26 verbose bad json
26 verbose bad json
26 verbose bad json 		var useDefaultContainerId   = true;
26 verbose bad json 		var requiredContainerId     = "";
26 verbose bad json 		var requiredView            = "";
26 verbose bad json 		var requireSecureConnection = false;
26 verbose bad json
26 verbose bad json 		switch (newView)
26 verbose bad json 		{
26 verbose bad json 			default: // View will be rendered into main page view.
26 verbose bad json 				useDefaultContainerId   = true;
26 verbose bad json 				requiredContainerId     = this.defaultContainer;
26 verbose bad json 			break;
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		// Check if in https, redirect if not.
26 verbose bad json 		if ((requireSecureConnection) && (location.protocol.toLowerCase() == 'http:'))
26 verbose bad json 		{
26 verbose bad json 			newLocation = location.href.replace(/http:/i, "https:");
26 verbose bad json 			location.href = newLocation;
26 verbose bad json 			return;
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		var containerId = this.defaultContainer;
26 verbose bad json 		if (!useDefaultContainerId)
26 verbose bad json 		{
26 verbose bad json 			containerId = requiredContainerId;
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		//var container = Ext.getCmp(containerId);
26 verbose bad json 		var container = document.getElementById(containerId);
26 verbose bad json
26 verbose bad json         if (container != undefined)
26 verbose bad json 		{
26 verbose bad json
26 verbose bad json 			DEBUG.out('Render new view ('+newViewJSONObj.view+') into [' + (useDefaultContainerId ? "DefaultContainer" : requiredContainerId) + "].");
26 verbose bad json
26 verbose bad json 			// Render CSS. - Not needed, all CSS loads from one blob file.
26 verbose bad json 			//evaluateCSS(newViewJSONObj.css, "");
26 verbose bad json
26 verbose bad json 			// Clear existing content.
26 verbose bad json 			container.innerHTML = "";
26 verbose bad json
26 verbose bad json 			// If the html content is not empty, render it into a new pane.
26 verbose bad json 			container.innerHTML = newViewJSONObj.html;
26 verbose bad json
26 verbose bad json 			// Render JavaScript Content.
26 verbose bad json 			evaluateJavaScript(newViewJSONObj.javascript);
26 verbose bad json
26 verbose bad json 		}
26 verbose bad json 		else if (requiredContainerId == this.defaultContainer)
26 verbose bad json 		{
26 verbose bad json
26 verbose bad json 			DEBUG.out('Default view is missing and will be rendered...');
26 verbose bad json 			this.renderDefaultView();
26 verbose bad json 			this.handleNewView(xhrStatus, xhrResponse, callback);
26 verbose bad json
26 verbose bad json 		}
26 verbose bad json 		else // The container is not present and needs to be rendered first.
26 verbose bad json 		{
26 verbose bad json
26 verbose bad json 			DEBUG.out('Required view ('+requiredContainerId+') is missing and needs to be rendered first.');
26 verbose bad json
26 verbose bad json 			// Set the previous view results in a callback, it will be called when finished rendering of the login sequence page.
26 verbose bad json 			var requiredViewCallback = new Callback();
26 verbose bad json 			requiredViewCallback.methodReference    = this.handleNewView;
26 verbose bad json 			requiredViewCallback.thisArgument       = this;
26 verbose bad json 			requiredViewCallback.args               = [200, xhrResponse]; // Set fake status and response.
26 verbose bad json
26 verbose bad json 			// Request specific view.
26 verbose bad json 			this.gotoView(requiredView, requiredViewCallback);
26 verbose bad json
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		// TODO: detect loops.
26 verbose bad json
26 verbose bad json
26 verbose bad json 		// Done here, call the callback.
26 verbose bad json 		//this.wait.hide();
26 verbose bad json         callback.call();
26 verbose bad json 	}
26 verbose bad json 	//=============================================================================================
26 verbose bad json
26 verbose bad json
26 verbose bad json
26 verbose bad json
26 verbose bad json
26 verbose bad json
26 verbose bad json 	// CUSTOM CONTENT RELATED METHODS
26 verbose bad json 	// _________________________________________________________________________________________________________________
26 verbose bad json
26 verbose bad json 	// Get the view's custom Content.
26 verbose bad json 	//=============================================================================================
26 verbose bad json 	this.getViewCustomContent = function(view)
26 verbose bad json 	{
26 verbose bad json 		this.clearLastCustomContent();
26 verbose bad json
26 verbose bad json 		var sAbsoluteURL = PORTAL_IS.TOOLS.getURL("JSONViewData/GetViewCustomContent");
26 verbose bad json 		sendAsynchronousRequest(sAbsoluteURL,
26 verbose bad json 								"view="+view,
26 verbose bad json 								this.renderCustomContent,
26 verbose bad json 								this,
26 verbose bad json 								[]);
26 verbose bad json 	}
26 verbose bad json 	//=============================================================================================
26 verbose bad json
26 verbose bad json
26 verbose bad json 	// Render the custom content.
26 verbose bad json 	//=============================================================================================
26 verbose bad json 	this.renderCustomContent = function(xhrStatus, xhrResponse, callbackObj)
26 verbose bad json 	{
26 verbose bad json 		DEBUG.out('Render custom content.');
26 verbose bad json 		callback = new Callback(callbackObj);
26 verbose bad json
26 verbose bad json 		if (xhrStatus != 200)
26 verbose bad json 		{
26 verbose bad json 			// TODO: Handle error.
26 verbose bad json 			DEBUG.out('Retreiving custom content failed. ('+xhrStatus+')', DEBUG.ERROR);
26 verbose bad json 			callback.call();
26 verbose bad json 			return;
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		// The container Id is: "CustomContent_<VIEW NAME>_<RESOURCE KEY>".
26 verbose bad json 		// For example: the "ISW" view and the resource key of "top" will be rendered into "CustomContent_ISW_top".
26 verbose bad json
26 verbose bad json 		var newCustomContentJSONObj = JSON.parse(xhrResponse);
26 verbose bad json         var keyArr  = newCustomContentJSONObj.keyArr;
26 verbose bad json         var view    = newCustomContentJSONObj.view
26 verbose bad json
26 verbose bad json 		// Override view.
26 verbose bad json 		switch (view)
26 verbose bad json 		{
26 verbose bad json 			case "ICS":                 // No brake, group these views.
26 verbose bad json 			case "Authentication":
26 verbose bad json 			case "ISW":
26 verbose bad json 			case "MultiChallenge":
26 verbose bad json 			case "IswEntry":
26 verbose bad json 				var usedView = "LoginSequencePage";
26 verbose bad json 			break;
26 verbose bad json
26 verbose bad json 			default:
26 verbose bad json 				var usedView = view;
26 verbose bad json 			break;
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json         // Iterate on each of the custom content object.
26 verbose bad json         var customContent, containerId, key;
26 verbose bad json         //for (var key in keyMap)
26 verbose bad json         for (var i=0; i<keyArr.length; i++)
26 verbose bad json 		{
26 verbose bad json 			key = keyArr[i][0];
26 verbose bad json 			customContent = keyArr[i][1];
26 verbose bad json 			containerId = "CustomContent_"+usedView+"_"+key;
26 verbose bad json 			DEBUG.out('Render custom content: usedView:['+usedView+"] into:["+containerId+"]");
26 verbose bad json             this.evaluateCustomContent(customContent, containerId);
26 verbose bad json             this.lastRenderedCustomContentContainers.push(containerId);
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		// Call the callback.
26 verbose bad json 		callback.call();
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json     // Encapsulate conditional rendering of the custom content.
26 verbose bad json 	this.evaluateCustomContent = function(customContent, containerId)
26 verbose bad json 	{
26 verbose bad json 		destinationRef = document.getElementById(containerId);
26 verbose bad json 		if ( (destinationRef != null) && (destinationRef != undefined) )
26 verbose bad json 		{
26 verbose bad json 			evaluateHTMLContent(customContent, destinationRef);
26 verbose bad json 		}
26 verbose bad json 	}
26 verbose bad json 	//=============================================================================================
26 verbose bad json
26 verbose bad json
26 verbose bad json 	// Clear last rendered containers.
26 verbose bad json 	//=============================================================================================
26 verbose bad json 	this.clearLastCustomContent = function()
26 verbose bad json 	{
26 verbose bad json 		for (var containerIndex in this.lastRenderedCustomContentContainers)
26 verbose bad json 		{
26 verbose bad json 			this.evaluateCustomContent("&nbsp;", this.lastRenderedCustomContentContainers[containerIndex]);
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		this.lastRenderedCustomContentContainers = new Array();
26 verbose bad json 	}
26 verbose bad json     //=============================================================================================
26 verbose bad json
26 verbose bad json 	// Render default view.
26 verbose bad json     //=============================================================================================
26 verbose bad json     this.renderDefaultView = function()
26 verbose bad json     {}
26 verbose bad json 	//==================================================================================================================
26 verbose bad json
26 verbose bad json 	//==================================================================================================================
26 verbose bad json 	this.logoutButtonHandler = function()
26 verbose bad json     {}
26 verbose bad json     //==================================================================================================================
26 verbose bad json
26 verbose bad json
26 verbose bad json
26 verbose bad json
26 verbose bad json
26 verbose bad json     // DEPRECATED METHODS
26 verbose bad json 	// _________________________________________________________________________________________________________________
26 verbose bad json
26 verbose bad json 	// DEPRECATED, use viewManager.gotoNextView instead.
26 verbose bad json 	//==================================================================================================================
26 verbose bad json 	this.gotoNextState = function(callback)
26 verbose bad json 	{
26 verbose bad json 		this.gotoNextView(null, callback);
26 verbose bad json 		return;
26 verbose bad json     }
26 verbose bad json 	//==================================================================================================================
26 verbose bad json }
26 verbose bad json
26 verbose bad json // Extend ViewManager (Portal IS).
26 verbose bad json UCViewManager.prototype = new ViewManager();
26 verbose bad json window.viewManager = new UCViewManager();
26 verbose bad json
26 verbose bad json         </script>
26 verbose bad json
26 verbose bad json 		<title>Check Point UserCheck</title>
26 verbose bad json 	</head>
26 verbose bad json
26 verbose bad json 	<body class="usercheck_body_background_class" unselectable="on">
26 verbose bad json 		<noscript>
26 verbose bad json 			This portal requires browser which support JavaScript.<br>Please make sure that you are using an updated browser and that JavaScript is enabled.		</noscript>
26 verbose bad json 				<div id='portalErrorMessage' class="portalErrorMessageDivHide">
26 verbose bad json
26 verbose bad json 		<table cellpadding="0px" cellspacing="0px" class="portalErrorMessageTableContainer" width="100%">
26 verbose bad json 			<tr>
26 verbose bad json 				<td align="center">
26 verbose bad json
26 verbose bad json 					<table cellpadding="0px" cellspacing="0px" class="portalErrorMessageTable">
26 verbose bad json
26 verbose bad json 						<tr id="portalErrorMessage_title_container_row" class="portalMessage_title show" width="100%">
26 verbose bad json 							<td id="portalErrorMessage_title_container" height="10px" valign="middle" align="left" colspan="2">&nbsp;</td>
26 verbose bad json 						</tr>
26 verbose bad json
26 verbose bad json 						<tr>
26 verbose bad json 							<td id="portalErrorMessage_container" align="left" style="padding: 10px;" colspan="2">&nbsp;</td>
26 verbose bad json 						</tr>
26 verbose bad json
26 verbose bad json 						<tr>
26 verbose bad json
26 verbose bad json 							<td>
26 verbose bad json 								<table cellpadding="0px" cellspacing="0px" width="100%"style=" padding: 10px;">
26 verbose bad json 									<tr>
26 verbose bad json 										<td id="portalMessage_error_report_container" align="left" valign="buttom" class="hide">
26 verbose bad json 											<span id="portalMessage_error_report_link" onclick="DEBUG.showErrorReport();" class="portal_link" style="left: 10px;">
26 verbose bad json 												Send error report											</span>
26 verbose bad json 										</td>
26 verbose bad json 										<td id="portalMessage_error_button_container" align="right" height="10px;" valign="buttom">
26 verbose bad json 											<button id="portalErrorMessage_button" class="portalErrorMessage_button" onclick="hidePortalErrorMessage();">
26 verbose bad json 												OK											</button>
26 verbose bad json 										</td>
26 verbose bad json 									</tr>
26 verbose bad json 								</table>
26 verbose bad json 							</td>
26 verbose bad json
26 verbose bad json 						</tr>
26 verbose bad json
26 verbose bad json 					</table>
26 verbose bad json
26 verbose bad json 				</td>
26 verbose bad json 			</tr>
26 verbose bad json 		</table>
26 verbose bad json
26 verbose bad json 	</div>
26 verbose bad json
26 verbose bad json
26 verbose bad json 		<div id='portalMessage' class="portalMessageDivHide">
26 verbose bad json
26 verbose bad json 		<table cellpadding="0px" cellspacing="0px" class="portalMessageTableContainer" width="100%">
26 verbose bad json 			<tr>
26 verbose bad json 				<td align="center">
26 verbose bad json
26 verbose bad json 					<table cellpadding="0px" cellspacing="0px" class="portalMessageTable">
26 verbose bad json
26 verbose bad json 						<tr id="portalMessage_title_container_row" class="portalMessage_title show">
26 verbose bad json 							<td id="portalMessage_title_container" class="portalMessage_title_td" valign="middle" align="left">
26 verbose bad json 								&nbsp;
26 verbose bad json 							</td>
26 verbose bad json 						</tr>
26 verbose bad json
26 verbose bad json 						<tr>
26 verbose bad json 							<td id="portalMessage_container" align="left" style="padding: 10px;">
26 verbose bad json 								&nbsp;
26 verbose bad json 							</td>
26 verbose bad json 						</tr>
26 verbose bad json
26 verbose bad json 						<tr id="portalMessage_textarea_container_row" class="hide">
26 verbose bad json 							<td id="portalMessage_textarea_container" align="left" style="padding: 10px;">
26 verbose bad json 							</td>
26 verbose bad json 						</tr>
26 verbose bad json
26 verbose bad json 						<tr id="portalMessage_validation_message_container_row" class="show">
26 verbose bad json 							<td id="portalMessage_validation_message_container" align="left" class="portalMessage_validation_submessage" style="padding: 10px;">
26 verbose bad json 								&nbsp;
26 verbose bad json 							</td>
26 verbose bad json 						</tr>
26 verbose bad json
26 verbose bad json 						<tr id="portalMessage_submessage_container_row" class="hide">
26 verbose bad json 							<td id="portalMessage_submessage_container" align="left" class="portalMessage_submessage" style="padding: 10px;">
26 verbose bad json 								&nbsp;
26 verbose bad json 							</td>
26 verbose bad json 						</tr>
26 verbose bad json
26 verbose bad json 						<tr>
26 verbose bad json 							<td align="center" height="10px;" valign="buttom" style="padding: 10px;" colspan="2">
26 verbose bad json 								<div id="portalMessage_ok_button_container" class="show" style="text-align: right;">
26 verbose bad json 									<button id="portalMessage_button" class="portalMessage_button" onclick="hidePortalMessage();">
26 verbose bad json 										OK									</button>
26 verbose bad json 								</div>
26 verbose bad json
26 verbose bad json 								<div id="portalMessage_bool_button_container" class="hide">
26 verbose bad json 									<button id="portalMessage_yes_button" class="portalMessage_button" onclick="hidePortalMessage();">
26 verbose bad json 										BUTTON.YES									</button>
26 verbose bad json 									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
26 verbose bad json 									<button id="portalMessage_no_button" class="portalMessage_button" onclick="hidePortalMessage();">
26 verbose bad json 										BUTTON.NO									</button>
26 verbose bad json 								</div>
26 verbose bad json
26 verbose bad json 								<div id="portalMessage_submit_button_container" class="hide">
26 verbose bad json 									<button id="portalMessage_submit_button" class="portalMessage_button" onclick="hidePortalMessage();">
26 verbose bad json 										BUTTON.SUBMIT									</button>
26 verbose bad json 									&nbsp;&nbsp;&nbsp;
26 verbose bad json 									<button id="portalMessage_cancel_button" class="portalMessage_button" onclick="hidePortalMessage();">
26 verbose bad json 										Cancel									</button>
26 verbose bad json 								</div>
26 verbose bad json 							</td>
26 verbose bad json 						</tr>
26 verbose bad json 					</table>
26 verbose bad json
26 verbose bad json 				</td>
26 verbose bad json 			</tr>
26 verbose bad json 		</table>
26 verbose bad json
26 verbose bad json 	</div>
26 verbose bad json
26 verbose bad json
26 verbose bad json 		<div id='portalGeneralContainer' class="portalMessageDivHide">
26 verbose bad json
26 verbose bad json 		<table cellpadding="0px" cellspacing="0px" class="portalMessageTableContainer" width="100%">
26 verbose bad json 			<tr>
26 verbose bad json 				<td align="center">
26 verbose bad json
26 verbose bad json 					<table cellpadding="0px" cellspacing="0px" class="portalMessageTable">
26 verbose bad json
26 verbose bad json 						<tr id="portalGeneralContainer_title_container_row" class="portalMessage_title show" width="100%">
26 verbose bad json 							<td id="portalGeneralContainer_title_container" height="10px" valign="middle" align="left">
26 verbose bad json 								&nbsp;
26 verbose bad json 							</td>
26 verbose bad json 						</tr>
26 verbose bad json
26 verbose bad json 						<tr>
26 verbose bad json 							<td id="portalGeneralContainer_container" align="left" style="padding: 10px;">
26 verbose bad json 								&nbsp;
26 verbose bad json 							</td>
26 verbose bad json 						</tr>
26 verbose bad json
26 verbose bad json 					</table>
26 verbose bad json
26 verbose bad json 				</td>
26 verbose bad json 			</tr>
26 verbose bad json 		</table>
26 verbose bad json
26 verbose bad json 	</div>
26 verbose bad json
26 verbose bad json
26 verbose bad json 	<div id='PortalErrorScreenShader' class="screenShaderHide">
26 verbose bad json 		<table cellpadding="0px" cellspacing="0px" width="100%" height="100%">
26 verbose bad json 			<tr>
26 verbose bad json 				<td>&nbsp;</td>
26 verbose bad json 			</tr>
26 verbose bad json 		</table>
26 verbose bad json 	</div>
26 verbose bad json
26 verbose bad json
26 verbose bad json
26 verbose bad json 	<div id='PortalScreenShader' class="screenShaderHide">
26 verbose bad json 		<table cellpadding="0px" cellspacing="0px" width="100%" height="100%">
26 verbose bad json 			<tr>
26 verbose bad json 				<td>&nbsp;</td>
26 verbose bad json 			</tr>
26 verbose bad json 		</table>
26 verbose bad json 	</div>
26 verbose bad json
26 verbose bad json
26 verbose bad json 		<div id="portal_main_view" class="div_expanded" unselectable="on">
26 verbose bad json 			<table height="100%" width="100%" border="0" cellpadding="0" cellspacing="0" class="">
26 verbose bad json 				<tr>
26 verbose bad json 					<td id="portal_center_div" valign="top" unselectable="on" class="usercheck_main_background_class">
26 verbose bad json 						<div id="portal_top_pane_div" class="usercheck_header_class">
26 verbose bad json
26 verbose bad json <!--position: fixed; bottom: -1px; left: 50%; margin-left: -435px; -->
26 verbose bad json
26 verbose bad json <table width="100%" cellpadding="0" cellspacing="0" class="usercheck_header_table_class usercheck_content_table_class">
26 verbose bad json 	<tr>
26 verbose bad json 		<td class="usercheck_header_left_class" unselectable="on">
26 verbose bad json 		</td>
26 verbose bad json 		<td class="usercheck_header_center_class" unselectable="on">
26 verbose bad json 			<div class="usercheck_page_title_class" id="usercheck_page_title" unselectable="on" >UserCheck</div>
26 verbose bad json 		</td>
26 verbose bad json 		<td id="usercheck_header_right_logo" class="usercheck_header_right_class" unselectable="on">
26 verbose bad json 			<img class="usercheck_company_logo_class" id="usercheck_company_logo" ></img>
26 verbose bad json 		</td>
26 verbose bad json 		<td id="usercheck_header_right_empty" class="usercheck_header_right_empty_class" unselectable="on">
26 verbose bad json 		</td>
26 verbose bad json 	</tr>
26 verbose bad json </table>
26 verbose bad json 						</div>
26 verbose bad json 						<div style="">&nbsp;</div><div style="">&nbsp;</div><div style="">&nbsp;</div>
26 verbose bad json 						<div style="text-align: center;" unselectable="on">
26 verbose bad json 						<table  id="usercheck_content_table" cellpadding="0" cellspacing="0" class="usercheck_content_table_class">
26 verbose bad json 						<tr>
26 verbose bad json 							<td rowspan="3" valign="top" class="usercheck_message_icon_column"><div class="usercheck_message_icon_class" id="usercheck_img_div" unselectable="on">&nbsp;</div></td>
26 verbose bad json 							<td><div id="usercheck_title_div" class="usercheck_title_class" unselectable="on">&nbsp;</div></td>
26 verbose bad json 						</tr>
26 verbose bad json 						<tr>
26 verbose bad json 							<td><div id="usercheck_main_div" class="usercheck_message_class" unselectable="on">&nbsp;</div></td>
26 verbose bad json 						</tr>
26 verbose bad json 						<tr>
26 verbose bad json 							<td><div id="usercheck_error_div" unselectable="on">&nbsp;</div></td>
26 verbose bad json 						</tr>
26 verbose bad json 						<tr>
26 verbose bad json 						<td colspan="2" style="text-align: center;" unselectable="on">
26 verbose bad json 							<table style="margin-right: -10px; width: 50%; float: right;"><tr><td>
26 verbose bad json 							<center>
26 verbose bad json 								<div id="usercheck_cancel_div" class="usercheck_ok_button_div_class">&nbsp;</div>
26 verbose bad json 							</center>
26 verbose bad json 							</td><td>
26 verbose bad json 							<center>
26 verbose bad json 							<div id="usercheck_ok_div" class="usercheck_ok_button_div_class">&nbsp;</div>
26 verbose bad json 							</center>
26 verbose bad json 							</td></tr></table>
26 verbose bad json 						</td>
26 verbose bad json 						</tr>
26 verbose bad json 						</table></div>
26 verbose bad json 					</td>
26 verbose bad json 				</tr>
26 verbose bad json 				<tr>
26 verbose bad json 					<td id ="usercheck_footer_td" class="usercheck_footer_class usercheck_footer_height_class">
26 verbose bad json 						<div id="portal_bottom_pane_div">
26 verbose bad json
26 verbose bad json <!--position: fixed; bottom: -1px; left: 50%; margin-left: -435px; -->
26 verbose bad json
26 verbose bad json <table id="footer_table_logo" cellpadding="0" cellspacing="0" class="usercheck_footer_table_class footer_no_logo">
26 verbose bad json 	<tr>
26 verbose bad json 		<td class="usercheck_footer_height_class">
26 verbose bad json 			<div id="usercheck_language_selection_div" class="usercheck_lang_select_div_class" style="display: none;">
26 verbose bad json 				Language: <select id="usercheck_language_selection" class="usercheck_lang_select_class" onchange="javascript:window.oUserAction.handleLanguageChange();">
26 verbose bad json 				</select>
26 verbose bad json 			</div>
26 verbose bad json 		</td>
26 verbose bad json 	</tr>
26 verbose bad json </table>						</div>
26 verbose bad json 					</td>
26 verbose bad json 				</tr>
26 verbose bad json 			</table>
26 verbose bad json 		</div>
26 verbose bad json 	</body>
26 verbose bad json
26 verbose bad json
26 verbose bad json     <script type="text/javascript">
26 verbose bad json
26 verbose bad json 	//Continue the background image on IE6-7 graphics design.
26 verbose bad json 	if(window.browserDetails.browserType == window.BrowserType.IE && window.browserDetails.browserVersion <= 7 && (document.documentMode === undefined || document.documentMode <= 7))
26 verbose bad json 	{
26 verbose bad json 		var footer_td = document.getElementById('usercheck_footer_td');
26 verbose bad json 		footer_td.setAttribute("className", footer_td.getAttribute("className") + " usercheck_main_background_class");
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 		UserCheck.DataObj.IID = "B667CC11-B632-EFF9-D194-B4447D871699";
26 verbose bad json
26 verbose bad json 	UserCheck.DataObj.frame = 0;
26 verbose bad json
26 verbose bad json
26 verbose bad json 	/*this is a common object for PortalMain and PortalMainDlp. functions here should be empty */
26 verbose bad json window.UserActionCommon = function()
26 verbose bad json {
26 verbose bad json 	this.DlpHttpLearning = function(adminMessage,HttpLearningEnabled)
26 verbose bad json 	{
26 verbose bad json
26 verbose bad json 	}
26 verbose bad json 	this.DlpHideCancelBtn = function(action)
26 verbose bad json 	{
26 verbose bad json
26 verbose bad json 	}
26 verbose bad json }
26 verbose bad json
26 verbose bad json window.oUserActionCommon = new window.UserActionCommon();
26 verbose bad json
26 verbose bad json
26 verbose bad json var g_userID = "";
26 verbose bad json var g_refreshFiles = false;
26 verbose bad json
26 verbose bad json window.UserAction = function()
26 verbose bad json {
26 verbose bad json 	this.incidentObject = {};
26 verbose bad json 	this.textAreaText = "";
26 verbose bad json
26 verbose bad json 	this.getCorrectClass = function()
26 verbose bad json 	{
26 verbose bad json 		var correctClass = "class";
26 verbose bad json
26 verbose bad json 		//Choose the correct class attribute name (in IE6-7 we need "className" instead of "class") according to IE version - but check for compatibility first!
26 verbose bad json 		if(window.browserDetails.browserType == window.BrowserType.IE && window.browserDetails.browserVersion <= 7 && document.documentMode === undefined)
26 verbose bad json 		{
26 verbose bad json 			correctClass = "className";
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		return correctClass;
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	// Initialize.
26 verbose bad json 	//=============================================================================================
26 verbose bad json 	this.init = function(cancelPage)
26 verbose bad json 	{
26 verbose bad json 		if (typeof cancelPage == 'undefined')
26 verbose bad json 		{
26 verbose bad json 			cancelPage = false;
26 verbose bad json 		}
26 verbose bad json 		var requestData = 	{
26 verbose bad json 			                	IID: "-1",
26 verbose bad json 								UserID: "",
26 verbose bad json 								IsThinPortal: false,
26 verbose bad json 								UserLang: "",
26 verbose bad json 								GetCancelPage: cancelPage
26 verbose bad json 							};
26 verbose bad json
26 verbose bad json 		requestData.IID = UserCheck.DataObj.IID;
26 verbose bad json
26 verbose bad json 		var cookie = getCookie('UserCheck_UserID');
26 verbose bad json 		requestData.UserID = cookie != null ? cookie : "";
26 verbose bad json
26 verbose bad json 		requestData.IsThinPortal = window.isThinPortal === true ? true : false;
26 verbose bad json
26 verbose bad json 		var selectedLanguage = getCookie('UserCheck_Selected_Language');
26 verbose bad json 		if(selectedLanguage == null)
26 verbose bad json 		{
26 verbose bad json 			selectedLanguage = "";
26 verbose bad json 		}
26 verbose bad json 		requestData.UserLang = selectedLanguage;
26 verbose bad json
26 verbose bad json 		var sAbsoluteURL = PORTAL_IS.TOOLS.getURL("data/GetUserCheckIncidentData");
26 verbose bad json
26 verbose bad json 		if (window.isThinPortal === true)
26 verbose bad json 		{
26 verbose bad json 			//Create a custom timeout handler for the thin portal.
26 verbose bad json 			PORTAL_IS.AJAX_MGR.customTimeoutHandler = function()
26 verbose bad json 			{
26 verbose bad json 				window.location = "about:blank";
26 verbose bad json 			}
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		sendAsynchronousRequest(sAbsoluteURL,
26 verbose bad json 								flattenObject(requestData),
26 verbose bad json 								this.handleUserCheckIncidentData,
26 verbose bad json 								this,
26 verbose bad json 								[new Callback()]);
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	//Toggles the button's state from enabled to disabled and vice versa.
26 verbose bad json 	this.setButtonMode = function(buttonState, buttonID)
26 verbose bad json 	{
26 verbose bad json 		var button = document.getElementById(buttonID);
26 verbose bad json 		if(button == null)
26 verbose bad json 			return;
26 verbose bad json
26 verbose bad json 		var correctClass = window.oUserAction.getCorrectClass();
26 verbose bad json
26 verbose bad json 		if(buttonState)
26 verbose bad json 		{
26 verbose bad json 			//Enable the button.
26 verbose bad json 			button.setAttribute(correctClass, "button");
26 verbose bad json 			button.onclick = function(){ javascript:oUserAction.submitOK(); };
26 verbose bad json
26 verbose bad json 			button.style.cursor = "pointer";
26 verbose bad json 		}
26 verbose bad json 		else
26 verbose bad json 		{
26 verbose bad json 			//Disable the button.
26 verbose bad json 			button.setAttribute(correctClass, "button buttonDisabled");
26 verbose bad json 			button.onclick = null;
26 verbose bad json
26 verbose bad json 			button.style.cursor = "default";
26 verbose bad json 		}
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	//Changes the button CSS class (support for IE6-8). buttonCLS is for additional classes to be added to the button.
26 verbose bad json 	this.setButtonState = function(state, buttonID, buttonCLS)
26 verbose bad json 	{
26 verbose bad json 		if (!buttonID)
26 verbose bad json 		{
26 verbose bad json 			buttonID = 'UserCheck_OK_Button';
26 verbose bad json 			buttonCLS = '';
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		var correctClass = window.oUserAction.getCorrectClass();
26 verbose bad json
26 verbose bad json 		var button = document.getElementById(buttonID);
26 verbose bad json
26 verbose bad json 		if(button.getAttribute(correctClass).indexOf("Disabled") == -1)
26 verbose bad json 		{
26 verbose bad json 			//The button is not disabled.
26 verbose bad json 			button.setAttribute(correctClass, "button button" + state + " " + buttonCLS);
26 verbose bad json 		}
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.handleUserCheckIncidentData = function(xhrStatus, xhrResponse, callback)
26 verbose bad json 	{
26 verbose bad json 		DEBUG.out("UserAction::handleUserCheckIncidentData");
26 verbose bad json
26 verbose bad json 		if (callback == undefined)
26 verbose bad json     	{
26 verbose bad json     	    callback = new Callback();
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		if (xhrStatus != 200)
26 verbose bad json 		{
26 verbose bad json 			DEBUG.out('Retreiving UserCheck Incident Data failed. ('+xhrStatus+')', DEBUG.ERROR);
26 verbose bad json 			callback.call();
26 verbose bad json 			return;
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		this.incidentObject = JSON.parse(xhrResponse);
26 verbose bad json 		var Languages = this.incidentObject.Languages;
26 verbose bad json 		var UserCheckLogoID = this.incidentObject.UserCheckLogoID;
26 verbose bad json 		var RedirectToAddr = this.incidentObject.RedirectToAddr;
26 verbose bad json 		var AutoRedirect = this.incidentObject.AutoRedirect;
26 verbose bad json 		var ExternalSystemURL = this.incidentObject.ExternalSystemURL;
26 verbose bad json 		var Action = this.incidentObject.Action;
26 verbose bad json 		var Variables = this.incidentObject.Variables;
26 verbose bad json
26 verbose bad json 		this.incidentObject.HasBeenCancelled = false;
26 verbose bad json
26 verbose bad json 		setCookie('UserCheck_UserID', this.incidentObject.UserID, 31556926);
26 verbose bad json
26 verbose bad json 		if (Variables['product'] != 'Threat Extraction')
26 verbose bad json 		{
26 verbose bad json 			if(AutoRedirect == true && RedirectToAddr != "")
26 verbose bad json 			{
26 verbose bad json 				if (window.isThinPortal === undefined)
26 verbose bad json 				{
26 verbose bad json 				//We have an address and auto redirect is true so redirect to that URL.
26 verbose bad json 					// if (RedirectToAddr.indexOf('http://') != 0)
26 verbose bad json 					if ((RedirectToAddr.indexOf('http://') != 0)  &&(RedirectToAddr.indexOf('https://') != 0))
26 verbose bad json 						RedirectToAddr = "http://" + RedirectToAddr;
26 verbose bad json
26 verbose bad json 				window.location = RedirectToAddr;
26 verbose bad json 				}
26 verbose bad json 				else
26 verbose bad json 					window.location = "about:blank"; //No reason to redirect in the Thin Portal
26 verbose bad json 			}
26 verbose bad json 		}
26 verbose bad json 		else
26 verbose bad json 		{
26 verbose bad json 			if (Action == "SCRUB-SUCCESS")
26 verbose bad json 			{
26 verbose bad json 				// in scrub success page, if not mobile or thin, give more space for the list of original files names and info
26 verbose bad json 				if(window.browserDetails.isMobile() === false && window.isThinPortal === undefined)
26 verbose bad json 				{
26 verbose bad json 					var content_table = document.getElementById("usercheck_content_table");
26 verbose bad json 					if (content_table != null)
26 verbose bad json 					{
26 verbose bad json 						content_table.style.tableLayout="auto";
26 verbose bad json 					}
26 verbose bad json
26 verbose bad json 					var message_div = document.getElementById("usercheck_main_div");
26 verbose bad json 					if (message_div != null)
26 verbose bad json 					{
26 verbose bad json 						message_div.style.minWidth="auto";
26 verbose bad json 						message_div.style.maxWidth="700px";
26 verbose bad json 						message_div.style.whiteSpace="nowrap";
26 verbose bad json 						message_div.style.wordWrap="normal";
26 verbose bad json 						message_div.style.overflow="auto";
26 verbose bad json 					}
26 verbose bad json 				}
26 verbose bad json
26 verbose bad json 				var requestData = 	{
26 verbose bad json 							IID: "-1"
26 verbose bad json 						};
26 verbose bad json 				requestData.IID = UserCheck.DataObj.IID;
26 verbose bad json 				var sAbsoluteURL = PORTAL_IS.TOOLS.getURL("data/GetScrubFiles");
26 verbose bad json 				sendAsynchronousRequest(sAbsoluteURL,
26 verbose bad json 						flattenObject(requestData),
26 verbose bad json 						this.handleScrubbingFiles,
26 verbose bad json 						this,
26 verbose bad json 						[new Callback()]);
26 verbose bad json 			}
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		if(ExternalSystemURL != "")
26 verbose bad json 			//We have an external system address so redirect to that URL.
26 verbose bad json 			// window.location = ExternalSystemURL + (this.incidentObject.ForwardParams == true ? "?IncidentID=" + UserCheck.DataObj.IID + "&UserID=" + this.incidentObject.UserID : "");
26 verbose bad json 			if (this.incidentObject.ForwardParams == true)
26 verbose bad json 			{
26 verbose bad json 							window.location = ExternalSystemURL + "?IncidentID=" + UserCheck.DataObj.IID + "&UserID=" + this.incidentObject.UserID;
26 verbose bad json 			}
26 verbose bad json 			else
26 verbose bad json 			{
26 verbose bad json 							window.location = ExternalSystemURL;
26 verbose bad json 			}
26 verbose bad json
26 verbose bad json
26 verbose bad json
26 verbose bad json 		this.prepareLanguageSelection();
26 verbose bad json
26 verbose bad json 		if(window.self !== window.top)
26 verbose bad json 		{
26 verbose bad json 			//We are inside a frame. Display small version of the portal and give link to a full version of the portal in new tab/window.
26 verbose bad json
26 verbose bad json 			var url = '<a href="' + window.location + "&frame=1" + '" target="_blank">';
26 verbose bad json 			if (Action == "SCRUB-SUCCESS")
26 verbose bad json 			{
26 verbose bad json 				Action = "INFORM";
26 verbose bad json 			}
26 verbose bad json 			url += draw_img_tag(getURL("img/" + Action.toLowerCase() + ".png")) + '&nbsp;&nbsp;';
26 verbose bad json 			url += Action == 'BLOCK' ? PORTAL_IS.L10N.L10N_Obj.getStr("UC.BLOCKED_IFRAME") : PORTAL_IS.L10N.L10N_Obj.getStr("UC.INFO_IFRAME");
26 verbose bad json 			url += '</a>';
26 verbose bad json
26 verbose bad json 			document.body.innerHTML = url;
26 verbose bad json 			document.body.style.backgroundImage = 'none';
26 verbose bad json 			document.body.style.textAlign = 'center';
26 verbose bad json 			document.body.style.verticalAlign = 'text-bottom';
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		//Decide which footer to display according to the action type (for Block and Limit we display footer without CP logo).
26 verbose bad json 		if(window.isThinPortal === true)
26 verbose bad json 		{
26 verbose bad json 			var thin_table = document.getElementById('usercheck_thin_table');
26 verbose bad json 			if(thin_table != null && Action != 'BLOCK' && Action != 'LIMIT')
26 verbose bad json 			{
26 verbose bad json 				var correctClass = window.oUserAction.getCorrectClass();
26 verbose bad json
26 verbose bad json 				thin_table.setAttribute(correctClass, "usercheck_main_mobile_background_class with_logo");
26 verbose bad json 			}
26 verbose bad json 		}
26 verbose bad json 		else
26 verbose bad json 		{
26 verbose bad json 		var logo_footer = document.getElementById('footer_table_logo');
26 verbose bad json 		if(logo_footer != null && Action != 'BLOCK' && Action != 'LIMIT')
26 verbose bad json 		{
26 verbose bad json 			var correctClass = window.oUserAction.getCorrectClass();
26 verbose bad json
26 verbose bad json 			logo_footer.setAttribute(correctClass, "usercheck_footer_table_class footer_logo");
26 verbose bad json 		}
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		g_userID = this.incidentObject.UserID;
26 verbose bad json
26 verbose bad json 		if (Action == "SCRUB-SUCCESS")
26 verbose bad json 		{
26 verbose bad json 			Action = "INFORM";
26 verbose bad json 		}
26 verbose bad json 		//Draw incident image according to the incident type
26 verbose bad json 		if(document.getElementById('usercheck_img_div') !== null)
26 verbose bad json 		document.getElementById('usercheck_img_div').innerHTML = draw_img_tag(getURL("img/" + Action.toLowerCase() + ".png"));
26 verbose bad json
26 verbose bad json 		if(this.incidentObject.IsLogoConfigured)
26 verbose bad json 		{
26 verbose bad json 			//The page has a logo defined in the GUI - load it.
26 verbose bad json
26 verbose bad json 			//Desktop header.
26 verbose bad json 			var header_right_logo = document.getElementById('usercheck_header_right_logo');
26 verbose bad json 			if(header_right_logo != null)
26 verbose bad json 				if(window.browserDetails.browserType == window.BrowserType.IE && window.browserDetails.browserVersion <= 7)
26 verbose bad json 					header_right_logo.style.display = "block";
26 verbose bad json 				else
26 verbose bad json 					header_right_logo.style.display = "table-cell";
26 verbose bad json
26 verbose bad json 			var header_right_empty = document.getElementById('usercheck_header_right_empty');
26 verbose bad json 			if(header_right_empty != null)
26 verbose bad json 				header_right_empty.style.display = "none";
26 verbose bad json
26 verbose bad json 			//Mobile header.
26 verbose bad json 			var mobile_header = document.getElementById('header_mobile_div');
26 verbose bad json 			if(mobile_header != null)
26 verbose bad json 			{
26 verbose bad json 				mobile_header.style.display = "block";
26 verbose bad json 			}
26 verbose bad json
26 verbose bad json 			//Company logo.
26 verbose bad json 			var company_logo = document.getElementById('usercheck_company_logo');
26 verbose bad json 			if(company_logo != null)
26 verbose bad json 				company_logo.src = getURL("images/interactions/" + UserCheckLogoID + ".png");
26 verbose bad json 		}
26 verbose bad json 		else if(window.isThinPortal === true)
26 verbose bad json 		{
26 verbose bad json 			 //If there is no logo defined, display the default logo in the thin portal.
26 verbose bad json 			var company_logo = document.getElementById('usercheck_company_logo');
26 verbose bad json 			if(company_logo != null)
26 verbose bad json 				company_logo.src = getURL("img/cp_logo_mobile_thin.png");
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		//Start the timeout manager.
26 verbose bad json 		UserCheck.tools.oTimeoutManager.startTimeoutTimer(this.incidentObject.Expiration - 15, this.handleTimeout);
26 verbose bad json
26 verbose bad json 		if (UserCheck.DataObj.GetSingleIncidentReview !== undefined && UserCheck.DataObj.GetSingleIncidentReview == 1)
26 verbose bad json 		{
26 verbose bad json 			window.singleIncident = new SingleIncident();
26 verbose bad json 			singleIncident.init();
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		callback.call();
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.submitOK = function()
26 verbose bad json 	{
26 verbose bad json 		//This function determines if it is OK to proceed with sending a response if all validation criteria are met.
26 verbose bad json
26 verbose bad json 		//If we are in a Block action in thin portal, just redirect to about:blank.
26 verbose bad json 		if (window.isThinPortal === true && window.oUserAction.incidentObject.Action === "BLOCK")
26 verbose bad json 		{
26 verbose bad json 			window.location = "about:blank";
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		if(document.getElementById('UserCheck_Textual_Input') != null)
26 verbose bad json 			//Verify we have the real textarea!
26 verbose bad json 			if(document.getElementById('UserCheck_Textual_Input').value !== undefined)
26 verbose bad json 				//Unfocus the text-area.
26 verbose bad json 				document.getElementById('UserCheck_Textual_Input').blur();
26 verbose bad json
26 verbose bad json 		if(!window.oUserAction.highlightInput())
26 verbose bad json 			//There was some user input missing - don't continue.
26 verbose bad json 			return;
26 verbose bad json
26 verbose bad json 		var cookie = getCookie('UserCheck_UserID');
26 verbose bad json
26 verbose bad json 		var requestData = {};
26 verbose bad json
26 verbose bad json 		requestData.IID = "-1";
26 verbose bad json 		requestData.UserOption = "OK";
26 verbose bad json
26 verbose bad json 		requestData.UserID = cookie;
26 verbose bad json 		requestData.IsReasonExist = true;
26 verbose bad json 		if(document.getElementById('UserCheck_Textual_Input') != null)
26 verbose bad json 		{
26 verbose bad json 			var reason = document.getElementById('UserCheck_Textual_Input').value;
26 verbose bad json
26 verbose bad json 			//If the reason box is not found, there is nothing to enforce.
26 verbose bad json 			if(reason === undefined)
26 verbose bad json 			{
26 verbose bad json 				reason = "";
26 verbose bad json 				requestData.IsReasonExist = false;
26 verbose bad json 			}
26 verbose bad json 			else if(window.oUserAction.incidentObject.IsReasonEnforced === true && (reason.length == 0 || reason.length > 400))
26 verbose bad json 				return;
26 verbose bad json
26 verbose bad json 			requestData.Reason = reason;
26 verbose bad json 		}
26 verbose bad json 		else
26 verbose bad json 		{
26 verbose bad json 			requestData.IsReasonExist = false;
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		//Sometimes the cookie is not written correctly, so used global user.
26 verbose bad json 		if(requestData.UserID == null || requestData.UserID == "")
26 verbose bad json 			requestData.UserID = g_userID;
26 verbose bad json
26 verbose bad json 		requestData.IID = UserCheck.DataObj.IID;
26 verbose bad json
26 verbose bad json 		var sAbsoluteURL = PORTAL_IS.TOOLS.getURL("data/GetUserCheckUserChoiceData");
26 verbose bad json
26 verbose bad json 		sendAsynchronousRequest(sAbsoluteURL,
26 verbose bad json 								flattenObject(requestData),
26 verbose bad json 								this.handleUserCheckChoiceData,
26 verbose bad json 								this,
26 verbose bad json 								[new Callback()]);
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.submitCancel = function()
26 verbose bad json 	{
26 verbose bad json 		if(window.oUserAction.incidentObject.CancelURL !== undefined && window.oUserAction.incidentObject.CancelURL !== "")
26 verbose bad json 		{
26 verbose bad json 			window.location = window.oUserAction.incidentObject.CancelURL;
26 verbose bad json 			return;
26 verbose bad json 		}
26 verbose bad json 		else
26 verbose bad json 		{
26 verbose bad json 			if (window.isThinPortal == true)
26 verbose bad json 			{
26 verbose bad json 				window.location = "about:blank";
26 verbose bad json 				return;
26 verbose bad json 			}
26 verbose bad json 			this.init(true);
26 verbose bad json 		}
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.handleUserCheckChoiceData = function(xhrStatus, xhrResponse, callback)
26 verbose bad json 	{
26 verbose bad json 		try
26 verbose bad json 		{
26 verbose bad json 			window.external.OKButtonClickedResponseReceived('Done handling request');
26 verbose bad json 		}
26 verbose bad json 		catch(err)
26 verbose bad json 		{
26 verbose bad json 			//do nothing, this is probably the fat client
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		DEBUG.out("UserAction::handleUserCheckChoiceData");
26 verbose bad json
26 verbose bad json 		if (callback == undefined)
26 verbose bad json     	{
26 verbose bad json     	    callback = new Callback();
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		if (xhrStatus != 200)
26 verbose bad json 		{
26 verbose bad json 			DEBUG.out('Retreiving UserCheck Incident Data failed. ('+xhrStatus+')', DEBUG.ERROR);
26 verbose bad json 			callback.call();
26 verbose bad json 			return;
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		var newViewJSONObj = JSON.parse(xhrResponse);
26 verbose bad json
26 verbose bad json 		var RedirectToAddr = newViewJSONObj.RedirectToAddr;
26 verbose bad json 		if (window.oUserAction.incidentObject.Variables['product'] != 'Threat Extraction')
26 verbose bad json 		{
26 verbose bad json 			if(RedirectToAddr != "")
26 verbose bad json 			{
26 verbose bad json 				var frame = "0";
26 verbose bad json
26 verbose bad json 				frame = UserCheck.DataObj.frame;
26 verbose bad json
26 verbose bad json 				if(typeof frame === "undefined" || frame == "0" || frame == "")
26 verbose bad json 				{
26 verbose bad json 					if (window.isThinPortal === undefined)
26 verbose bad json 					{
26 verbose bad json 						//We have an address so redirect to that URL.
26 verbose bad json 						if ((RedirectToAddr.indexOf('http://') != 0)  &&(RedirectToAddr.indexOf('https://') != 0))
26 verbose bad json 							RedirectToAddr = "http://" + RedirectToAddr;
26 verbose bad json 						window.location = RedirectToAddr;
26 verbose bad json 					}
26 verbose bad json 					else
26 verbose bad json 						window.location = "about:blank";
26 verbose bad json 				}
26 verbose bad json 				else
26 verbose bad json 				{
26 verbose bad json 					if (window.isThinPortal === undefined)
26 verbose bad json 					{
26 verbose bad json 					//We have an address so redirect to that URL in the parent frame.
26 verbose bad json 						if ((RedirectToAddr.indexOf('http://') != 0)  &&(RedirectToAddr.indexOf('https://') != 0))
26 verbose bad json 							RedirectToAddr = "http://" + RedirectToAddr;
26 verbose bad json
26 verbose bad json 					window.opener.location = RedirectToAddr;
26 verbose bad json 					}
26 verbose bad json 					else
26 verbose bad json 					{
26 verbose bad json 						window.opener.location = "about:blank";
26 verbose bad json 					}
26 verbose bad json 					window.close();
26 verbose bad json 				}
26 verbose bad json 			}
26 verbose bad json 			else
26 verbose bad json 			{
26 verbose bad json 				var frame = "0";
26 verbose bad json 				frame = UserCheck.DataObj.frame;
26 verbose bad json 				if(typeof frame === "undefined" || frame == "0" || frame == "")
26 verbose bad json 				{
26 verbose bad json 					if (window.isThinPortal == true)
26 verbose bad json 					{
26 verbose bad json 						window.location = "about:blank";
26 verbose bad json 					}
26 verbose bad json 				}
26 verbose bad json 				else
26 verbose bad json 				{
26 verbose bad json 					if (window.isThinPortal == true)
26 verbose bad json 					{
26 verbose bad json 						window.opener.location = "about:blank";
26 verbose bad json 					}
26 verbose bad json 					window.close();
26 verbose bad json 				}
26 verbose bad json 			}
26 verbose bad json 		}
26 verbose bad json 		else
26 verbose bad json 		{
26 verbose bad json 			window.location.reload();
26 verbose bad json 		}
26 verbose bad json 	}
26 verbose bad json 	this.handleUserReportWrongCategoryData = function(xhrStatus, xhrResponse, callback)
26 verbose bad json 	{
26 verbose bad json
26 verbose bad json 		DEBUG.out("UserAction::handleUserLogData");
26 verbose bad json
26 verbose bad json
26 verbose bad json
26 verbose bad json
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.handleTimeout = function()
26 verbose bad json 	{
26 verbose bad json 		var requestData = 	{
26 verbose bad json 			                	IID: "-1"
26 verbose bad json 							};
26 verbose bad json
26 verbose bad json 		requestData.IID = UserCheck.DataObj.IID;
26 verbose bad json
26 verbose bad json 		var sAbsoluteURL = PORTAL_IS.TOOLS.getURL("ExtendTimeout");
26 verbose bad json
26 verbose bad json 		sendAsynchronousRequest(sAbsoluteURL,
26 verbose bad json 								flattenObject(requestData),
26 verbose bad json 								window.oUserAction.handleTimeoutExtension,
26 verbose bad json 								this,
26 verbose bad json 								[new Callback()]);
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.handleTimeoutExtension = function(xhrStatus, xhrResponse, callback)
26 verbose bad json 	{
26 verbose bad json 		DEBUG.out("UserAction::handleTimeoutExtension");
26 verbose bad json
26 verbose bad json 		if (callback == undefined)
26 verbose bad json     	{
26 verbose bad json     	    callback = new Callback();
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		if (xhrStatus != 200)
26 verbose bad json 		{
26 verbose bad json 			if (window.isThinPortal === undefined)
26 verbose bad json 			{
26 verbose bad json 				DEBUG.out('Retreiving UserCheck Timeout Extension data failed. ('+xhrStatus+')', DEBUG.ERROR);
26 verbose bad json 				callback.call();
26 verbose bad json 				return;
26 verbose bad json 			}
26 verbose bad json 			else
26 verbose bad json 			{
26 verbose bad json 				window.location = "about:blank";
26 verbose bad json 				return;
26 verbose bad json 			}
26 verbose bad json 		}
26 verbose bad json 		var extensionObject = JSON.parse(xhrResponse);
26 verbose bad json
26 verbose bad json 		if(extensionObject.ReturnCode == "SUCCESS")
26 verbose bad json 		{
26 verbose bad json 			UserCheck.tools.oTimeoutManager.startTimeoutTimer(extensionObject.Expiration - 15, window.oUserAction.handleTimeout);
26 verbose bad json 		}
26 verbose bad json 		else
26 verbose bad json 		{
26 verbose bad json 			if(window.isThinPortal === undefined)
26 verbose bad json 			{
26 verbose bad json 			var button = document.getElementById('UserCheck_OK_Button');
26 verbose bad json 			if(button !=null)
26 verbose bad json 				button.style.display = "none";
26 verbose bad json 			var select = document.getElementById('usercheck_language_selection');
26 verbose bad json 			if(select != null)
26 verbose bad json 				select.disabled = true;
26 verbose bad json
26 verbose bad json 			showPortalMessage(PORTAL_IS.L10N.L10N_Obj.getStr("TIMEOUT") + " <a href='" + window.oUserAction.incidentObject.RedirectToAddr + "'>" + PORTAL_IS.L10N.L10N_Obj.getStr("RETRY") + "</a>", null, PORTAL_IS.MESSAGE_TYPE.Display, true);
26 verbose bad json 		}
26 verbose bad json 			else
26 verbose bad json 			{
26 verbose bad json 				/* If we are in thin portal, redirect to about:blank
26 verbose bad json 				   so that client can catch it and act accordingly. */
26 verbose bad json 				window.location = "about:blank";
26 verbose bad json 			}
26 verbose bad json 		}
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	//Prepare for language selection.
26 verbose bad json 	this.prepareLanguageSelection = function()
26 verbose bad json 	{
26 verbose bad json 		var Languages = this.incidentObject.Languages;
26 verbose bad json 		var prevSelectedLanguage = null;
26 verbose bad json 		var userSelected = false;
26 verbose bad json 		if (UserCheck.DataObj.Lang != "" && UserCheck.DataObj.Lang !== undefined)
26 verbose bad json 		{
26 verbose bad json 			prevSelectedLanguage = UserCheck.DataObj.Lang;
26 verbose bad json 			userSelected = true;
26 verbose bad json 		}
26 verbose bad json 		else if (this.incidentObject.PreferredLang != "")
26 verbose bad json 		{
26 verbose bad json 			prevSelectedLanguage = this.incidentObject.PreferredLang;
26 verbose bad json 		}
26 verbose bad json 		else
26 verbose bad json 		{
26 verbose bad json 			prevSelectedLanguage = getCookie('UserCheck_Selected_Language');
26 verbose bad json 		}
26 verbose bad json 		var count = 0;
26 verbose bad json
26 verbose bad json 		//If there is no cookie, get the browser locale.
26 verbose bad json 		if(prevSelectedLanguage == null)
26 verbose bad json 		{
26 verbose bad json 			var langArr = {};
26 verbose bad json 			for(var Language in Languages)
26 verbose bad json 			{
26 verbose bad json 				langArr[Languages[Language].LanguageCode] = true;
26 verbose bad json 			}
26 verbose bad json
26 verbose bad json 			prevSelectedLanguage = PORTAL_IS.L10N.L10N_Obj.selectLanguage(langArr);
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		if(document.getElementById('usercheck_language_selection_div') != null)
26 verbose bad json 		{
26 verbose bad json 			count = 0;
26 verbose bad json 			for(var Language in Languages)
26 verbose bad json 			{
26 verbose bad json 				var select = document.getElementById('usercheck_language_selection');
26 verbose bad json 				select.options[select.options.length] = new Option(Languages[Language].Language, Language, false, Language === prevSelectedLanguage);
26 verbose bad json 				count++;
26 verbose bad json 			}
26 verbose bad json 			//Display language selection only if NOT in thin portal.
26 verbose bad json 			if(count > 1 && window.isThinPortal === undefined)
26 verbose bad json 				document.getElementById('usercheck_language_selection_div').style.display = "block";
26 verbose bad json
26 verbose bad json 		}
26 verbose bad json 		this.handleLanguageChange(true, userSelected);
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	//Handles language change.
26 verbose bad json 	this.handleLanguageChange = function(noReloadLang, userSelected)
26 verbose bad json 	{
26 verbose bad json 		var select = document.getElementById('usercheck_language_selection');
26 verbose bad json 		var selectedLanguage = select.options[select.selectedIndex].value;
26 verbose bad json 		if(noReloadLang === true)
26 verbose bad json 		{
26 verbose bad json 			//No need to load the language - if it is already loaded.
26 verbose bad json 			this.asyncLanguageChangeCallback(userSelected);
26 verbose bad json 		}
26 verbose bad json 		else
26 verbose bad json 		{
26 verbose bad json 			//Reload language strings.
26 verbose bad json 			PORTAL_IS.L10N.L10N_Obj.reloadLanguageTo(selectedLanguage, "en", this.asyncLanguageChangeCallback);
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.checkBoxExists = function(adminMessage)
26 verbose bad json 	{
26 verbose bad json 		if(adminMessage.indexOf("UserCheck_Confirm_Checkbox") != -1)
26 verbose bad json 			return true;
26 verbose bad json
26 verbose bad json 		return false;
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.textareaExists = function(adminMessage)
26 verbose bad json 	{
26 verbose bad json 		if(adminMessage.indexOf("UserCheck_Textual_Input") != -1)
26 verbose bad json 			return true;
26 verbose bad json
26 verbose bad json 		return false;
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.asyncLanguageChangeCallback = function(userSelected)
26 verbose bad json 	{
26 verbose bad json 		if (userSelected === undefined)
26 verbose bad json 		{
26 verbose bad json 			userSelected = true;
26 verbose bad json 		}
26 verbose bad json 		var select = document.getElementById('usercheck_language_selection');
26 verbose bad json 		var check = document.getElementById('UserCheck_Confirm_Checkbox');
26 verbose bad json
26 verbose bad json 		var selectedLanguage = "Default";
26 verbose bad json 		if(select != null)
26 verbose bad json 			selectedLanguage = select.options[select.selectedIndex].value;
26 verbose bad json 		var checkBoxValue = check != null ? check.checked : false;
26 verbose bad json
26 verbose bad json 		//Save cookie for the selected language. Only if it is from a User Selection.
26 verbose bad json 		if (userSelected)
26 verbose bad json 		{
26 verbose bad json 			setCookie('UserCheck_Selected_Language', selectedLanguage == "Default" ? "en" : selectedLanguage, 31556926, "/");
26 verbose bad json 			var cookieVal = getCookie('UserCheck_UserID');
26 verbose bad json
26 verbose bad json 			var handleUpdateUserDataResponse = function(xhrStatus, xhrResponse, callback){
26 verbose bad json 				var newURL = window.location.href;
26 verbose bad json 				//alert("newURL '"+newURL+"'");
26 verbose bad json 				var langLoc = newURL.indexOf("&Lang=");
26 verbose bad json 				//alert("langLoc '"+langLoc+"'");
26 verbose bad json 				if (langLoc != -1)
26 verbose bad json 				{
26 verbose bad json 					newURL = newURL.substring(0, langLoc);
26 verbose bad json 					//alert("newURL '"+newURL+"'");
26 verbose bad json 				}
26 verbose bad json 				window.location = newURL;
26 verbose bad json 			}
26 verbose bad json
26 verbose bad json 			sendAsynchronousRequest(getURL("UpdateUserData"),
26 verbose bad json 					"Language="+encodeURIComponent(selectedLanguage) + "&IID="+encodeURIComponent(UserCheck.DataObj.IID)+"&UserID="+cookieVal,
26 verbose bad json 					handleUpdateUserDataResponse,
26 verbose bad json 					this,
26 verbose bad json 					[new Callback()]);
26 verbose bad json 		}
26 verbose bad json 		else
26 verbose bad json 		{
26 verbose bad json
26 verbose bad json         		//Keep this value globally for other funcs.
26 verbose bad json         		window.oUserAction.incidentObject.SelectedLanguage = selectedLanguage;
26 verbose bad json
26 verbose bad json         		var Languages = window.oUserAction.incidentObject.Languages;
26 verbose bad json         		var TitleText = Languages[selectedLanguage].TitleText;
26 verbose bad json         		var AdminMessage  = Languages[selectedLanguage].AdminMessage;
26 verbose bad json         		var CancelMessage = Languages[selectedLanguage].CancelMessage;
26 verbose bad json         		var OKButtonMessage  = window.oUserAction.incidentObject.OKButtonMessage[selectedLanguage];
26 verbose bad json         		var CancelButtonMessage  = window.oUserAction.incidentObject.CancelButtonMessage[selectedLanguage];
26 verbose bad json         		var SendButtonMessage	= window.oUserAction.incidentObject.SendButtonMessage[selectedLanguage];
26 verbose bad json         		var MiddleButtonMessage	= window.oUserAction.incidentObject.MiddleButtonMessage[selectedLanguage];
26 verbose bad json         		var HTTPLearningEnabled = window.oUserAction.incidentObject.HTTPLearningEnabled;
26 verbose bad json         		var PageTitle = Languages[selectedLanguage].PageTitle;
26 verbose bad json
26 verbose bad json         		document.getElementById('usercheck_title_div').innerHTML = TitleText;
26 verbose bad json
26 verbose bad json         		if(window.oUserAction.incidentObject.HasBeenCancelled === undefined || window.oUserAction.incidentObject.HasBeenCancelled === false)
26 verbose bad json         		{
26 verbose bad json         			if (window.oUserAction.incidentObject.IncidentStatus == 0 || window.oUserAction.incidentObject.IncidentStatus == 2 || window.oUserAction.incidentObject.IncidentStatus == 8)//ok or cancel or ok_scrubbing
26 verbose bad json         			{
26 verbose bad json         				document.getElementById('usercheck_main_div').innerHTML = AdminMessage;
26 verbose bad json         			}
26 verbose bad json         			else if (window.oUserAction.incidentObject.IncidentStatus == 3)// sent
26 verbose bad json         			{
26 verbose bad json         				// if http learning is enabled on action succeded show the HTTP_LEARNING message
26 verbose bad json         				if (HTTPLearningEnabled == true && window.oUserAction.incidentObject.RedirectToAddr != "")
26 verbose bad json         				{
26 verbose bad json         					var usercheck_main_div = document.getElementById('usercheck_main_div')
26 verbose bad json         					if (usercheck_main_div != null)
26 verbose bad json         						usercheck_main_div.innerHTML = "<p>" +PORTAL_IS.L10N.L10N_Obj.getStr("HTTP_LEARNING")+"</p>";
26 verbose bad json         				}
26 verbose bad json         				else // an SMTP message
26 verbose bad json         				{
26 verbose bad json         					document.getElementById('usercheck_main_div').innerHTML = AdminMessage;
26 verbose bad json         				}
26 verbose bad json         			}
26 verbose bad json         			else if (window.oUserAction.incidentObject.IncidentStatus == 4)//discarded
26 verbose bad json         			{
26 verbose bad json         				document.getElementById('usercheck_main_div').innerHTML = AdminMessage;
26 verbose bad json         			}
26 verbose bad json         			else if (window.oUserAction.incidentObject.IncidentStatus == 5)//already sent
26 verbose bad json         			{
26 verbose bad json         				if (HTTPLearningEnabled == true && window.oUserAction.incidentObject.RedirectToAddr != "")
26 verbose bad json         				{
26 verbose bad json         					//if approved http and then refreshed the page
26 verbose bad json         					var usercheck_main_div = document.getElementById('usercheck_main_div')
26 verbose bad json         					if (usercheck_main_div != null)
26 verbose bad json         						usercheck_main_div.innerHTML = "<p>" +PORTAL_IS.L10N.L10N_Obj.getStr("HTTP_LEARNING")+"</p>";
26 verbose bad json         				}
26 verbose bad json         				else
26 verbose bad json         				{
26 verbose bad json         					document.getElementById('usercheck_main_div').innerHTML = AdminMessage;
26 verbose bad json         					var return_to_site_div = document.getElementById('usercheck_return_to_site_div')
26 verbose bad json         					if (return_to_site_div != null)
26 verbose bad json         						return_to_site_div.innerHTML = "<p style='color: #FF5000;font-weight: bold;'>" +PORTAL_IS.L10N.L10N_Obj.getStr("EMAIL_ALREADY_SENT") +"</p>";
26 verbose bad json         				}
26 verbose bad json         			}
26 verbose bad json         			else if (window.oUserAction.incidentObject.IncidentStatus == 6)//already discarded
26 verbose bad json         			{
26 verbose bad json         				document.getElementById('usercheck_main_div').innerHTML = AdminMessage;
26 verbose bad json         				var return_to_site_div = document.getElementById('usercheck_return_to_site_div')
26 verbose bad json         				if (return_to_site_div != null)
26 verbose bad json         					return_to_site_div.innerHTML = "<p style='color: #FF5000;font-weight: bold;'>" +PORTAL_IS.L10N.L10N_Obj.getStr("EMAIL_ALREADY_DISCARDED") +"</p>";
26 verbose bad json         			}
26 verbose bad json         			else
26 verbose bad json         			{
26 verbose bad json         				document.getElementById('usercheck_main_div').innerHTML = "<p>" + PORTAL_IS.L10N.L10N_Obj.getStr("UNKOWN_INCIDENT_STATUS") + "</p>" + window.oUserAction.incidentObject.IncidentStatus;
26 verbose bad json         			}
26 verbose bad json
26 verbose bad json
26 verbose bad json         			var btnDiv = document.getElementById('usercheck_ok_div');
26 verbose bad json         			if (btnDiv != null)
26 verbose bad json         				btnDiv.innerHTML = OKButtonMessage;
26 verbose bad json         			btnDiv = document.getElementById('usercheck_cancel_div');
26 verbose bad json         			if (btnDiv != null)
26 verbose bad json         				btnDiv.innerHTML = CancelButtonMessage;
26 verbose bad json         			btnDiv = document.getElementById('usercheck_send_div');
26 verbose bad json         			// show the send button on SMTP (which is actually the send button) OR show it on inform action (which is actually OK button)
26 verbose bad json         			if (btnDiv != null && (window.oUserAction.incidentObject.RedirectToAddr == "" || window.oUserAction.incidentObject.Action == "INFORM") )
26 verbose bad json         			{
26 verbose bad json         				// alert("setting usercheck_send_div");
26 verbose bad json         				btnDiv.innerHTML = SendButtonMessage;
26 verbose bad json         			}
26 verbose bad json         			btnDiv = document.getElementById('usercheck_middle_div');
26 verbose bad json         			if (btnDiv != null)
26 verbose bad json         			{
26 verbose bad json         				// alert("setting discard button div");
26 verbose bad json         					btnDiv.innerHTML = MiddleButtonMessage;
26 verbose bad json         			}
26 verbose bad json         			var goBackDiv = document.getElementById('usercheck_return_to_site_div');
26 verbose bad json         			if (goBackDiv)
26 verbose bad json         			{
26 verbose bad json         				// show return to site only when its http violation AND if the action is: sent or discarded or already sent or already discarded or cancelled.
26 verbose bad json         				if (window.oUserAction.incidentObject.RedirectToAddr != "" && (window.oUserAction.incidentObject.IncidentStatus == 3 || window.oUserAction.incidentObject.IncidentStatus == 4 || window.oUserAction.incidentObject.IncidentStatus == 5 || window.oUserAction.incidentObject.IncidentStatus == 6 || window.oUserAction.incidentObject.IncidentStatus == 2))
26 verbose bad json         				{
26 verbose bad json         					goBackDiv.innerHTML = '<a href="' + window.oUserAction.incidentObject.RedirectToAddr + '">' + PORTAL_IS.L10N.L10N_Obj.getStr("RETURN_TO_SITE") + '</a>';
26 verbose bad json         				}
26 verbose bad json         			}
26 verbose bad json         		}
26 verbose bad json         		else
26 verbose bad json         			document.getElementById('usercheck_main_div').innerHTML = CancelMessage;
26 verbose bad json
26 verbose bad json         		var page_title = document.getElementById('usercheck_page_title');
26 verbose bad json         		if(page_title != null)
26 verbose bad json         			page_title.innerHTML = PageTitle;
26 verbose bad json
26 verbose bad json         		var span = document.getElementById('UserCheck_OK_Button_span');
26 verbose bad json         		if(span != null)
26 verbose bad json         			span.innerHTML = PORTAL_IS.L10N.L10N_Obj.getStr('BUTTON.OK');
26 verbose bad json
26 verbose bad json         		span = document.getElementById('UserCheck_Cancel_Button_span');
26 verbose bad json         		if(span != null)
26 verbose bad json         			span.innerHTML = PORTAL_IS.L10N.L10N_Obj.getStr('BUTTON.CANCEL');
26 verbose bad json
26 verbose bad json         		span = document.getElementById('UserCheck_Send_Button_span');
26 verbose bad json         		if(span != null)
26 verbose bad json         			span.innerHTML = PORTAL_IS.L10N.L10N_Obj.getStr('BUTTON.SEND');
26 verbose bad json         		span = document.getElementById('UserCheck_Middle_Button_span');
26 verbose bad json         		if(span != null)
26 verbose bad json         		{
26 verbose bad json         			if (window.oUserAction.incidentObject.RedirectToAddr == "")
26 verbose bad json         			span.innerHTML = PORTAL_IS.L10N.L10N_Obj.getStr('BUTTON.DISCARD');
26 verbose bad json         			else
26 verbose bad json         				span.innerHTML = PORTAL_IS.L10N.L10N_Obj.getStr("BUTTON.APPROVE");
26 verbose bad json         		}
26 verbose bad json
26 verbose bad json         		var reportLink = document.getElementById('UserCheck_Wrong_Category');
26 verbose bad json         		if(reportLink != null)
26 verbose bad json         		{
26 verbose bad json         			var correctClass = window.oUserAction.getCorrectClass();
26 verbose bad json
26 verbose bad json         			reportLink.setAttribute(correctClass, "usercheck_url_class");
26 verbose bad json
26 verbose bad json         			reportLink.onclick = function(e) { window.oUserAction.sendReport(); }
26 verbose bad json         		}
26 verbose bad json
26 verbose bad json         		//Clear the error message when switching language.
26 verbose bad json         		var errorElement = document.getElementById('usercheck_error_div');
26 verbose bad json         		if(errorElement != null)
26 verbose bad json         			errorElement.innerHTML = "&nbsp;";
26 verbose bad json
26 verbose bad json         		//Keep TextArea default text to disallow it as input.
26 verbose bad json         		var textarea_element = null;
26 verbose bad json
26 verbose bad json         		if(window.oUserAction.textareaExists(AdminMessage))
26 verbose bad json         		{
26 verbose bad json         			textarea_element = document.getElementById('UserCheck_Textual_Input');
26 verbose bad json         			//If the textarea is an incorrect element or length is correct, check passes.
26 verbose bad json         			if(textarea_element.value === undefined)
26 verbose bad json         			{
26 verbose bad json         				//This element is not really our text area so we don't need it.
26 verbose bad json         				textarea_element = null;
26 verbose bad json         			}
26 verbose bad json         		}
26 verbose bad json
26 verbose bad json         		if(textarea_element != null)
26 verbose bad json         		{
26 verbose bad json         			window.oUserAction.textAreaText = textarea_element.value;
26 verbose bad json
26 verbose bad json         			var correctClass = window.oUserAction.getCorrectClass();
26 verbose bad json         			textarea_element.setAttribute(correctClass, "usercheck_message_class usercheck_textual_input_class usercheck_textual_input_class_required");
26 verbose bad json
26 verbose bad json         			textarea_element.onfocus = function() { window.oUserAction.clearRequiredInput(); };
26 verbose bad json         		}
26 verbose bad json         		//disable the approve button only on PortalMaindlp. on thin client approve button should always be enabled
26 verbose bad json         		if (window.oUserAction.incidentObject.RedirectToAddr != "" && window.isThinPortal != true)
26 verbose bad json         		{
26 verbose bad json         			window.oUserActionCommon.DlpHttpLearning(AdminMessage,HTTPLearningEnabled);
26 verbose bad json         		}
26 verbose bad json 		    // hiding the cancel button on infom on dlp only
26 verbose bad json 		    window.oUserActionCommon.DlpHideCancelBtn(window.oUserAction.incidentObject.Action);
26 verbose bad json 		}
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	//Sends report for wrong category.
26 verbose bad json 	this.sendReport = function()
26 verbose bad json 	{
26 verbose bad json 		var Variables = window.oUserAction.incidentObject.Variables;
26 verbose bad json
26 verbose bad json 		var resource = Variables['resource'] === undefined ? "" : Variables['resource'];
26 verbose bad json 		var hmac = Variables['resource_hmac'] === undefined ? "" : Variables['resource_hmac'];
26 verbose bad json 		var version = Variables['version'];
26 verbose bad json 		var product = Variables['product'];
26 verbose bad json
26 verbose bad json 		//Get the application name. If this variable has been modified (added application icon for example), take the original.
26 verbose bad json 		var appname = Variables['application_name_orig'];
26 verbose bad json 		var malwareID = Variables['application_id'];
26 verbose bad json 		if(appname === undefined)
26 verbose bad json 			appname = Variables['application_name'];
26 verbose bad json
26 verbose bad json 		var base64UrlEncode = function(input) { return $.base64Encode(input).replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, '') };
26 verbose bad json
26 verbose bad json 		//Encode to base64 URL form spec.
26 verbose bad json 		appname = base64UrlEncode(appname);
26 verbose bad json 		resource = base64UrlEncode(resource);
26 verbose bad json
26 verbose bad json 		//URL of the external URL
26 verbose bad json 		var url = window.location.protocol + "//cws.checkpoint.com/MISCAT/miscat/1.0?resource=" + resource + "&hmac=" + hmac + "&appname=" + appname + "&version=" + version + "&product=" + product + "&malwareID=" + malwareID;
26 verbose bad json
26 verbose bad json 		//Display a portal messge indicating the action was successful. On mobile devices we use the built-in message display.
26 verbose bad json 		if(window.browserDetails.isMobile())
26 verbose bad json 			alert(PORTAL_IS.L10N.L10N_Obj.getStr("REPORT_SUCCESS"));
26 verbose bad json 		else
26 verbose bad json 			showPortalMessage('<table><tr><td>' + draw_img_tag_span(getURL("images/confirmation.png")) + '&nbsp;&nbsp;</td><td>' + PORTAL_IS.L10N.L10N_Obj.getStr("REPORT_SUCCESS") + '</td></tr></table>', null, PORTAL_IS.MESSAGE_TYPE.Confirmation, true, false);
26 verbose bad json
26 verbose bad json 		var img = new Image();
26 verbose bad json 		img.src = url;
26 verbose bad json
26 verbose bad json 		var reportLink = document.getElementById('UserCheck_Wrong_Category');
26 verbose bad json
26 verbose bad json 		var correctClass = window.oUserAction.getCorrectClass();
26 verbose bad json
26 verbose bad json 		//Disable the link.
26 verbose bad json 		reportLink.setAttribute(correctClass, "usercheck_url_class usercheck_disabled_url_class");
26 verbose bad json
26 verbose bad json 		//send log on wrong category
26 verbose bad json 		var cookie = getCookie('UserCheck_UserID');
26 verbose bad json
26 verbose bad json 		var requestData = {};
26 verbose bad json
26 verbose bad json 		requestData.IID = "-1";
26 verbose bad json 		requestData.UserOption = "LOG-WRONG-CATEGORY";
26 verbose bad json 		requestData.UserID = cookie;
26 verbose bad json 		requestData.IsReasonExist = false;
26 verbose bad json
26 verbose bad json
26 verbose bad json 		//Sometimes the cookie is not written correctly, so used global user.
26 verbose bad json 		if(requestData.UserID == null || requestData.UserID == "")
26 verbose bad json 			requestData.UserID = g_userID;
26 verbose bad json
26 verbose bad json 		requestData.IID = UserCheck.DataObj.IID;
26 verbose bad json
26 verbose bad json 		var sAbsoluteURL = PORTAL_IS.TOOLS.getURL("data/GetUserCheckUserChoiceData");
26 verbose bad json
26 verbose bad json 		sendAsynchronousRequest(sAbsoluteURL,
26 verbose bad json 								flattenObject(requestData),
26 verbose bad json 								this.handleUserReportWrongCategoryData,
26 verbose bad json 								this,
26 verbose bad json 								[new Callback()]);
26 verbose bad json
26 verbose bad json 		//Nothing should happen on click from now on.
26 verbose bad json 		reportLink.onclick = function() { };
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.handleReportTimeout = function()
26 verbose bad json 	{
26 verbose bad json 		var elem = document.getElementById('testID');
26 verbose bad json 		document.getElementsByTagName('head')[0].removeChild(elem);
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	//Verifies the input of the user, including checkbox and textarea.
26 verbose bad json 	this.highlightInput = function()
26 verbose bad json 	{
26 verbose bad json 		var checkbox_element = null;
26 verbose bad json 		var textarea_element = null;
26 verbose bad json 		var checkbox_ready = false;
26 verbose bad json 		var textarea_ready = false;
26 verbose bad json
26 verbose bad json 		var AdminMessage = window.oUserAction.incidentObject.Languages[window.oUserAction.incidentObject.SelectedLanguage].AdminMessage;
26 verbose bad json
26 verbose bad json 		//If the checkbox exists (and it is a correct element), its value will determine the button status.
26 verbose bad json 		if(window.oUserAction.incidentObject.IsCheckBoxEnforced == true && window.oUserAction.checkBoxExists(AdminMessage) == true && document.getElementById('UserCheck_Confirm_Checkbox').checked !== undefined)
26 verbose bad json 		{
26 verbose bad json 			checkbox_element = document.getElementById('UserCheck_Confirm_Checkbox');
26 verbose bad json 			checkbox_ready = checkbox_element.checked;
26 verbose bad json 		}
26 verbose bad json 		else
26 verbose bad json 			checkbox_ready = true;
26 verbose bad json
26 verbose bad json 		//If the reason textbox exists and is enforced, its value will determine the button status.
26 verbose bad json 		if(window.oUserAction.incidentObject.IsReasonEnforced === true && window.oUserAction.textareaExists(AdminMessage))
26 verbose bad json 		{
26 verbose bad json 			textarea_element = document.getElementById('UserCheck_Textual_Input');
26 verbose bad json
26 verbose bad json 			//If the textarea is an incorrect element or length is correct, check passes.
26 verbose bad json 			if(textarea_element.value === undefined)
26 verbose bad json 			{
26 verbose bad json 				textarea_ready = true;
26 verbose bad json 				//This element is not really our text area so we don't need it.
26 verbose bad json 				textarea_element = null;
26 verbose bad json 			}
26 verbose bad json 			else
26 verbose bad json 			{
26 verbose bad json 				if (textarea_element.value.length > 0 && textarea_element.value.length <= 400 && textarea_element.value != PORTAL_IS.L10N.L10N_Obj.getStr("ENTER_TEXT") && textarea_element.value != window.oUserAction.textAreaText)
26 verbose bad json 					textarea_ready = true;
26 verbose bad json 				else
26 verbose bad json 					textarea_ready = false;
26 verbose bad json 			}
26 verbose bad json 		}
26 verbose bad json 		else
26 verbose bad json 			textarea_ready = true;
26 verbose bad json
26 verbose bad json 		var all_ready = checkbox_ready === true && textarea_ready === true;
26 verbose bad json
26 verbose bad json 		var correctClass = window.oUserAction.getCorrectClass();
26 verbose bad json          var elememt_to_scroll = null;
26 verbose bad json
26 verbose bad json 		if(checkbox_element != null)
26 verbose bad json 		{
26 verbose bad json
26 verbose bad json 			checkbox_element.parentNode.parentNode.parentNode.parentNode.setAttribute(correctClass, (checkbox_ready ? "usercheck_red_no_highlight" : "usercheck_red_highlight" ));
26 verbose bad json               elememt_to_scroll = checkbox_ready ? elememt_to_scroll : checkbox_element.parentNode.parentNode.parentNode.parentNode;
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		if(textarea_element != null)
26 verbose bad json 		{
26 verbose bad json 			textarea_element.setAttribute(correctClass, "usercheck_message_class usercheck_textual_input_class " + (textarea_ready ? "usercheck_red_no_highlight" : "usercheck_red_highlight usercheck_textual_input_class_required" ));
26 verbose bad json 			elememt_to_scroll = textarea_ready ? elememt_to_scroll : textarea_element;
26 verbose bad json 			if(!textarea_ready)
26 verbose bad json 			{
26 verbose bad json 				if(window.oUserAction.textAreaText === "" || textarea_element.value !== window.oUserAction.textAreaText)
26 verbose bad json 				{
26 verbose bad json 					if(window.oUserAction.textAreaText != "")
26 verbose bad json 						textarea_element.value = window.oUserAction.textAreaText;
26 verbose bad json 					else
26 verbose bad json 				textarea_element.value = PORTAL_IS.L10N.L10N_Obj.getStr("ENTER_TEXT");
26 verbose bad json 				}
26 verbose bad json 				textarea_element.onfocus = function() { window.oUserAction.clearRequiredInput(); };
26 verbose bad json 			}
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		if(!textarea_ready && !checkbox_ready && checkbox_element!=null && textarea_element!=null)
26 verbose bad json 		{
26 verbose bad json 			if(checkbox_element.parentNode.parentNode.parentNode.parentNode.offsetTop > textarea_element.offsetTop)
26 verbose bad json 				elememt_to_scroll = checkbox_element;
26 verbose bad json
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		if(elememt_to_scroll!=null){
26 verbose bad json 			elememt_to_scroll.scrollIntoView(false);
26 verbose bad json 			var scrollableDiv = document.getElementById("usercheck_scrollable_div");
26 verbose bad json 			if (scrollableDiv !== null)
26 verbose bad json 				scrollableDiv.scrollLeft = 0;
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		var errorElement = document.getElementById('usercheck_error_div');
26 verbose bad json 		if(errorElement != null)
26 verbose bad json 			errorElement.innerHTML = all_ready ? "" : "<br/><span style='color: #FF0000;'>* " + PORTAL_IS.L10N.L10N_Obj.getStr("REQUIRED_FIELDS") + "</span>";
26 verbose bad json
26 verbose bad json 		return all_ready;
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.clearRequiredInput = function()
26 verbose bad json 	{
26 verbose bad json 		textarea_element = document.getElementById('UserCheck_Textual_Input');
26 verbose bad json
26 verbose bad json 		textarea_element.value = "";
26 verbose bad json
26 verbose bad json 		var correctClass = window.oUserAction.getCorrectClass();
26 verbose bad json
26 verbose bad json 		if(textarea_element.getAttribute(correctClass).indexOf("usercheck_red_highlight") !== -1)
26 verbose bad json 		textarea_element.setAttribute(correctClass, "usercheck_message_class usercheck_textual_input_class usercheck_red_highlight");
26 verbose bad json 		else
26 verbose bad json 			textarea_element.setAttribute(correctClass, "usercheck_message_class usercheck_textual_input_class");
26 verbose bad json
26 verbose bad json 		textarea_element.onfocus = function() { };
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.sendMail  = function()
26 verbose bad json 	{
26 verbose bad json 		DEBUG.out("UserAction::sendMail");
26 verbose bad json         	this.last_action = 'sent';
26 verbose bad json
26 verbose bad json 		if(!window.oUserAction.highlightInput())
26 verbose bad json 			//There was some user input missing - don't continue.
26 verbose bad json 			return;
26 verbose bad json
26 verbose bad json 		var reason = "";
26 verbose bad json 		if(document.getElementById('UserCheck_Textual_Input') != null)
26 verbose bad json 		{
26 verbose bad json 			reason = document.getElementById('UserCheck_Textual_Input').value;
26 verbose bad json 			//If the reason box is not found, there is nothing to enforce.
26 verbose bad json 			if(reason === undefined)
26 verbose bad json 			{
26 verbose bad json 				reason = "";
26 verbose bad json 			}
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json
26 verbose bad json 		var sendMailCallback = new Callback();
26 verbose bad json 		sendMailCallback.methodReference 	= this.handleConfirmationData;
26 verbose bad json 		sendMailCallback.thisArgument		= this;
26 verbose bad json 		sendMailCallback.args.push(new Callback());
26 verbose bad json 		PORTAL_IS.AJAX_MGR.sendAsyncReq(	getURL("EmailSend"),
26 verbose bad json 											"mailId="+encodeURIComponent(UserCheck.DataObj.IID)+
26 verbose bad json 											"&justification="+encodeURIComponent(reason)+"&action=DLP-CHOICE-ACTION-SEND",
26 verbose bad json 											sendMailCallback,
26 verbose bad json 											null,
26 verbose bad json 											null,
26 verbose bad json 											"Sending email failed.");
26 verbose bad json
26 verbose bad json
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.discardMail = function()
26 verbose bad json 	{
26 verbose bad json 		DEBUG.out("UserAction::deleteMail");
26 verbose bad json        		 this.last_action = 'delete';
26 verbose bad json
26 verbose bad json 		var sendMailCallback = new Callback();
26 verbose bad json 		sendMailCallback.methodReference 	= this.handleConfirmationData;
26 verbose bad json 		sendMailCallback.thisArgument		= this;
26 verbose bad json 		sendMailCallback.args.push(new Callback());
26 verbose bad json 		PORTAL_IS.AJAX_MGR.sendAsyncReq(	getURL("EmailSend"),
26 verbose bad json 											"mailId="+encodeURIComponent(UserCheck.DataObj.IID)+
26 verbose bad json 											"&justification="+encodeURIComponent("")+"&action=DLP-CHOICE-ACTION-DISCARD",
26 verbose bad json 											sendMailCallback,
26 verbose bad json 											null,
26 verbose bad json 											null,
26 verbose bad json 											"Sending email failed.");
26 verbose bad json
26 verbose bad json
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.handleConfirmationData = function(xhrStatus, xhrResponse, callback)
26 verbose bad json 	{
26 verbose bad json 		DEBUG.out("UserAction::handleConfirmationData ");
26 verbose bad json 		if (callback == undefined)
26 verbose bad json     	{
26 verbose bad json     	    callback = new Callback();
26 verbose bad json 		}
26 verbose bad json 		if (xhrStatus != 200)
26 verbose bad json 		{
26 verbose bad json 			// TODO: Handle error.
26 verbose bad json 			DEBUG.out('Retreiving Single Incident Review Data failed. ('+xhrStatus+')', DEBUG.ERROR);
26 verbose bad json 			callback.call();
26 verbose bad json 			return;
26 verbose bad json 		}
26 verbose bad json 		var newViewJSONObj = JSON.parse(xhrResponse);
26 verbose bad json 		var message = newViewJSONObj.message;
26 verbose bad json 		var lastChanged = newViewJSONObj.lastChanged;
26 verbose bad json 		var succeeded = newViewJSONObj.succeeded;
26 verbose bad json 		if (lastChanged != -1 && lastChanged != 0)
26 verbose bad json 		{
26 verbose bad json             //message += " ";
26 verbose bad json             //message += convertToGmt(lastChanged);
26 verbose bad json             //this.emailData.date = convertToGmt(lastChanged);
26 verbose bad json         }
26 verbose bad json 		//@@NA add test if this is from Thin Portal and only then redirect to about:blank
26 verbose bad json         // window.location = "about:blank";
26 verbose bad json 		if (succeeded)
26 verbose bad json 		{
26 verbose bad json 			var cookie = getCookie('UserCheck_UserID');
26 verbose bad json 			var requestData = {};
26 verbose bad json 			requestData.IID = "-1";
26 verbose bad json 			requestData.UserID = cookie;
26 verbose bad json 			requestData.IsReasonExist = true;
26 verbose bad json 			requestData.Reason = "";
26 verbose bad json 			requestData.UserOption = "SEND";
26 verbose bad json 			if (newViewJSONObj.action == "DLP-CHOICE-ACTION-DISCARD")
26 verbose bad json 			{
26 verbose bad json 				requestData.UserOption = "DISCARD";
26 verbose bad json 			}
26 verbose bad json
26 verbose bad json 			if (newViewJSONObj.action === undefined || newViewJSONObj.action != "DLP-CHOICE-ACTION-SEND")
26 verbose bad json 			{
26 verbose bad json 				requestData.IsReasonExist = false;
26 verbose bad json 			}
26 verbose bad json 			else
26 verbose bad json 			{
26 verbose bad json 			if(document.getElementById('UserCheck_Textual_Input') != null)
26 verbose bad json 			{
26 verbose bad json 				var reason = document.getElementById('UserCheck_Textual_Input').value;
26 verbose bad json
26 verbose bad json 				//If the reason box is not found, there is nothing to enforce.
26 verbose bad json 				if(reason === undefined)
26 verbose bad json 				{
26 verbose bad json 					reason = "";
26 verbose bad json 					requestData.IsReasonExist = false;
26 verbose bad json 				}
26 verbose bad json 				else if(window.oUserAction.incidentObject.IsReasonEnforced === true && (reason.length == 0 || reason.length > 400))
26 verbose bad json 					return;
26 verbose bad json
26 verbose bad json 				requestData.Reason = reason;
26 verbose bad json 			}
26 verbose bad json 			else
26 verbose bad json 			{
26 verbose bad json 				requestData.IsReasonExist = false;
26 verbose bad json 			}
26 verbose bad json 			}
26 verbose bad json 			//Sometimes the cookie is not written correctly, so used global user.
26 verbose bad json 			if(requestData.UserID == null || requestData.UserID == "")
26 verbose bad json 				requestData.UserID = g_userID;
26 verbose bad json 			requestData.IID = UserCheck.DataObj.IID;
26 verbose bad json
26 verbose bad json 			var sAbsoluteURL = PORTAL_IS.TOOLS.getURL("data/GetUserCheckUserChoiceData");
26 verbose bad json
26 verbose bad json 			sendAsynchronousRequest(sAbsoluteURL,
26 verbose bad json 									flattenObject(requestData),
26 verbose bad json 									this.handleUserCheckChoiceData,
26 verbose bad json 									this,
26 verbose bad json 									[new Callback()]);
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.goToBlank = function()
26 verbose bad json 	{
26 verbose bad json 		window.location = "about:blank";
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.ApproveHttp = function()
26 verbose bad json 	{
26 verbose bad json 		this.sendMail();
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json
26 verbose bad json 	this.createScrubbingLinks = function(attachments, isExtended)
26 verbose bad json 	{
26 verbose bad json 		var scrub_files_out = "<ul style=\"list-style-type: none;padding: 0;\">";
26 verbose bad json 		for (var i = 0;i<attachments.length;i++)
26 verbose bad json 		{
26 verbose bad json 			if (attachments[i].fileStatus == "FILE-STATUS-APPROVED-BY-TE" || attachments[i].fileStatus == "FILE-STATUS-AVAILABLE" || attachments[i].fileStatus == "FILE-STATUS-AVAILABLE-SUSPICIOUS")
26 verbose bad json 			{
26 verbose bad json 				var image = "images/confirmation.png";
26 verbose bad json 				var comment = "";
26 verbose bad json 				var toolTip = "Click to download";
26 verbose bad json 				var removedParts = attachments[i].removedParts;
26 verbose bad json 				if (isExtended == true)
26 verbose bad json 				{
26 verbose bad json 					if(removedParts != "")
26 verbose bad json 					{
26 verbose bad json 						removedParts = removedParts.replace(/\n/g,", ");
26 verbose bad json 						comment = " contains " + removedParts;
26 verbose bad json 					}
26 verbose bad json 					else
26 verbose bad json 					{
26 verbose bad json 						 comment = PORTAL_IS.L10N.L10N_Obj.getStr(attachments[i].scrubResult);
26 verbose bad json 					}
26 verbose bad json 				}
26 verbose bad json 				scrub_files_out += "<li title=\"" + toolTip + "\"><img src=\"" + image + "\" width=\"20\" height=\"20\"/>&nbsp;&nbsp;" + "<a href=\"ScrubGetFile?IID="+UserCheck.DataObj.IID+"&fileID="+attachments[i].fileId+"\" TARGET=\"_blank\"><span style=\"font-weight:bold\">" + attachments[i].fileName + "</span></a> <span style=\"color:Red;font-size:80%\">" + comment + "</span></li>"
26 verbose bad json 			}
26 verbose bad json 			else
26 verbose bad json 			{
26 verbose bad json 				var description = "";
26 verbose bad json 				var img = "";
26 verbose bad json 				var toolTip = "";
26 verbose bad json 				if (attachments[i].fileStatus == "FILE-STATUS-WAITING-FOR-TE")
26 verbose bad json 				{
26 verbose bad json 					g_refreshFiles = true;
26 verbose bad json 					description = "scanning...";
26 verbose bad json 					img = "img/loader.gif";
26 verbose bad json 					toolTip = "Please wait while file is being scanned";
26 verbose bad json 				}
26 verbose bad json 				else if (attachments[i].fileStatus == "FILE-STATUS-BLOCKED-BY-TE")
26 verbose bad json 				{
26 verbose bad json 					description = "blocked";
26 verbose bad json 					img = "img/block.png";
26 verbose bad json 					toolTip = "File is malicious - blocked for download";
26 verbose bad json 				}
26 verbose bad json 				else if (attachments[i].fileStatus == "FILE-STATUS-BLOCKED-BY-POLICY")
26 verbose bad json 				{
26 verbose bad json 					description = "blocked";
26 verbose bad json 					img = "img/block.png";
26 verbose bad json 					toolTip = "File is blocked for download according to company policy";
26 verbose bad json 				}
26 verbose bad json 				scrub_files_out += "<li title=\"" + toolTip + "\"><img src=\"" + img + "\" width=\"20\" height=\"20\"/>&nbsp;&nbsp;" + attachments[i].fileName + " <span style=\"color:LightSteelBlue\">(" + description + ")</span></li>"
26 verbose bad json 			}
26 verbose bad json 		}
26 verbose bad json 		scrub_files_out += "</ul><div id=\"refresh_timer_div\"></div>";
26 verbose bad json 		return scrub_files_out;
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.handleScrubbingFiles = function(xhrStatus, xhrResponse, callback)
26 verbose bad json 	{
26 verbose bad json 		if (callback == undefined)
26 verbose bad json     	{
26 verbose bad json     	    callback = new Callback();
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		if (xhrStatus != 200)
26 verbose bad json 		{
26 verbose bad json 			DEBUG.out('Retreiving UserCheck Incident Data failed. ('+xhrStatus+')', DEBUG.ERROR);
26 verbose bad json 			callback.call();
26 verbose bad json 			return;
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		this.scrubbingResponse = JSON.parse(xhrResponse);
26 verbose bad json
26 verbose bad json 		var attachments = [];
26 verbose bad json 		if( Object.prototype.toString.call( this.scrubbingResponse.data.attachments ) != '[object Array]' ) {
26 verbose bad json 			attachments[0] = this.scrubbingResponse.data.attachments;
26 verbose bad json 		}
26 verbose bad json 		else
26 verbose bad json 		{
26 verbose bad json 			attachments = this.scrubbingResponse.data.attachments;
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		g_refreshFiles = false;
26 verbose bad json 		var scrub_links_simple = document.getElementById('links_simple');
26 verbose bad json 		if (scrub_links_simple != null)
26 verbose bad json 		{
26 verbose bad json 			if (scrub_links_simple.hasChildNodes())
26 verbose bad json 				scrub_links_simple.removeChild(scrub_links_simple.childNodes[0]);
26 verbose bad json 			var tmp = document.createElement("div");
26 verbose bad json 			tmp.innerHTML = window.oUserAction.createScrubbingLinks(attachments, false);
26 verbose bad json 			scrub_links_simple.appendChild(tmp);
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		var scrub_links_extended = document.getElementById('links_extended');
26 verbose bad json 		if (scrub_links_extended != null)
26 verbose bad json 		{
26 verbose bad json 			if (scrub_links_extended.hasChildNodes())
26 verbose bad json 				scrub_links_extended.removeChild(scrub_links_extended.childNodes[0]);
26 verbose bad json 			var tmp = document.createElement("div");
26 verbose bad json 			tmp.innerHTML = window.oUserAction.createScrubbingLinks(attachments, true);
26 verbose bad json 			scrub_links_extended.appendChild(tmp);
26 verbose bad json 		}
26 verbose bad json
26 verbose bad json 		if (g_refreshFiles)
26 verbose bad json 		{
26 verbose bad json 			UserCheck.tools.oTimeoutManager.startTimeoutTimer(30, window.oUserAction.refreshScrubbingFiles);
26 verbose bad json 		}
26 verbose bad json 		callback.call();
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json 	this.refreshScrubbingFiles = function()
26 verbose bad json 	{
26 verbose bad json 		var requestData = 	{
26 verbose bad json 				IID: "-1"
26 verbose bad json 			};
26 verbose bad json 		requestData.IID = UserCheck.DataObj.IID;
26 verbose bad json 		var sAbsoluteURL = PORTAL_IS.TOOLS.getURL("data/GetScrubFiles");
26 verbose bad json 		sendAsynchronousRequest(sAbsoluteURL,
26 verbose bad json 				flattenObject(requestData),
26 verbose bad json 				window.oUserAction.handleScrubbingFiles,
26 verbose bad json 				this,
26 verbose bad json 				[new Callback()]);
26 verbose bad json 	}
26 verbose bad json
26 verbose bad json     this.showOrHideRemovedPartsfromFiles = function(FileIndex)
26 verbose bad json     {
26 verbose bad json         var infoimg_element = document.getElementById('infoimg_' + FileIndex);
26 verbose bad json         var removed_parts_element = document.getElementById('removed_parts_' + FileIndex);
26 verbose bad json
26 verbose bad json         if ( infoimg_element != null && removed_parts_element != null )
26 verbose bad json         {
26 verbose bad json             if( removed_parts_element.style.display === "none" )
26 verbose bad json             {
26 verbose bad json                 infoimg_element.style.display = 'none';
26 verbose bad json                 removed_parts_element.style.display = 'inline';
26 verbose bad json             }
26 verbose bad json             else
26 verbose bad json             {
26 verbose bad json                 infoimg_element.style.display = "inline";
26 verbose bad json                 removed_parts_element.style.display = 'none';
26 verbose bad json             }
26 verbose bad json         }
26 verbose bad json     }
26 verbose bad json
26 verbose bad json } //END: window.UserAction = function()
26 verbose bad json
26 verbose bad json window.oUserAction = new UserAction();
26 verbose bad json oUserAction.init();
26 verbose bad json
26 verbose bad json     </script>
26 verbose bad json
26 verbose bad json </html>
27 error registry error parsing json
28 verbose headers { date: 'Mon, 20 Mar 2017 12:30:19 GMT',
28 verbose headers   server: 'CPWS',
28 verbose headers   'x-ua-compatible': 'IE=edge',
28 verbose headers   'set-cookie':
28 verbose headers    [ 'DLPSID=efdf74be8e0543a5fc915a2fac775a89; path=/; secure; HttpOnly',
28 verbose headers      'UserCheck_UserID=58CFCB5B0000000501031FAC00003986; expires=Tue, 20-Mar-2018 18:19:06 GMT' ],
28 verbose headers   expires: 'Thu, 19 Nov 1981 08:52:00 GMT',
28 verbose headers   'cache-control': 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0',
28 verbose headers   pragma: 'no-cache',
28 verbose headers   'keep-alive': 'timeout=1, max=100',
28 verbose headers   connection: 'Keep-Alive',
28 verbose headers   'transfer-encoding': 'chunked',
28 verbose headers   'content-type': 'text/html' }
29 silly registry.get cb [ 200,
29 silly registry.get   { date: 'Mon, 20 Mar 2017 12:30:19 GMT',
29 silly registry.get     server: 'CPWS',
29 silly registry.get     'x-ua-compatible': 'IE=edge',
29 silly registry.get     'set-cookie':
29 silly registry.get      [ 'DLPSID=efdf74be8e0543a5fc915a2fac775a89; path=/; secure; HttpOnly',
29 silly registry.get        'UserCheck_UserID=58CFCB5B0000000501031FAC00003986; expires=Tue, 20-Mar-2018 18:19:06 GMT' ],
29 silly registry.get     expires: 'Thu, 19 Nov 1981 08:52:00 GMT',
29 silly registry.get     'cache-control': 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0',
29 silly registry.get     pragma: 'no-cache',
29 silly registry.get     'keep-alive': 'timeout=1, max=100',
29 silly registry.get     connection: 'Keep-Alive',
29 silly registry.get     'transfer-encoding': 'chunked',
29 silly registry.get     'content-type': 'text/html' } ]
30 silly lockFile 9f665704-body-parser body-parser@
31 silly lockFile 9f665704-body-parser body-parser@
32 error SyntaxError: Unexpected token <
32 error <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
32 error
32 error <html>
32 error 	<head>
32 error 		<meta name="robots" content="noindex,nofollow" />
32 error 		<meta content="yes" name="apple-mobile-web-app-capable" />
32 error         	<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
32 error
32 error 		<link rel="icon" type="image/vnd.microsoft.icon" href="img/favicon.ico"/>                          <link rel="shortcut icon" type="image/vnd.microsoft.icon" href="img/favicon.ico"/>
32 error 		<link id="dynamicCSS" rel="stylesheet" type="text/css" href="/UserCheck/css/Blob_dynamic_css" />
32 error 		<link id="staticCSS" rel="stylesheet" type="text/css" href="/UserCheck/css/Blob_static.css" />
32 error
32 error
32 error 				<script type="text/javascript">
32 error 			//Create a dynamic element to allow sending of the document mode of IE.
32 error 			//This way we can notify PHP that it can display modern content instead of classic, despite the browser's reporting of being IE7.
32 error 			var headID = document.getElementsByTagName("head")[0];
32 error 			var cssNode = document.createElement('link');
32 error 			cssNode.type = 'text/css';
32 error 			cssNode.rel = 'stylesheet';
32 error 			cssNode.href = "/UserCheck/css/UserCheckCSS" + (document.documentMode !== undefined ? "?documentMode=" + document.documentMode : "");
32 error 			headID.appendChild(cssNode);
32 error
32 error
32 error /*
32 error ========================================================================================================================
32 error PORTAL IS - ESSENTIALS INCLUSION - START
32 error ________________________________________________________________________________________________________________________
32 error */
32 error // Set global PORTAL_IS namespace.
32 error window.PORTAL_IS = {};
32 error
32 error // Set namespace.
32 error PORTAL_IS.CONF = {};
32 error
32 error PORTAL_IS.CONF.AJAX_REQ_TIMEOUT = 15000;
32 error
32 error // These properties describes the external references of the portal.
32 error PORTAL_IS.CONF.MULTI_PORTALS = {};
32 error PORTAL_IS.CONF.MULTI_PORTALS.EXTERNAL_PATH 		= "";
32 error PORTAL_IS.CONF.MULTI_PORTALS.EXTERNAL_PORT		= 443;
32 error PORTAL_IS.CONF.MULTI_PORTALS.EXTERNAL_HOST		= "192.168.0.0";
32 error PORTAL_IS.CONF.MULTI_PORTALS.EXTERNAL_SCHEME	= "https";
32 error PORTAL_IS.CONF.MULTI_PORTALS.XSRF_TOKEN			= "";
32 error
32 error // The current web application name.
32 error PORTAL_IS.CONF.WEBAPP_NAME = "UserCheck";
32 error
32 error // Debug configurations
32 error PORTAL_IS.CONF.MAX_STACK_SIZE = 1000;
32 error PORTAL_IS.CONF.QUIET_MODE		= "on".toLowerCase() == "on";
32 error PORTAL_IS.CONF.DEBUG_LEVEL 	= 0;
32 error
32 error
32 error // Set namespace.
32 error window.PORTAL_IS.L10N = {}
32 error
32 error // Localization object.
32 error //=============================================================================================
32 error function __L10N()
32 error {
32 error 	this.strings = new Array();
32 error 	this.browserLangs = new Array();
32 error
32 error 	this.init = function()
32 error 	{
32 error 		var obj = {"UC_TITLE":"Check Point UserCheck","UC_TITLE_MOBILE_DLP":"Check Point UserCheck Mobile DLP","BUTTON.OK":"OK","BUTTON.CANCEL":"Cancel","BUTTON.SEND":"Send","BUTTON.DISCARD":"Discard","BUTTON.APPROVE":"Approve","WRONG_ID":"This notification page has expired. You can safely close the page or ","TIMEOUT":"This notification page has expired. You can safely close the page or ","RETRY":"reload the original page.","REPORT_SUCCESS":"Report was sent successfully.","REPORT_ERROR":"An error occured while sending the report.","REQUIRED_FIELDS":"Required fields","ENTER_TEXT":"Enter text","RETURN_TO_SITE":"Return to site","UC.BLOCKED_IFRAME":"Learn more...","UC.INFO_IFRAME":"Click to resolve...","PLEASE_WAIT":"Please wait . . .","NO_SCRIPT":"This portal requires browser which support JavaScript.<br>Please make sure that you are using an updated browser and that JavaScript is enabled.","MSGBOX_TITLE_CONFIRMATION":"Confirmation","MSGBOX_TITLE_JUSTIFICATION":"Justification","MSGBOX_TITLE_APPROVER":"Approver","MSGBOX_TITLE_WARNING":"Warning","MSGBOX_TITLE_ATTENTION":"Attention","MSGBOX_TITLE_ERROR":"Error","MSGBOX_TITLE_REPORT_ERROR":"Report an error","MSGBOX_TITLE_EXTEND_EXPIRATION":"Extend expiration date","DEFAULT_GENERIC_CLIENT_ERROR":"An unexpected error has occurred.\nYou may still be able to continue working normally.\nPlease retry accessing the web page in a short while.\n\n","DEFAULT_GENERIC_TIMEOUT_CLIENT_ERROR":"You may not access this page, or this page has expired.\nPlease sign in.","LOG_REFERENCE_ID":"Log reference id: ","ERROR.LINK.SEND_ERROR_REPORT":"Send error report","ERROR.LINK.IM_HAVING_PROBLEMS":"I am having problems with this Portal.","CHECKPOINT_COPY_RIGHTS":"&copy;2011 Check Point Software Technologies Ltd.","EMAIL_SENT":"The email has been sent","EMAIL_DISCARDED":"The email has been discarded","EMAIL_ALREADY_SENT":"The email has already been sent","EMAIL_ALREADY_DISCARDED":"The email has already been discarded","UNKOWN_INCIDENT_STATUS":"The incident status is unkown","REVIEW_TEXT":"Review issue in portal","MAIL.ITEM.ATTACHMENTS":"Attachments","HTTP_LEARNING":"To complete the operation, <b>please return to site and resend the information<\/b>, thanks.","HTTP_LEARNING_ERROR_MSG":"Sending the message cannot be approved,<\/br> please contact your system administrator.","HTTP_LEARNING_ERROR_TOOLTIP":"Sending the message cannot be approved, please contact your system administrator.","CP_SCRUB_RESULT_SUCCESS":"","CP_SCRUB_RESULT_FAILURE":"File structure may be corrupted","CP_SCRUB_RESULT_TIMEOUT":"","CP_SCRUB_RESULT_UNSUPPORTED_FILE":"File format is not supported","CP_SCRUB_RESULT_NOT_SCRUBBED":"","CP_SCRUB_RESULT_INTERNAL_ERROR":"","CP_SCRUB_RESULT_NO_VALID_CONTRACT":"","CP_SCRUB_RESULT_SKIPPED_BY_TE_CONFIDENCE":"","CP_SCRUB_RESULT_OUT_OF_MEMORY":"","CP_SCRUB_RESULT_DOCSEC_FILE":"File encrypted using Checkpoint's Document Security","CP_SCRUB_RESULT_ENCRYPTED_FILE":"contains encrypted data","CP_SCRUB_RESULT_SKIPPED_BY_SCRIPT":"","CP_SCRUB_RESULT_DISK_LIMIT_REACHED":""};
32 error
32 error 		for(val in obj)
32 error 			this.strings[val] = obj[val];
32 error
32 error 		obj = ["en"];
32 error
32 error 		for(val in obj)
32 error 		{
32 error 			this.browserLangs[val] = obj[val].split(';')[0];
32 error 		}
32 error 	}
32 error
32 error 	this.getStr = function(stringId)
32 error 	{
32 error 		return this.strings[stringId];
32 error 	}
32 error
32 error 	this.selectLanguage = function(languageArray)
32 error 	{
32 error 		for(lang in this.browserLangs)
32 error 		{
32 error 			if(languageArray[this.browserLangs[lang]] === true)
32 error 				return this.browserLangs[lang];
32 error
32 error 			if(languageArray[this.browserLangs[lang].substring(0, 2)] === true)
32 error 				return this.browserLangs[lang].substring(0, 2);
32 error 		}
32 error
32 error 		//If nothing succeeded, return the default.
32 error 		return "en";
32 error 	}
32 error
32 error 	this.reloadLanguageTo = function(lang, fallbackLang, callback)
32 error 	{
32 error 		var requestData = {};
32 error
32 error 		requestData.lang = lang;
32 error 		requestData.fallbackLang = fallbackLang;
32 error
32 error 		var sAbsoluteURL = PORTAL_IS.TOOLS.getURL("data/GetTranslationData");
32 error
32 error 		sendAsynchronousRequest(sAbsoluteURL,
32 error 								flattenObject(requestData),
32 error 								this.asyncReloadLangHandler,
32 error 								this,
32 error 								[callback]);
32 error 	}
32 error
32 error 	this.asyncReloadLangHandler = function(xhrStatus, xhrResponse, callback)
32 error 	{
32 error 		if (xhrStatus != 200)
32 error 		{
32 error 			DEBUG.out('Retreiving translation data failed. ('+xhrStatus+')', DEBUG.ERROR);
32 error 			return;
32 error 		}
32 error
32 error 		var obj = JSON.parse(xhrResponse);
32 error 		this.strings = null; //Ensure removing of old values.
32 error 		this.strings = new Array();
32 error
32 error 		for(val in obj)
32 error 			this.strings[val] = obj[val];
32 error
32 error 		callback();
32 error 	}
32 error }
32 error //=============================================================================================
32 error
32 error //Localization object.
32 error L10N_Obj = new __L10N();
32 error L10N_Obj.init();
32 error PORTAL_IS.L10N.L10N_Obj = L10N_Obj;
32 error
32 error /*
32 error ________________________________________________________________________________________________________________________
32 error
32 error PORTAL IS - ESSENTIALS INCLUSION - END
32 error ========================================================================================================================
32 error */
32 error 			var noJSCrypto = "true";
32 error 		</script>
32 error 		<script type="text/javascript" src="js/Blob.js"></script>
32 error 		<script type="text/javascript">
32 error
32 error
32 error // Create namespace
32 error window.UserCheck = {};
32 error window.UserCheck.tools = {};
32 error
32 error // =======================================================================================
32 error function parseSender(value)
32 error {
32 error 	return value.address;
32 error }
32 error // =======================================================================================
32 error
32 error
32 error // =======================================================================================
32 error // Render recipient list from and array.
32 error // String[] recipientsArr   - Array of recipients.
32 error // [int ellipsisLimit]      - A string beyond this length will be cut and added ellipsis. Optional, default is 0 - no ellipsis.
32 error // [bool useLinebreakes]    - Should a line break be added after each recipient. Optional, default is true.
32 error function recipientsArr2StrInTable(recipientsArr, ellipsisLimit, useLinebreakes)
32 error {
32 error     if (ellipsisLimit == undefined)
32 error     {
32 error         ellipsisLimit = 0;
32 error     }
32 error
32 error     if (useLinebreakes == undefined)
32 error     {
32 error         useEllipsis = true;
32 error     }
32 error
32 error 	var recipientsList = "";
32 error
32 error 	for (var i=0; i<recipientsArr.length; i++)
32 error 	{
32 error 		recipientsList += HTMLEncode(recipientsArr[i].address);
32 error 		if (i < recipientsArr.length-1)
32 error 		{
32 error 			recipientsList += ", ";
32 error 			if (useLinebreakes)
32 error 			{
32 error 			    recipientsList += "<br>";
32 error             }
32 error 		}
32 error 	}
32 error
32 error 	if (ellipsisLimit > 0)
32 error 	{
32 error 	    //recipientsList = Ext.util.Format.ellipsis(recipientsList, ellipsisLimit);
32 error 	    recipientsList = recipientsList;
32 error     }
32 error
32 error 	return recipientsList;
32 error }
32 error // =======================================================================================
32 error
32 error
32 error // =======================================================================================
32 error // Render recipient list from and array.
32 error // Sender sender            - The sender data.
32 error // [int ellipsisLimit]      - A string beyond this length will be cut and added ellipsis. Optional, default is 0 - no ellipsis.
32 error // [bool useLinebreakes]    - Should a line break be added after each recipient. Optional, default is true.
32 error function getSenderName(sender, ellipsisLimit)
32 error {
32 error     var output = "";
32 error
32 error     if (ellipsisLimit == undefined)
32 error     {
32 error         ellipsisLimit = 0;
32 error     }
32 error
32 error     if (sender.name.empty())
32 error     {
32 error         output = sender.address;
32 error     }
32 error     else
32 error     {
32 error         output = sender.name;
32 error     }
32 error
32 error //	if (ellipsisLimit > 0)
32 error //	{
32 error //	    output = Ext.util.Format.ellipsis(output, ellipsisLimit);
32 error //    }
32 error
32 error 	 return output;
32 error }
32 error // =======================================================================================
32 error
32 error
32 error // =======================================================================================
32 error // Render recipient list from and array.
32 error // String sender            - The subject string.
32 error // [int ellipsisLimit]      - A string beyond this length will be cut and added ellipsis. Optional, default is 0 - no ellipsis.
32 error // [bool useLinebreakes]    - Should a line break be added after each recipient. Optional, default is true.
32 error function getSubject(subject, ellipsisLimit)
32 error {
32 error     var output = subject;
32 error
32 error     if (ellipsisLimit == undefined)
32 error     {
32 error         ellipsisLimit = 0;
32 error     }
32 error
32 error //	if (ellipsisLimit > 0)
32 error //	{
32 error //	    output = Ext.util.Format.ellipsis(output, ellipsisLimit);
32 error //    }
32 error
32 error 	 return output;
32 error }
32 error // =======================================================================================
32 error
32 error
32 error // =======================================================================================
32 error // tranform recipients array to string
32 error function recipientsArr2Str(recipientsArr,type)
32 error {
32 error     var recipientsList = "";
32 error     var address = "";
32 error     var commaNeeded = false;
32 error     for (var i=0; i<recipientsArr.length; i++)
32 error     {
32 error         if (type == recipientsArr[i].recipientType)
32 error         {
32 error             if (!commaNeeded)
32 error                 commaNeeded = true;
32 error             else
32 error                 recipientsList += ", ";
32 error
32 error             address = HTMLEncode(recipientsArr[i].address);
32 error             if (recipientsArr[i].isExternal)
32 error             {
32 error                 address = '<span ' + GetDomainColor(recipientsArr[i].address)+' >' + address + '</span>'
32 error             }
32 error             recipientsList += address;
32 error         }
32 error     }
32 error
32 error     return recipientsList;
32 error }
32 error
32 error // =======================================================================================
32 error function arr2Str(arr)
32 error {
32 error     var str = "";
32 error     var commaNeeded = false;
32 error     for (var i=0; i<arr.length; i++)
32 error     {
32 error         if (!commaNeeded)
32 error         {
32 error             commaNeeded = true;
32 error         }
32 error         else
32 error         {
32 error             str += ", ";
32 error         }
32 error         str += arr[i];
32 error     }
32 error
32 error     return str;
32 error }
32 error
32 error function GetDomainColor(str)
32 error {
32 error     // var highlightColors = new Array("FFFF00","00FF00","00FFFF","FF00FF","FF0000","FFFF99","99FF99","CCFFFF","FFCCFF", "FF9999")
32 error 	var highlightColors = new Array("FFFF00","FF00FF","FF0000","FFBB00","FF9999");
32 error     domainName = GetDomainName(str);
32 error     if (domainName==null) return null;
32 error
32 error     hash=0;
32 error     for (i=0; i<domainName.length; i++)
32 error     {
32 error         hash += domainName.charCodeAt(i);
32 error     }
32 error     hash = hash % (highlightColors.length);
32 error     return 'style="background-color: #' + highlightColors[hash] + '; text-decoration: underline;"';
32 error }
32 error
32 error /*
32 error // =======================================================================================
32 error UserCheck.tools.clearContainer = function(containerId)
32 error {
32 error     DEBUG.out("Clear container: "+containerId);
32 error 	var container = Ext.getCmp(containerId);
32 error     if ((container) && (container.items))
32 error     {
32 error         container.items.each(
32 error             function(item)
32 error             {
32 error              container.remove(item, true);
32 error             }
32 error         );
32 error     }
32 error }
32 error // =======================================================================================
32 error */
32 error
32 error // Override poral_is error handler.
32 error //=============================================================================================
32 error window.genericTimeoutHandler = function(portalException)
32 error {
32 error 	DEBUG.out("UserCheck::genericTimeoutHandler.");
32 error
32 error 	if ((portalException == undefined) || (portalException == null))
32 error 	{
32 error 		portalException = new PortalException();
32 error 	}
32 error
32 error 	// Assign action to the Ok button.
32 error 	// The event is added in order to get the exception, if it is set, that is set as the error message OK button attribute. see showPortalErrorMessage
32 error 	postErrorHandler = function(event)
32 error 	{
32 error 		// Check if redirected due to timeout.
32 error 		if (getCookie("isRedirectedDueTimeout") == "1")
32 error 		{
32 error 			// Delete the cookie to allow future errors.
32 error 			setCookie("isRedirectedDueTimeout", "0", 0);
32 error
32 error 			// TODO: Redirect to error page.
32 error 			return;
32 error 		}
32 error
32 error 		// Set cookie in order to prevent error loops.
32 error 		setCookie("isRedirectedDueTimeout", "1", 5*60);
32 error
32 error 		genericPostErrorHandler(event);
32 error
32 error 		// Reload the page.
32 error 		document.location.href=document.location.href;
32 error 	}
32 error
32 error 	// TODO: Get message from resource bundle.
32 error 	//var errMsg = "Your session has expired or timed out.\nYou will be redirected to the login page.\n\n";
32 error 	showPortalErrorMessage(portalException, postErrorHandler, true);
32 error }
32 error //=============================================================================================
32 error
32 error
32 error
32 error //=============================================================================================
32 error window.genericErrorHandler = function(portalException, callback)
32 error {
32 error 	DEBUG.out("UserCheck::genericErrorHandler.");
32 error 	if ((portalException == undefined) || (portalException == null))
32 error 	{
32 error 		portalException = new PortalException();
32 error 	}
32 error
32 error 	if (isNothingness(callback))
32 error 	{
32 error 		callback = new Callback();
32 error 	}
32 error
32 error 	// Assign action to the Ok button.
32 error 	// The event is added in order to get the exception, if it is set, that is set as the error message OK button attribute. see showPortalErrorMessage
32 error 	postErrorHandler = function(event)
32 error 	{
32 error 		genericPostErrorHandler(event);
32 error         callback.call();
32 error 		// No reload of the page.
32 error 	}
32 error
32 error 	showPortalErrorMessage(portalException, postErrorHandler, true);
32 error 	return true; // This is required for the execption to stop from being passed to the browser.
32 error }
32 error //=============================================================================================
32 error
32 error
32 error
32 error //=============================================================================================
32 error window.genericPostErrorHandler = function(event)
32 error {
32 error 	DEBUG.out("UserCheck::genericPostErrorHandler.");
32 error 	// Just hide the error.
32 error 	hidePortalErrorMessage();
32 error }
32 error //=============================================================================================
32 error
32 error //=============================================================================================
32 error UserCheck.tools.sendErrorReport = function(userDesc, callback)
32 error {
32 error 	DEBUG.out("UserCheck.tools.sendErrorReport in.");
32 error
32 error     var sAbsoluteURL = getURL("data/submitErrorReport");
32 error     var report = encodeURIComponent(DEBUG.compileErrorReport());
32 error     var userDesc = encodeURIComponent(userDesc);
32 error
32 error 	var sendErrorReportCallback = new Callback();
32 error 	sendErrorReportCallback.methodReference = UserCheck.tools.handleErrorReportResponse;
32 error 	sendErrorReportCallback.args.push(callback);
32 error
32 error 	// Send report with no error handlers.
32 error 	PORTAL_IS.AJAX_MGR.sendAsyncReq(sAbsoluteURL, "report="+report+"&userDesc="+userDesc, sendErrorReportCallback, null, null, "Sending of error report failed.");
32 error
32 error 	// Set error flag.
32 error 	PORTAL_IS.TOOLS.errorMsgShown = false;
32 error }
32 error //=============================================================================================
32 error
32 error //=============================================================================================
32 error UserCheck.tools.handleErrorReportResponse = function(xhrStatus, xhrResponse, callback)
32 error {
32 error 	DEBUG.out("UserCheck.tools.handleErrorReportResponse in.");
32 error
32 error 	// Set error flag.
32 error 	PORTAL_IS.TOOLS.errorMsgShown = false;
32 error
32 error 	if (isNothingness(callback))
32 error 	{
32 error 		callback = new Callback();
32 error 	}
32 error
32 error 	if (xhrStatus != 200)
32 error 	{
32 error 		// TODO: Handle error.
32 error 		DEBUG.out('Submitting error report failed. ('+xhrStatus+')', DEBUG.ERROR);
32 error 		callback.call();
32 error 		showPortalMessage("Sending of error report failed.");
32 error 		return;
32 error 	}
32 error
32 error 	callback.call();
32 error
32 error 	showPortalMessage("Error report was sent successfully.\nThank you for your support.", null, UserCheck.MESSAGE_TYPE.Confirmation);
32 error }
32 error //=============================================================================================
32 error
32 error //=============================================================================================
32 error UserCheck.tools.showErrorReport = function(callback)
32 error {
32 error 	DEBUG.out("UserCheck.tools.showErrorReport in.");
32 error
32 error 	// Create new callback with send report and store previous callback in it.
32 error 	submitCallback = new Callback();
32 error 	submitCallback.methodReference 	= DEBUG.sendErrorReport;
32 error 	submitCallback.args = [callback];
32 error
32 error 	// Create new callback for cancel.
32 error 	cancelCallback = new Callback();
32 error 	cancelCallback.methodReference 	= function()
32 error 	{
32 error 		// Clear error flag.
32 error 		PORTAL_IS.TOOLS.errorMsgShown = false;
32 error 		callback.call();
32 error 	};
32 error
32 error     // Hide any opened boxes.
32 error     PORTAL_IS.TOOLS.hideGeneralContainer();
32 error     PORTAL_IS.TOOLS.hideDialog();
32 error     hidePortalMessage();
32 error     hidePortalErrorMessage();
32 error
32 error  	PORTAL_IS.TOOLS.showDialog(	"Please describe the encountered problem in the text box below.",
32 error  							"NOTICE: The report might include personal information from your mail items.\nThe report will not include your credentials.",
32 error  							"I was trying to (e.g. review an email):\n\nWork flow which led to this error (e.g. access via email link):\n\nI am unable to:",
32 error  							"Report an error",
32 error  							submitCallback, cancelCallback, null, null, null, null, true);
32 error
32 error 	// Set error flag.
32 error 	PORTAL_IS.TOOLS.errorMsgShown = true;
32 error }
32 error //=============================================================================================
32 error
32 error
32 error //=============================================================================================
32 error
32 error
32 error //=============================================================================================
32 error
32 error DEBUG.showErrorReport = UserCheck.tools.showErrorReport;
32 error DEBUG.sendErrorReport = UserCheck.tools.sendErrorReport;
32 error
32 error UserCheck.tools.oTimeoutManager =
32 error {
32 error 	timerID: -1,
32 error 	startTimeoutTimer: function(duration, callback)
32 error 	{
32 error 		var milisecs = duration * 1000;
32 error 		DEBUG.out("UserCheck.tools.TimeoutManager: Starting timer for " + duration + " seconds.");
32 error 		window.TimeoutManagerCallback = callback;
32 error 		this.timerID = setTimeout("this.TimeoutManagerCallback();", milisecs);
32 error 	},
32 error 	stopTimeoutTimer: function()
32 error 	{
32 error 		clearTimeout(timerID);
32 error 		timerID = -1;
32 error 	}
32 error };
32 error
32 error UserCheck.DataObj = {};
32 error
32 error // TODO: This should be defined as an "interface" class and other view managers should implement it.
32 error
32 error // UC's view manager.
32 error window.UCViewManager = function()
32 error {
32 error 	this.lastRenderedCustomContentContainers = new Array();
32 error 	this.defaultContainer = 'portal_main_view';
32 error 	this.ignoreHashChange = false;
32 error     this.wait = null;
32 error     this.requestParams = null;
32 error
32 error 	// Hash to view mapping, enables us to set display another value than the actual view name.
32 error 	//==================================================================================================================
32 error 	this.hashViewMap = new Array();
32 error 	//   		      Hash name									View name
32 error 	//__________________________________________________________________________________________________________________
32 error 	this.hashViewMap["UserAction"]								=	"UserAction";
32 error 	this.hashViewMap["MainWithMenuView"]					=	"MainWithMenuView";
32 error 	this.hashViewMap["Menu"]								=	"Menu";
32 error 	this.hashViewMap["Logout"]								=	"Logout";
32 error 	this.hashViewMap["MainView"]							=	"MainView";
32 error 	this.hashViewMap["Error"]								=	"Error";
32 error
32 error 	// Get View name from Hash name.
32 error 	this.hash2View = function(hash)
32 error 	{
32 error 		var view = this.hashViewMap[hash];
32 error
32 error 		if (isNothingness(view))
32 error 		{
32 error 			view = "UserAction";
32 error 		}
32 error 		return view;
32 error 	}
32 error
32 error 	// Get Hash name from View name.
32 error 	this.view2Hash = function(view)
32 error 	{
32 error 		var hash = "UserAction";
32 error 		for (key in this.hashViewMap)
32 error 		{
32 error 			if (this.hashViewMap[key] == view)
32 error 			{
32 error 				var hash = key;
32 error 			}
32 error 		}
32 error 		return hash;
32 error 	}
32 error 	//==================================================================================================================
32 error
32 error     // Initialize view manager.
32 error 	//=============================================================================================
32 error 	this.init = function()
32 error 	{
32 error 		DEBUG.out("UCViewManager::init");
32 error
32 error 		// Bind history change handler.
32 error 		$(window).bind('hashchange', viewManager.handleHistoryChange);
32 error
32 error         // Check address bar's hash and set desired view if exists.
32 error 		var desiredView = this.parseHash().view;
32 error 		if (isNothingness(desiredView))
32 error 		{
32 error 			desiredView = "";
32 error 		}
32 error
32 error 		DEBUG.out("UCViewManager::init, desired view: [" + desiredView + "]");
32 error 		this.gotoNextView(desiredView);
32 error 	}
32 error 	//=============================================================================================
32 error
32 error
32 error
32 error     // Handle history changes (back/reload).
32 error     // Overriding default handling.
32 error 	//=============================================================================================
32 error 	this.handleHistoryChange = function(e, ui)
32 error 	{
32 error 		// In some cases the hash is changed and no view load is required, checking if so.
32 error 		if (!viewManager.ignoreHashChange && ui != undefined)
32 error 		{
32 error 			// Parse view from hash.
32 error 			var desiredView = viewManager.parseHash().view;
32 error 			DEBUG.out("UCViewManager::handleHistoryChange, desired view:" + desiredView);
32 error 			viewManager.gotoNextView(desiredView);
32 error 		}
32 error 		else
32 error 		{
32 error 			DEBUG.out("UCViewManager::handleHistoryChange, hash changed ignored.");
32 error 		}
32 error
32 error 		// Reset the ignore flag.
32 error         viewManager.ignoreHashChange = false;
32 error 	}
32 error 	//=============================================================================================
32 error
32 error
32 error 	// Queries the server for next desired view and than call for rendering it.
32 error 	// Will call upon callback when done rendering the view.
32 error 	//=============================================================================================
32 error 	this.gotoNextView = function(requestedView, callback)
32 error 	{
32 error     	DEBUG.out("UCViewManager::gotoNextView");
32 error
32 error     	if (isNothingness(callback))
32 error     	{
32 error     	    callback = new Callback();
32 error 		}
32 error
32 error         // Check what is the next view.
32 error         var sAbsoluteURL 	= PORTAL_IS.TOOLS.getURL("GetNextView");
32 error 		var parameters 		= (isNothingness(requestedView)) ? ("") : ("requestedView=" + encodeURIComponent(requestedView));
32 error
32 error 		var gotoNextViewCallback = new Callback();
32 error 			gotoNextViewCallback.methodReference    = this.handleGotoNextViewRequest;
32 error 			gotoNextViewCallback.thisArgument       = this;
32 error 			gotoNextViewCallback.args               = [callback];
32 error
32 error         PORTAL_IS.AJAX_MGR.sendAsyncReq(sAbsoluteURL, parameters, gotoNextViewCallback);
32 error 	}
32 error 	//=============================================================================================
32 error
32 error
32 error 	// Handle next view query.
32 error 	//=============================================================================================
32 error 	this.handleGotoNextViewRequest = function(xhrStatus, xhrResponse, callback)
32 error 	{
32 error 		DEBUG.out("UCViewManager::handleGotoNextViewRequest");
32 error
32 error 		if (isNothingness(callback))
32 error     	{
32 error     	    callback = new Callback();
32 error 		}
32 error
32 error 		if (xhrStatus != 200)
32 error 		{
32 error 			DEBUG.out('Retreiving next view failed. ('+xhrStatus+')', DEBUG.ERROR);
32 error 			callback.call();
32 error 			return;
32 error 		}
32 error
32 error 		var nextViewJSONObj = JSON.parse(xhrResponse);
32 error         var nextView = nextViewJSONObj.view;
32 error 		DEBUG.out("UCViewManager::handleGotoNextViewRequest, next view:" + nextView);
32 error
32 error 		// Extract the data (request params) from hash and relay it onto next hash.
32 error 		// As hash changing handler will be passed back to this method we set the Ignore flag to TRUE
32 error 		// and call for the gotoView method.
32 error 		viewManager.changeHash(nextView, viewManager.parseHash().data, true);
32 error
32 error 		viewManager.gotoView(nextView, callback);
32 error 	}
32 error 	//=============================================================================================
32 error
32 error
32 error 	// Get view contents (CSS, JS and HTML).
32 error 	// Will call upon callback when done rendering the view.
32 error 	//=============================================================================================
32 error 	this.gotoView = function(view, callback)
32 error 	{
32 error         DEBUG.out("UCViewManager::gotoView view: ["+view+"]");
32 error
32 error         if (callback == undefined)
32 error     	{
32 error     	    callback = new Callback();
32 error 		}
32 error
32 error 		var hash = this.parseHash().view;
32 error 		var parameters = (hash == "") ? ("view="+encodeURIComponent(hash)) : ( "requestedView=" + encodeURIComponent(view) + "&view="+encodeURIComponent(hash) );
32 error
32 error 		sendAsynchronousRequest(PORTAL_IS.TOOLS.getURL("viewManager/GetViewData"),
32 error 								parameters,
32 error 								this.handleNewView,
32 error 								this,
32 error 								[callback]);
32 error 	}
32 error 	//=============================================================================================
32 error
32 error
32 error     // Handle new view rendering.
32 error 	//=============================================================================================
32 error 	this.handleNewView = function(xhrStatus, xhrResponse, callback)
32 error 	{
32 error 		if (callback == undefined)
32 error     	{
32 error     	    callback = new Callback();
32 error 		}
32 error
32 error 		if (xhrStatus != 200)
32 error 		{
32 error 			// TODO: Handle error.
32 error 			DEBUG.out('Retreiving view failed. ('+xhrStatus+')', DEBUG.ERROR);
32 error 			callback.call();
32 error 			return;
32 error 		}
32 error
32 error 		var newViewJSONObj = JSON.parse(xhrResponse);
32 error         var newView = newViewJSONObj.view;
32 error 		DEBUG.out("UCViewManager::handleNewView, Parsed from JSON - view:" + newView);
32 error
32 error
32 error 		var useDefaultContainerId   = true;
32 error 		var requiredContainerId     = "";
32 error 		var requiredView            = "";
32 error 		var requireSecureConnection = false;
32 error
32 error 		switch (newView)
32 error 		{
32 error 			default: // View will be rendered into main page view.
32 error 				useDefaultContainerId   = true;
32 error 				requiredContainerId     = this.defaultContainer;
32 error 			break;
32 error 		}
32 error
32 error 		// Check if in https, redirect if not.
32 error 		if ((requireSecureConnection) && (location.protocol.toLowerCase() == 'http:'))
32 error 		{
32 error 			newLocation = location.href.replace(/http:/i, "https:");
32 error 			location.href = newLocation;
32 error 			return;
32 error 		}
32 error
32 error 		var containerId = this.defaultContainer;
32 error 		if (!useDefaultContainerId)
32 error 		{
32 error 			containerId = requiredContainerId;
32 error 		}
32 error
32 error 		//var container = Ext.getCmp(containerId);
32 error 		var container = document.getElementById(containerId);
32 error
32 error         if (container != undefined)
32 error 		{
32 error
32 error 			DEBUG.out('Render new view ('+newViewJSONObj.view+') into [' + (useDefaultContainerId ? "DefaultContainer" : requiredContainerId) + "].");
32 error
32 error 			// Render CSS. - Not needed, all CSS loads from one blob file.
32 error 			//evaluateCSS(newViewJSONObj.css, "");
32 error
32 error 			// Clear existing content.
32 error 			container.innerHTML = "";
32 error
32 error 			// If the html content is not empty, render it into a new pane.
32 error 			container.innerHTML = newViewJSONObj.html;
32 error
32 error 			// Render JavaScript Content.
32 error 			evaluateJavaScript(newViewJSONObj.javascript);
32 error
32 error 		}
32 error 		else if (requiredContainerId == this.defaultContainer)
32 error 		{
32 error
32 error 			DEBUG.out('Default view is missing and will be rendered...');
32 error 			this.renderDefaultView();
32 error 			this.handleNewView(xhrStatus, xhrResponse, callback);
32 error
32 error 		}
32 error 		else // The container is not present and needs to be rendered first.
32 error 		{
32 error
32 error 			DEBUG.out('Required view ('+requiredContainerId+') is missing and needs to be rendered first.');
32 error
32 error 			// Set the previous view results in a callback, it will be called when finished rendering of the login sequence page.
32 error 			var requiredViewCallback = new Callback();
32 error 			requiredViewCallback.methodReference    = this.handleNewView;
32 error 			requiredViewCallback.thisArgument       = this;
32 error 			requiredViewCallback.args               = [200, xhrResponse]; // Set fake status and response.
32 error
32 error 			// Request specific view.
32 error 			this.gotoView(requiredView, requiredViewCallback);
32 error
32 error 		}
32 error
32 error 		// TODO: detect loops.
32 error
32 error
32 error 		// Done here, call the callback.
32 error 		//this.wait.hide();
32 error         callback.call();
32 error 	}
32 error 	//=============================================================================================
32 error
32 error
32 error
32 error
32 error
32 error
32 error 	// CUSTOM CONTENT RELATED METHODS
32 error 	// _________________________________________________________________________________________________________________
32 error
32 error 	// Get the view's custom Content.
32 error 	//=============================================================================================
32 error 	this.getViewCustomContent = function(view)
32 error 	{
32 error 		this.clearLastCustomContent();
32 error
32 error 		var sAbsoluteURL = PORTAL_IS.TOOLS.getURL("JSONViewData/GetViewCustomContent");
32 error 		sendAsynchronousRequest(sAbsoluteURL,
32 error 								"view="+view,
32 error 								this.renderCustomContent,
32 error 								this,
32 error 								[]);
32 error 	}
32 error 	//=============================================================================================
32 error
32 error
32 error 	// Render the custom content.
32 error 	//=============================================================================================
32 error 	this.renderCustomContent = function(xhrStatus, xhrResponse, callbackObj)
32 error 	{
32 error 		DEBUG.out('Render custom content.');
32 error 		callback = new Callback(callbackObj);
32 error
32 error 		if (xhrStatus != 200)
32 error 		{
32 error 			// TODO: Handle error.
32 error 			DEBUG.out('Retreiving custom content failed. ('+xhrStatus+')', DEBUG.ERROR);
32 error 			callback.call();
32 error 			return;
32 error 		}
32 error
32 error 		// The container Id is: "CustomContent_<VIEW NAME>_<RESOURCE KEY>".
32 error 		// For example: the "ISW" view and the resource key of "top" will be rendered into "CustomContent_ISW_top".
32 error
32 error 		var newCustomContentJSONObj = JSON.parse(xhrResponse);
32 error         var keyArr  = newCustomContentJSONObj.keyArr;
32 error         var view    = newCustomContentJSONObj.view
32 error
32 error 		// Override view.
32 error 		switch (view)
32 error 		{
32 error 			case "ICS":                 // No brake, group these views.
32 error 			case "Authentication":
32 error 			case "ISW":
32 error 			case "MultiChallenge":
32 error 			case "IswEntry":
32 error 				var usedView = "LoginSequencePage";
32 error 			break;
32 error
32 error 			default:
32 error 				var usedView = view;
32 error 			break;
32 error 		}
32 error
32 error         // Iterate on each of the custom content object.
32 error         var customContent, containerId, key;
32 error         //for (var key in keyMap)
32 error         for (var i=0; i<keyArr.length; i++)
32 error 		{
32 error 			key = keyArr[i][0];
32 error 			customContent = keyArr[i][1];
32 error 			containerId = "CustomContent_"+usedView+"_"+key;
32 error 			DEBUG.out('Render custom content: usedView:['+usedView+"] into:["+containerId+"]");
32 error             this.evaluateCustomContent(customContent, containerId);
32 error             this.lastRenderedCustomContentContainers.push(containerId);
32 error 		}
32 error
32 error 		// Call the callback.
32 error 		callback.call();
32 error 	}
32 error
32 error     // Encapsulate conditional rendering of the custom content.
32 error 	this.evaluateCustomContent = function(customContent, containerId)
32 error 	{
32 error 		destinationRef = document.getElementById(containerId);
32 error 		if ( (destinationRef != null) && (destinationRef != undefined) )
32 error 		{
32 error 			evaluateHTMLContent(customContent, destinationRef);
32 error 		}
32 error 	}
32 error 	//=============================================================================================
32 error
32 error
32 error 	// Clear last rendered containers.
32 error 	//=============================================================================================
32 error 	this.clearLastCustomContent = function()
32 error 	{
32 error 		for (var containerIndex in this.lastRenderedCustomContentContainers)
32 error 		{
32 error 			this.evaluateCustomContent("&nbsp;", this.lastRenderedCustomContentContainers[containerIndex]);
32 error 		}
32 error
32 error 		this.lastRenderedCustomContentContainers = new Array();
32 error 	}
32 error     //=============================================================================================
32 error
32 error 	// Render default view.
32 error     //=============================================================================================
32 error     this.renderDefaultView = function()
32 error     {}
32 error 	//==================================================================================================================
32 error
32 error 	//==================================================================================================================
32 error 	this.logoutButtonHandler = function()
32 error     {}
32 error     //==================================================================================================================
32 error
32 error
32 error
32 error
32 error
32 error     // DEPRECATED METHODS
32 error 	// _________________________________________________________________________________________________________________
32 error
32 error 	// DEPRECATED, use viewManager.gotoNextView instead.
32 error 	//==================================================================================================================
32 error 	this.gotoNextState = function(callback)
32 error 	{
32 error 		this.gotoNextView(null, callback);
32 error 		return;
32 error     }
32 error 	//==================================================================================================================
32 error }
32 error
32 error // Extend ViewManager (Portal IS).
32 error UCViewManager.prototype = new ViewManager();
32 error window.viewManager = new UCViewManager();
32 error
32 error         </script>
32 error
32 error 		<title>Check Point UserCheck</title>
32 error 	</head>
32 error
32 error 	<body class="usercheck_body_background_class" unselectable="on">
32 error 		<noscript>
32 error 			This portal requires browser which support JavaScript.<br>Please make sure that you are using an updated browser and that JavaScript is enabled.		</noscript>
32 error 				<div id='portalErrorMessage' class="portalErrorMessageDivHide">
32 error
32 error 		<table cellpadding="0px" cellspacing="0px" class="portalErrorMessageTableContainer" width="100%">
32 error 			<tr>
32 error 				<td align="center">
32 error
32 error 					<table cellpadding="0px" cellspacing="0px" class="portalErrorMessageTable">
32 error
32 error 						<tr id="portalErrorMessage_title_container_row" class="portalMessage_title show" width="100%">
32 error 							<td id="portalErrorMessage_title_container" height="10px" valign="middle" align="left" colspan="2">&nbsp;</td>
32 error 						</tr>
32 error
32 error 						<tr>
32 error 							<td id="portalErrorMessage_container" align="left" style="padding: 10px;" colspan="2">&nbsp;</td>
32 error 						</tr>
32 error
32 error 						<tr>
32 error
32 error 							<td>
32 error 								<table cellpadding="0px" cellspacing="0px" width="100%"style=" padding: 10px;">
32 error 									<tr>
32 error 										<td id="portalMessage_error_report_container" align="left" valign="buttom" class="hide">
32 error 											<span id="portalMessage_error_report_link" onclick="DEBUG.showErrorReport();" class="portal_link" style="left: 10px;">
32 error 												Send error report											</span>
32 error 										</td>
32 error 										<td id="portalMessage_error_button_container" align="right" height="10px;" valign="buttom">
32 error 											<button id="portalErrorMessage_button" class="portalErrorMessage_button" onclick="hidePortalErrorMessage();">
32 error 												OK											</button>
32 error 										</td>
32 error 									</tr>
32 error 								</table>
32 error 							</td>
32 error
32 error 						</tr>
32 error
32 error 					</table>
32 error
32 error 				</td>
32 error 			</tr>
32 error 		</table>
32 error
32 error 	</div>
32 error
32 error
32 error 		<div id='portalMessage' class="portalMessageDivHide">
32 error
32 error 		<table cellpadding="0px" cellspacing="0px" class="portalMessageTableContainer" width="100%">
32 error 			<tr>
32 error 				<td align="center">
32 error
32 error 					<table cellpadding="0px" cellspacing="0px" class="portalMessageTable">
32 error
32 error 						<tr id="portalMessage_title_container_row" class="portalMessage_title show">
32 error 							<td id="portalMessage_title_container" class="portalMessage_title_td" valign="middle" align="left">
32 error 								&nbsp;
32 error 							</td>
32 error 						</tr>
32 error
32 error 						<tr>
32 error 							<td id="portalMessage_container" align="left" style="padding: 10px;">
32 error 								&nbsp;
32 error 							</td>
32 error 						</tr>
32 error
32 error 						<tr id="portalMessage_textarea_container_row" class="hide">
32 error 							<td id="portalMessage_textarea_container" align="left" style="padding: 10px;">
32 error 							</td>
32 error 						</tr>
32 error
32 error 						<tr id="portalMessage_validation_message_container_row" class="show">
32 error 							<td id="portalMessage_validation_message_container" align="left" class="portalMessage_validation_submessage" style="padding: 10px;">
32 error 								&nbsp;
32 error 							</td>
32 error 						</tr>
32 error
32 error 						<tr id="portalMessage_submessage_container_row" class="hide">
32 error 							<td id="portalMessage_submessage_container" align="left" class="portalMessage_submessage" style="padding: 10px;">
32 error 								&nbsp;
32 error 							</td>
32 error 						</tr>
32 error
32 error 						<tr>
32 error 							<td align="center" height="10px;" valign="buttom" style="padding: 10px;" colspan="2">
32 error 								<div id="portalMessage_ok_button_container" class="show" style="text-align: right;">
32 error 									<button id="portalMessage_button" class="portalMessage_button" onclick="hidePortalMessage();">
32 error 										OK									</button>
32 error 								</div>
32 error
32 error 								<div id="portalMessage_bool_button_container" class="hide">
32 error 									<button id="portalMessage_yes_button" class="portalMessage_button" onclick="hidePortalMessage();">
32 error 										BUTTON.YES									</button>
32 error 									&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
32 error 									<button id="portalMessage_no_button" class="portalMessage_button" onclick="hidePortalMessage();">
32 error 										BUTTON.NO									</button>
32 error 								</div>
32 error
32 error 								<div id="portalMessage_submit_button_container" class="hide">
32 error 									<button id="portalMessage_submit_button" class="portalMessage_button" onclick="hidePortalMessage();">
32 error 										BUTTON.SUBMIT									</button>
32 error 									&nbsp;&nbsp;&nbsp;
32 error 									<button id="portalMessage_cancel_button" class="portalMessage_button" onclick="hidePortalMessage();">
32 error 										Cancel									</button>
32 error 								</div>
32 error 							</td>
32 error 						</tr>
32 error 					</table>
32 error
32 error 				</td>
32 error 			</tr>
32 error 		</table>
32 error
32 error 	</div>
32 error
32 error
32 error 		<div id='portalGeneralContainer' class="portalMessageDivHide">
32 error
32 error 		<table cellpadding="0px" cellspacing="0px" class="portalMessageTableContainer" width="100%">
32 error 			<tr>
32 error 				<td align="center">
32 error
32 error 					<table cellpadding="0px" cellspacing="0px" class="portalMessageTable">
32 error
32 error 						<tr id="portalGeneralContainer_title_container_row" class="portalMessage_title show" width="100%">
32 error 							<td id="portalGeneralContainer_title_container" height="10px" valign="middle" align="left">
32 error 								&nbsp;
32 error 							</td>
32 error 						</tr>
32 error
32 error 						<tr>
32 error 							<td id="portalGeneralContainer_container" align="left" style="padding: 10px;">
32 error 								&nbsp;
32 error 							</td>
32 error 						</tr>
32 error
32 error 					</table>
32 error
32 error 				</td>
32 error 			</tr>
32 error 		</table>
32 error
32 error 	</div>
32 error
32 error
32 error 	<div id='PortalErrorScreenShader' class="screenShaderHide">
32 error 		<table cellpadding="0px" cellspacing="0px" width="100%" height="100%">
32 error 			<tr>
32 error 				<td>&nbsp;</td>
32 error 			</tr>
32 error 		</table>
32 error 	</div>
32 error
32 error
32 error
32 error 	<div id='PortalScreenShader' class="screenShaderHide">
32 error 		<table cellpadding="0px" cellspacing="0px" width="100%" height="100%">
32 error 			<tr>
32 error 				<td>&nbsp;</td>
32 error 			</tr>
32 error 		</table>
32 error 	</div>
32 error
32 error
32 error 		<div id="portal_main_view" class="div_expanded" unselectable="on">
32 error 			<table height="100%" width="100%" border="0" cellpadding="0" cellspacing="0" class="">
32 error 				<tr>
32 error 					<td id="portal_center_div" valign="top" unselectable="on" class="usercheck_main_background_class">
32 error 						<div id="portal_top_pane_div" class="usercheck_header_class">
32 error
32 error <!--position: fixed; bottom: -1px; left: 50%; margin-left: -435px; -->
32 error
32 error <table width="100%" cellpadding="0" cellspacing="0" class="usercheck_header_table_class usercheck_content_table_class">
32 error 	<tr>
32 error 		<td class="usercheck_header_left_class" unselectable="on">
32 error 		</td>
32 error 		<td class="usercheck_header_center_class" unselectable="on">
32 error 			<div class="usercheck_page_title_class" id="usercheck_page_title" unselectable="on" >UserCheck</div>
32 error 		</td>
32 error 		<td id="usercheck_header_right_logo" class="usercheck_header_right_class" unselectable="on">
32 error 			<img class="usercheck_company_logo_class" id="usercheck_company_logo" ></img>
32 error 		</td>
32 error 		<td id="usercheck_header_right_empty" class="usercheck_header_right_empty_class" unselectable="on">
32 error 		</td>
32 error 	</tr>
32 error </table>
32 error 						</div>
32 error 						<div style="">&nbsp;</div><div style="">&nbsp;</div><div style="">&nbsp;</div>
32 error 						<div style="text-align: center;" unselectable="on">
32 error 						<table  id="usercheck_content_table" cellpadding="0" cellspacing="0" class="usercheck_content_table_class">
32 error 						<tr>
32 error 							<td rowspan="3" valign="top" class="usercheck_message_icon_column"><div class="usercheck_message_icon_class" id="usercheck_img_div" unselectable="on">&nbsp;</div></td>
32 error 							<td><div id="usercheck_title_div" class="usercheck_title_class" unselectable="on">&nbsp;</div></td>
32 error 						</tr>
32 error 						<tr>
32 error 							<td><div id="usercheck_main_div" class="usercheck_message_class" unselectable="on">&nbsp;</div></td>
32 error 						</tr>
32 error 						<tr>
32 error 							<td><div id="usercheck_error_div" unselectable="on">&nbsp;</div></td>
32 error 						</tr>
32 error 						<tr>
32 error 						<td colspan="2" style="text-align: center;" unselectable="on">
32 error 							<table style="margin-right: -10px; width: 50%; float: right;"><tr><td>
32 error 							<center>
32 error 								<div id="usercheck_cancel_div" class="usercheck_ok_button_div_class">&nbsp;</div>
32 error 							</center>
32 error 							</td><td>
32 error 							<center>
32 error 							<div id="usercheck_ok_div" class="usercheck_ok_button_div_class">&nbsp;</div>
32 error 							</center>
32 error 							</td></tr></table>
32 error 						</td>
32 error 						</tr>
32 error 						</table></div>
32 error 					</td>
32 error 				</tr>
32 error 				<tr>
32 error 					<td id ="usercheck_footer_td" class="usercheck_footer_class usercheck_footer_height_class">
32 error 						<div id="portal_bottom_pane_div">
32 error
32 error <!--position: fixed; bottom: -1px; left: 50%; margin-left: -435px; -->
32 error
32 error <table id="footer_table_logo" cellpadding="0" cellspacing="0" class="usercheck_footer_table_class footer_no_logo">
32 error 	<tr>
32 error 		<td class="usercheck_footer_height_class">
32 error 			<div id="usercheck_language_selection_div" class="usercheck_lang_select_div_class" style="display: none;">
32 error 				Language: <select id="usercheck_language_selection" class="usercheck_lang_select_class" onchange="javascript:window.oUserAction.handleLanguageChange();">
32 error 				</select>
32 error 			</div>
32 error 		</td>
32 error 	</tr>
32 error </table>						</div>
32 error 					</td>
32 error 				</tr>
32 error 			</table>
32 error 		</div>
32 error 	</body>
32 error
32 error
32 error     <script type="text/javascript">
32 error
32 error 	//Continue the background image on IE6-7 graphics design.
32 error 	if(window.browserDetails.browserType == window.BrowserType.IE && window.browserDetails.browserVersion <= 7 && (document.documentMode === undefined || document.documentMode <= 7))
32 error 	{
32 error 		var footer_td = document.getElementById('usercheck_footer_td');
32 error 		footer_td.setAttribute("className", footer_td.getAttribute("className") + " usercheck_main_background_class");
32 error 	}
32 error
32 error 		UserCheck.DataObj.IID = "B667CC11-B632-EFF9-D194-B4447D871699";
32 error
32 error 	UserCheck.DataObj.frame = 0;
32 error
32 error
32 error 	/*this is a common object for PortalMain and PortalMainDlp. functions here should be empty */
32 error window.UserActionCommon = function()
32 error {
32 error 	this.DlpHttpLearning = function(adminMessage,HttpLearningEnabled)
32 error 	{
32 error
32 error 	}
32 error 	this.DlpHideCancelBtn = function(action)
32 error 	{
32 error
32 error 	}
32 error }
32 error
32 error window.oUserActionCommon = new window.UserActionCommon();
32 error
32 error
32 error var g_userID = "";
32 error var g_refreshFiles = false;
32 error
32 error window.UserAction = function()
32 error {
32 error 	this.incidentObject = {};
32 error 	this.textAreaText = "";
32 error
32 error 	this.getCorrectClass = function()
32 error 	{
32 error 		var correctClass = "class";
32 error
32 error 		//Choose the correct class attribute name (in IE6-7 we need "className" instead of "class") according to IE version - but check for compatibility first!
32 error 		if(window.browserDetails.browserType == window.BrowserType.IE && window.browserDetails.browserVersion <= 7 && document.documentMode === undefined)
32 error 		{
32 error 			correctClass = "className";
32 error 		}
32 error
32 error 		return correctClass;
32 error 	}
32 error
32 error 	// Initialize.
32 error 	//=============================================================================================
32 error 	this.init = function(cancelPage)
32 error 	{
32 error 		if (typeof cancelPage == 'undefined')
32 error 		{
32 error 			cancelPage = false;
32 error 		}
32 error 		var requestData = 	{
32 error 			                	IID: "-1",
32 error 								UserID: "",
32 error 								IsThinPortal: false,
32 error 								UserLang: "",
32 error 								GetCancelPage: cancelPage
32 error 							};
32 error
32 error 		requestData.IID = UserCheck.DataObj.IID;
32 error
32 error 		var cookie = getCookie('UserCheck_UserID');
32 error 		requestData.UserID = cookie != null ? cookie : "";
32 error
32 error 		requestData.IsThinPortal = window.isThinPortal === true ? true : false;
32 error
32 error 		var selectedLanguage = getCookie('UserCheck_Selected_Language');
32 error 		if(selectedLanguage == null)
32 error 		{
32 error 			selectedLanguage = "";
32 error 		}
32 error 		requestData.UserLang = selectedLanguage;
32 error
32 error 		var sAbsoluteURL = PORTAL_IS.TOOLS.getURL("data/GetUserCheckIncidentData");
32 error
32 error 		if (window.isThinPortal === true)
32 error 		{
32 error 			//Create a custom timeout handler for the thin portal.
32 error 			PORTAL_IS.AJAX_MGR.customTimeoutHandler = function()
32 error 			{
32 error 				window.location = "about:blank";
32 error 			}
32 error 		}
32 error
32 error 		sendAsynchronousRequest(sAbsoluteURL,
32 error 								flattenObject(requestData),
32 error 								this.handleUserCheckIncidentData,
32 error 								this,
32 error 								[new Callback()]);
32 error 	}
32 error
32 error 	//Toggles the button's state from enabled to disabled and vice versa.
32 error 	this.setButtonMode = function(buttonState, buttonID)
32 error 	{
32 error 		var button = document.getElementById(buttonID);
32 error 		if(button == null)
32 error 			return;
32 error
32 error 		var correctClass = window.oUserAction.getCorrectClass();
32 error
32 error 		if(buttonState)
32 error 		{
32 error 			//Enable the button.
32 error 			button.setAttribute(correctClass, "button");
32 error 			button.onclick = function(){ javascript:oUserAction.submitOK(); };
32 error
32 error 			button.style.cursor = "pointer";
32 error 		}
32 error 		else
32 error 		{
32 error 			//Disable the button.
32 error 			button.setAttribute(correctClass, "button buttonDisabled");
32 error 			button.onclick = null;
32 error
32 error 			button.style.cursor = "default";
32 error 		}
32 error 	}
32 error
32 error 	//Changes the button CSS class (support for IE6-8). buttonCLS is for additional classes to be added to the button.
32 error 	this.setButtonState = function(state, buttonID, buttonCLS)
32 error 	{
32 error 		if (!buttonID)
32 error 		{
32 error 			buttonID = 'UserCheck_OK_Button';
32 error 			buttonCLS = '';
32 error 		}
32 error
32 error 		var correctClass = window.oUserAction.getCorrectClass();
32 error
32 error 		var button = document.getElementById(buttonID);
32 error
32 error 		if(button.getAttribute(correctClass).indexOf("Disabled") == -1)
32 error 		{
32 error 			//The button is not disabled.
32 error 			button.setAttribute(correctClass, "button button" + state + " " + buttonCLS);
32 error 		}
32 error 	}
32 error
32 error 	this.handleUserCheckIncidentData = function(xhrStatus, xhrResponse, callback)
32 error 	{
32 error 		DEBUG.out("UserAction::handleUserCheckIncidentData");
32 error
32 error 		if (callback == undefined)
32 error     	{
32 error     	    callback = new Callback();
32 error 		}
32 error
32 error 		if (xhrStatus != 200)
32 error 		{
32 error 			DEBUG.out('Retreiving UserCheck Incident Data failed. ('+xhrStatus+')', DEBUG.ERROR);
32 error 			callback.call();
32 error 			return;
32 error 		}
32 error
32 error 		this.incidentObject = JSON.parse(xhrResponse);
32 error 		var Languages = this.incidentObject.Languages;
32 error 		var UserCheckLogoID = this.incidentObject.UserCheckLogoID;
32 error 		var RedirectToAddr = this.incidentObject.RedirectToAddr;
32 error 		var AutoRedirect = this.incidentObject.AutoRedirect;
32 error 		var ExternalSystemURL = this.incidentObject.ExternalSystemURL;
32 error 		var Action = this.incidentObject.Action;
32 error 		var Variables = this.incidentObject.Variables;
32 error
32 error 		this.incidentObject.HasBeenCancelled = false;
32 error
32 error 		setCookie('UserCheck_UserID', this.incidentObject.UserID, 31556926);
32 error
32 error 		if (Variables['product'] != 'Threat Extraction')
32 error 		{
32 error 			if(AutoRedirect == true && RedirectToAddr != "")
32 error 			{
32 error 				if (window.isThinPortal === undefined)
32 error 				{
32 error 				//We have an address and auto redirect is true so redirect to that URL.
32 error 					// if (RedirectToAddr.indexOf('http://') != 0)
32 error 					if ((RedirectToAddr.indexOf('http://') != 0)  &&(RedirectToAddr.indexOf('https://') != 0))
32 error 						RedirectToAddr = "http://" + RedirectToAddr;
32 error
32 error 				window.location = RedirectToAddr;
32 error 				}
32 error 				else
32 error 					window.location = "about:blank"; //No reason to redirect in the Thin Portal
32 error 			}
32 error 		}
32 error 		else
32 error 		{
32 error 			if (Action == "SCRUB-SUCCESS")
32 error 			{
32 error 				// in scrub success page, if not mobile or thin, give more space for the list of original files names and info
32 error 				if(window.browserDetails.isMobile() === false && window.isThinPortal === undefined)
32 error 				{
32 error 					var content_table = document.getElementById("usercheck_content_table");
32 error 					if (content_table != null)
32 error 					{
32 error 						content_table.style.tableLayout="auto";
32 error 					}
32 error
32 error 					var message_div = document.getElementById("usercheck_main_div");
32 error 					if (message_div != null)
32 error 					{
32 error 						message_div.style.minWidth="auto";
32 error 						message_div.style.maxWidth="700px";
32 error 						message_div.style.whiteSpace="nowrap";
32 error 						message_div.style.wordWrap="normal";
32 error 						message_div.style.overflow="auto";
32 error 					}
32 error 				}
32 error
32 error 				var requestData = 	{
32 error 							IID: "-1"
32 error 						};
32 error 				requestData.IID = UserCheck.DataObj.IID;
32 error 				var sAbsoluteURL = PORTAL_IS.TOOLS.getURL("data/GetScrubFiles");
32 error 				sendAsynchronousRequest(sAbsoluteURL,
32 error 						flattenObject(requestData),
32 error 						this.handleScrubbingFiles,
32 error 						this,
32 error 						[new Callback()]);
32 error 			}
32 error 		}
32 error
32 error 		if(ExternalSystemURL != "")
32 error 			//We have an external system address so redirect to that URL.
32 error 			// window.location = ExternalSystemURL + (this.incidentObject.ForwardParams == true ? "?IncidentID=" + UserCheck.DataObj.IID + "&UserID=" + this.incidentObject.UserID : "");
32 error 			if (this.incidentObject.ForwardParams == true)
32 error 			{
32 error 							window.location = ExternalSystemURL + "?IncidentID=" + UserCheck.DataObj.IID + "&UserID=" + this.incidentObject.UserID;
32 error 			}
32 error 			else
32 error 			{
32 error 							window.location = ExternalSystemURL;
32 error 			}
32 error
32 error
32 error
32 error 		this.prepareLanguageSelection();
32 error
32 error 		if(window.self !== window.top)
32 error 		{
32 error 			//We are inside a frame. Display small version of the portal and give link to a full version of the portal in new tab/window.
32 error
32 error 			var url = '<a href="' + window.location + "&frame=1" + '" target="_blank">';
32 error 			if (Action == "SCRUB-SUCCESS")
32 error 			{
32 error 				Action = "INFORM";
32 error 			}
32 error 			url += draw_img_tag(getURL("img/" + Action.toLowerCase() + ".png")) + '&nbsp;&nbsp;';
32 error 			url += Action == 'BLOCK' ? PORTAL_IS.L10N.L10N_Obj.getStr("UC.BLOCKED_IFRAME") : PORTAL_IS.L10N.L10N_Obj.getStr("UC.INFO_IFRAME");
32 error 			url += '</a>';
32 error
32 error 			document.body.innerHTML = url;
32 error 			document.body.style.backgroundImage = 'none';
32 error 			document.body.style.textAlign = 'center';
32 error 			document.body.style.verticalAlign = 'text-bottom';
32 error 		}
32 error
32 error 		//Decide which footer to display according to the action type (for Block and Limit we display footer without CP logo).
32 error 		if(window.isThinPortal === true)
32 error 		{
32 error 			var thin_table = document.getElementById('usercheck_thin_table');
32 error 			if(thin_table != null && Action != 'BLOCK' && Action != 'LIMIT')
32 error 			{
32 error 				var correctClass = window.oUserAction.getCorrectClass();
32 error
32 error 				thin_table.setAttribute(correctClass, "usercheck_main_mobile_background_class with_logo");
32 error 			}
32 error 		}
32 error 		else
32 error 		{
32 error 		var logo_footer = document.getElementById('footer_table_logo');
32 error 		if(logo_footer != null && Action != 'BLOCK' && Action != 'LIMIT')
32 error 		{
32 error 			var correctClass = window.oUserAction.getCorrectClass();
32 error
32 error 			logo_footer.setAttribute(correctClass, "usercheck_footer_table_class footer_logo");
32 error 		}
32 error 		}
32 error
32 error 		g_userID = this.incidentObject.UserID;
32 error
32 error 		if (Action == "SCRUB-SUCCESS")
32 error 		{
32 error 			Action = "INFORM";
32 error 		}
32 error 		//Draw incident image according to the incident type
32 error 		if(document.getElementById('usercheck_img_div') !== null)
32 error 		document.getElementById('usercheck_img_div').innerHTML = draw_img_tag(getURL("img/" + Action.toLowerCase() + ".png"));
32 error
32 error 		if(this.incidentObject.IsLogoConfigured)
32 error 		{
32 error 			//The page has a logo defined in the GUI - load it.
32 error
32 error 			//Desktop header.
32 error 			var header_right_logo = document.getElementById('usercheck_header_right_logo');
32 error 			if(header_right_logo != null)
32 error 				if(window.browserDetails.browserType == window.BrowserType.IE && window.browserDetails.browserVersion <= 7)
32 error 					header_right_logo.style.display = "block";
32 error 				else
32 error 					header_right_logo.style.display = "table-cell";
32 error
32 error 			var header_right_empty = document.getElementById('usercheck_header_right_empty');
32 error 			if(header_right_empty != null)
32 error 				header_right_empty.style.display = "none";
32 error
32 error 			//Mobile header.
32 error 			var mobile_header = document.getElementById('header_mobile_div');
32 error 			if(mobile_header != null)
32 error 			{
32 error 				mobile_header.style.display = "block";
32 error 			}
32 error
32 error 			//Company logo.
32 error 			var company_logo = document.getElementById('usercheck_company_logo');
32 error 			if(company_logo != null)
32 error 				company_logo.src = getURL("images/interactions/" + UserCheckLogoID + ".png");
32 error 		}
32 error 		else if(window.isThinPortal === true)
32 error 		{
32 error 			 //If there is no logo defined, display the default logo in the thin portal.
32 error 			var company_logo = document.getElementById('usercheck_company_logo');
32 error 			if(company_logo != null)
32 error 				company_logo.src = getURL("img/cp_logo_mobile_thin.png");
32 error 		}
32 error
32 error 		//Start the timeout manager.
32 error 		UserCheck.tools.oTimeoutManager.startTimeoutTimer(this.incidentObject.Expiration - 15, this.handleTimeout);
32 error
32 error 		if (UserCheck.DataObj.GetSingleIncidentReview !== undefined && UserCheck.DataObj.GetSingleIncidentReview == 1)
32 error 		{
32 error 			window.singleIncident = new SingleIncident();
32 error 			singleIncident.init();
32 error 		}
32 error
32 error 		callback.call();
32 error 	}
32 error
32 error 	this.submitOK = function()
32 error 	{
32 error 		//This function determines if it is OK to proceed with sending a response if all validation criteria are met.
32 error
32 error 		//If we are in a Block action in thin portal, just redirect to about:blank.
32 error 		if (window.isThinPortal === true && window.oUserAction.incidentObject.Action === "BLOCK")
32 error 		{
32 error 			window.location = "about:blank";
32 error 		}
32 error
32 error 		if(document.getElementById('UserCheck_Textual_Input') != null)
32 error 			//Verify we have the real textarea!
32 error 			if(document.getElementById('UserCheck_Textual_Input').value !== undefined)
32 error 				//Unfocus the text-area.
32 error 				document.getElementById('UserCheck_Textual_Input').blur();
32 error
32 error 		if(!window.oUserAction.highlightInput())
32 error 			//There was some user input missing - don't continue.
32 error 			return;
32 error
32 error 		var cookie = getCookie('UserCheck_UserID');
32 error
32 error 		var requestData = {};
32 error
32 error 		requestData.IID = "-1";
32 error 		requestData.UserOption = "OK";
32 error
32 error 		requestData.UserID = cookie;
32 error 		requestData.IsReasonExist = true;
32 error 		if(document.getElementById('UserCheck_Textual_Input') != null)
32 error 		{
32 error 			var reason = document.getElementById('UserCheck_Textual_Input').value;
32 error
32 error 			//If the reason box is not found, there is nothing to enforce.
32 error 			if(reason === undefined)
32 error 			{
32 error 				reason = "";
32 error 				requestData.IsReasonExist = false;
32 error 			}
32 error 			else if(window.oUserAction.incidentObject.IsReasonEnforced === true && (reason.length == 0 || reason.length > 400))
32 error 				return;
32 error
32 error 			requestData.Reason = reason;
32 error 		}
32 error 		else
32 error 		{
32 error 			requestData.IsReasonExist = false;
32 error 		}
32 error
32 error 		//Sometimes the cookie is not written correctly, so used global user.
32 error 		if(requestData.UserID == null || requestData.UserID == "")
32 error 			requestData.UserID = g_userID;
32 error
32 error 		requestData.IID = UserCheck.DataObj.IID;
32 error
32 error 		var sAbsoluteURL = PORTAL_IS.TOOLS.getURL("data/GetUserCheckUserChoiceData");
32 error
32 error 		sendAsynchronousRequest(sAbsoluteURL,
32 error 								flattenObject(requestData),
32 error 								this.handleUserCheckChoiceData,
32 error 								this,
32 error 								[new Callback()]);
32 error 	}
32 error
32 error 	this.submitCancel = function()
32 error 	{
32 error 		if(window.oUserAction.incidentObject.CancelURL !== undefined && window.oUserAction.incidentObject.CancelURL !== "")
32 error 		{
32 error 			window.location = window.oUserAction.incidentObject.CancelURL;
32 error 			return;
32 error 		}
32 error 		else
32 error 		{
32 error 			if (window.isThinPortal == true)
32 error 			{
32 error 				window.location = "about:blank";
32 error 				return;
32 error 			}
32 error 			this.init(true);
32 error 		}
32 error 	}
32 error
32 error 	this.handleUserCheckChoiceData = function(xhrStatus, xhrResponse, callback)
32 error 	{
32 error 		try
32 error 		{
32 error 			window.external.OKButtonClickedResponseReceived('Done handling request');
32 error 		}
32 error 		catch(err)
32 error 		{
32 error 			//do nothing, this is probably the fat client
32 error 		}
32 error
32 error 		DEBUG.out("UserAction::handleUserCheckChoiceData");
32 error
32 error 		if (callback == undefined)
32 error     	{
32 error     	    callback = new Callback();
32 error 		}
32 error
32 error 		if (xhrStatus != 200)
32 error 		{
32 error 			DEBUG.out('Retreiving UserCheck Incident Data failed. ('+xhrStatus+')', DEBUG.ERROR);
32 error 			callback.call();
32 error 			return;
32 error 		}
32 error
32 error 		var newViewJSONObj = JSON.parse(xhrResponse);
32 error
32 error 		var RedirectToAddr = newViewJSONObj.RedirectToAddr;
32 error 		if (window.oUserAction.incidentObject.Variables['product'] != 'Threat Extraction')
32 error 		{
32 error 			if(RedirectToAddr != "")
32 error 			{
32 error 				var frame = "0";
32 error
32 error 				frame = UserCheck.DataObj.frame;
32 error
32 error 				if(typeof frame === "undefined" || frame == "0" || frame == "")
32 error 				{
32 error 					if (window.isThinPortal === undefined)
32 error 					{
32 error 						//We have an address so redirect to that URL.
32 error 						if ((RedirectToAddr.indexOf('http://') != 0)  &&(RedirectToAddr.indexOf('https://') != 0))
32 error 							RedirectToAddr = "http://" + RedirectToAddr;
32 error 						window.location = RedirectToAddr;
32 error 					}
32 error 					else
32 error 						window.location = "about:blank";
32 error 				}
32 error 				else
32 error 				{
32 error 					if (window.isThinPortal === undefined)
32 error 					{
32 error 					//We have an address so redirect to that URL in the parent frame.
32 error 						if ((RedirectToAddr.indexOf('http://') != 0)  &&(RedirectToAddr.indexOf('https://') != 0))
32 error 							RedirectToAddr = "http://" + RedirectToAddr;
32 error
32 error 					window.opener.location = RedirectToAddr;
32 error 					}
32 error 					else
32 error 					{
32 error 						window.opener.location = "about:blank";
32 error 					}
32 error 					window.close();
32 error 				}
32 error 			}
32 error 			else
32 error 			{
32 error 				var frame = "0";
32 error 				frame = UserCheck.DataObj.frame;
32 error 				if(typeof frame === "undefined" || frame == "0" || frame == "")
32 error 				{
32 error 					if (window.isThinPortal == true)
32 error 					{
32 error 						window.location = "about:blank";
32 error 					}
32 error 				}
32 error 				else
32 error 				{
32 error 					if (window.isThinPortal == true)
32 error 					{
32 error 						window.opener.location = "about:blank";
32 error 					}
32 error 					window.close();
32 error 				}
32 error 			}
32 error 		}
32 error 		else
32 error 		{
32 error 			window.location.reload();
32 error 		}
32 error 	}
32 error 	this.handleUserReportWrongCategoryData = function(xhrStatus, xhrResponse, callback)
32 error 	{
32 error
32 error 		DEBUG.out("UserAction::handleUserLogData");
32 error
32 error
32 error
32 error
32 error 	}
32 error
32 error 	this.handleTimeout = function()
32 error 	{
32 error 		var requestData = 	{
32 error 			                	IID: "-1"
32 error 							};
32 error
32 error 		requestData.IID = UserCheck.DataObj.IID;
32 error
32 error 		var sAbsoluteURL = PORTAL_IS.TOOLS.getURL("ExtendTimeout");
32 error
32 error 		sendAsynchronousRequest(sAbsoluteURL,
32 error 								flattenObject(requestData),
32 error 								window.oUserAction.handleTimeoutExtension,
32 error 								this,
32 error 								[new Callback()]);
32 error 	}
32 error
32 error 	this.handleTimeoutExtension = function(xhrStatus, xhrResponse, callback)
32 error 	{
32 error 		DEBUG.out("UserAction::handleTimeoutExtension");
32 error
32 error 		if (callback == undefined)
32 error     	{
32 error     	    callback = new Callback();
32 error 		}
32 error
32 error 		if (xhrStatus != 200)
32 error 		{
32 error 			if (window.isThinPortal === undefined)
32 error 			{
32 error 				DEBUG.out('Retreiving UserCheck Timeout Extension data failed. ('+xhrStatus+')', DEBUG.ERROR);
32 error 				callback.call();
32 error 				return;
32 error 			}
32 error 			else
32 error 			{
32 error 				window.location = "about:blank";
32 error 				return;
32 error 			}
32 error 		}
32 error 		var extensionObject = JSON.parse(xhrResponse);
32 error
32 error 		if(extensionObject.ReturnCode == "SUCCESS")
32 error 		{
32 error 			UserCheck.tools.oTimeoutManager.startTimeoutTimer(extensionObject.Expiration - 15, window.oUserAction.handleTimeout);
32 error 		}
32 error 		else
32 error 		{
32 error 			if(window.isThinPortal === undefined)
32 error 			{
32 error 			var button = document.getElementById('UserCheck_OK_Button');
32 error 			if(button !=null)
32 error 				button.style.display = "none";
32 error 			var select = document.getElementById('usercheck_language_selection');
32 error 			if(select != null)
32 error 				select.disabled = true;
32 error
32 error 			showPortalMessage(PORTAL_IS.L10N.L10N_Obj.getStr("TIMEOUT") + " <a href='" + window.oUserAction.incidentObject.RedirectToAddr + "'>" + PORTAL_IS.L10N.L10N_Obj.getStr("RETRY") + "</a>", null, PORTAL_IS.MESSAGE_TYPE.Display, true);
32 error 		}
32 error 			else
32 error 			{
32 error 				/* If we are in thin portal, redirect to about:blank
32 error 				   so that client can catch it and act accordingly. */
32 error 				window.location = "about:blank";
32 error 			}
32 error 		}
32 error 	}
32 error
32 error 	//Prepare for language selection.
32 error 	this.prepareLanguageSelection = function()
32 error 	{
32 error 		var Languages = this.incidentObject.Languages;
32 error 		var prevSelectedLanguage = null;
32 error 		var userSelected = false;
32 error 		if (UserCheck.DataObj.Lang != "" && UserCheck.DataObj.Lang !== undefined)
32 error 		{
32 error 			prevSelectedLanguage = UserCheck.DataObj.Lang;
32 error 			userSelected = true;
32 error 		}
32 error 		else if (this.incidentObject.PreferredLang != "")
32 error 		{
32 error 			prevSelectedLanguage = this.incidentObject.PreferredLang;
32 error 		}
32 error 		else
32 error 		{
32 error 			prevSelectedLanguage = getCookie('UserCheck_Selected_Language');
32 error 		}
32 error 		var count = 0;
32 error
32 error 		//If there is no cookie, get the browser locale.
32 error 		if(prevSelectedLanguage == null)
32 error 		{
32 error 			var langArr = {};
32 error 			for(var Language in Languages)
32 error 			{
32 error 				langArr[Languages[Language].LanguageCode] = true;
32 error 			}
32 error
32 error 			prevSelectedLanguage = PORTAL_IS.L10N.L10N_Obj.selectLanguage(langArr);
32 error 		}
32 error
32 error 		if(document.getElementById('usercheck_language_selection_div') != null)
32 error 		{
32 error 			count = 0;
32 error 			for(var Language in Languages)
32 error 			{
32 error 				var select = document.getElementById('usercheck_language_selection');
32 error 				select.options[select.options.length] = new Option(Languages[Language].Language, Language, false, Language === prevSelectedLanguage);
32 error 				count++;
32 error 			}
32 error 			//Display language selection only if NOT in thin portal.
32 error 			if(count > 1 && window.isThinPortal === undefined)
32 error 				document.getElementById('usercheck_language_selection_div').style.display = "block";
32 error
32 error 		}
32 error 		this.handleLanguageChange(true, userSelected);
32 error 	}
32 error
32 error 	//Handles language change.
32 error 	this.handleLanguageChange = function(noReloadLang, userSelected)
32 error 	{
32 error 		var select = document.getElementById('usercheck_language_selection');
32 error 		var selectedLanguage = select.options[select.selectedIndex].value;
32 error 		if(noReloadLang === true)
32 error 		{
32 error 			//No need to load the language - if it is already loaded.
32 error 			this.asyncLanguageChangeCallback(userSelected);
32 error 		}
32 error 		else
32 error 		{
32 error 			//Reload language strings.
32 error 			PORTAL_IS.L10N.L10N_Obj.reloadLanguageTo(selectedLanguage, "en", this.asyncLanguageChangeCallback);
32 error 		}
32 error
32 error 	}
32 error
32 error 	this.checkBoxExists = function(adminMessage)
32 error 	{
32 error 		if(adminMessage.indexOf("UserCheck_Confirm_Checkbox") != -1)
32 error 			return true;
32 error
32 error 		return false;
32 error 	}
32 error
32 error 	this.textareaExists = function(adminMessage)
32 error 	{
32 error 		if(adminMessage.indexOf("UserCheck_Textual_Input") != -1)
32 error 			return true;
32 error
32 error 		return false;
32 error 	}
32 error
32 error 	this.asyncLanguageChangeCallback = function(userSelected)
32 error 	{
32 error 		if (userSelected === undefined)
32 error 		{
32 error 			userSelected = true;
32 error 		}
32 error 		var select = document.getElementById('usercheck_language_selection');
32 error 		var check = document.getElementById('UserCheck_Confirm_Checkbox');
32 error
32 error 		var selectedLanguage = "Default";
32 error 		if(select != null)
32 error 			selectedLanguage = select.options[select.selectedIndex].value;
32 error 		var checkBoxValue = check != null ? check.checked : false;
32 error
32 error 		//Save cookie for the selected language. Only if it is from a User Selection.
32 error 		if (userSelected)
32 error 		{
32 error 			setCookie('UserCheck_Selected_Language', selectedLanguage == "Default" ? "en" : selectedLanguage, 31556926, "/");
32 error 			var cookieVal = getCookie('UserCheck_UserID');
32 error
32 error 			var handleUpdateUserDataResponse = function(xhrStatus, xhrResponse, callback){
32 error 				var newURL = window.location.href;
32 error 				//alert("newURL '"+newURL+"'");
32 error 				var langLoc = newURL.indexOf("&Lang=");
32 error 				//alert("langLoc '"+langLoc+"'");
32 error 				if (langLoc != -1)
32 error 				{
32 error 					newURL = newURL.substring(0, langLoc);
32 error 					//alert("newURL '"+newURL+"'");
32 error 				}
32 error 				window.location = newURL;
32 error 			}
32 error
32 error 			sendAsynchronousRequest(getURL("UpdateUserData"),
32 error 					"Language="+encodeURIComponent(selectedLanguage) + "&IID="+encodeURIComponent(UserCheck.DataObj.IID)+"&UserID="+cookieVal,
32 error 					handleUpdateUserDataResponse,
32 error 					this,
32 error 					[new Callback()]);
32 error 		}
32 error 		else
32 error 		{
32 error
32 error         		//Keep this value globally for other funcs.
32 error         		window.oUserAction.incidentObject.SelectedLanguage = selectedLanguage;
32 error
32 error         		var Languages = window.oUserAction.incidentObject.Languages;
32 error         		var TitleText = Languages[selectedLanguage].TitleText;
32 error         		var AdminMessage  = Languages[selectedLanguage].AdminMessage;
32 error         		var CancelMessage = Languages[selectedLanguage].CancelMessage;
32 error         		var OKButtonMessage  = window.oUserAction.incidentObject.OKButtonMessage[selectedLanguage];
32 error         		var CancelButtonMessage  = window.oUserAction.incidentObject.CancelButtonMessage[selectedLanguage];
32 error         		var SendButtonMessage	= window.oUserAction.incidentObject.SendButtonMessage[selectedLanguage];
32 error         		var MiddleButtonMessage	= window.oUserAction.incidentObject.MiddleButtonMessage[selectedLanguage];
32 error         		var HTTPLearningEnabled = window.oUserAction.incidentObject.HTTPLearningEnabled;
32 error         		var PageTitle = Languages[selectedLanguage].PageTitle;
32 error
32 error         		document.getElementById('usercheck_title_div').innerHTML = TitleText;
32 error
32 error         		if(window.oUserAction.incidentObject.HasBeenCancelled === undefined || window.oUserAction.incidentObject.HasBeenCancelled === false)
32 error         		{
32 error         			if (window.oUserAction.incidentObject.IncidentStatus == 0 || window.oUserAction.incidentObject.IncidentStatus == 2 || window.oUserAction.incidentObject.IncidentStatus == 8)//ok or cancel or ok_scrubbing
32 error         			{
32 error         				document.getElementById('usercheck_main_div').innerHTML = AdminMessage;
32 error         			}
32 error         			else if (window.oUserAction.incidentObject.IncidentStatus == 3)// sent
32 error         			{
32 error         				// if http learning is enabled on action succeded show the HTTP_LEARNING message
32 error         				if (HTTPLearningEnabled == true && window.oUserAction.incidentObject.RedirectToAddr != "")
32 error         				{
32 error         					var usercheck_main_div = document.getElementById('usercheck_main_div')
32 error         					if (usercheck_main_div != null)
32 error         						usercheck_main_div.innerHTML = "<p>" +PORTAL_IS.L10N.L10N_Obj.getStr("HTTP_LEARNING")+"</p>";
32 error         				}
32 error         				else // an SMTP message
32 error         				{
32 error         					document.getElementById('usercheck_main_div').innerHTML = AdminMessage;
32 error         				}
32 error         			}
32 error         			else if (window.oUserAction.incidentObject.IncidentStatus == 4)//discarded
32 error         			{
32 error         				document.getElementById('usercheck_main_div').innerHTML = AdminMessage;
32 error         			}
32 error         			else if (window.oUserAction.incidentObject.IncidentStatus == 5)//already sent
32 error         			{
32 error         				if (HTTPLearningEnabled == true && window.oUserAction.incidentObject.RedirectToAddr != "")
32 error         				{
32 error         					//if approved http and then refreshed the page
32 error         					var usercheck_main_div = document.getElementById('usercheck_main_div')
32 error         					if (usercheck_main_div != null)
32 error         						usercheck_main_div.innerHTML = "<p>" +PORTAL_IS.L10N.L10N_Obj.getStr("HTTP_LEARNING")+"</p>";
32 error         				}
32 error         				else
32 error         				{
32 error         					document.getElementById('usercheck_main_div').innerHTML = AdminMessage;
32 error         					var return_to_site_div = document.getElementById('usercheck_return_to_site_div')
32 error         					if (return_to_site_div != null)
32 error         						return_to_site_div.innerHTML = "<p style='color: #FF5000;font-weight: bold;'>" +PORTAL_IS.L10N.L10N_Obj.getStr("EMAIL_ALREADY_SENT") +"</p>";
32 error         				}
32 error         			}
32 error         			else if (window.oUserAction.incidentObject.IncidentStatus == 6)//already discarded
32 error         			{
32 error         				document.getElementById('usercheck_main_div').innerHTML = AdminMessage;
32 error         				var return_to_site_div = document.getElementById('usercheck_return_to_site_div')
32 error         				if (return_to_site_div != null)
32 error         					return_to_site_div.innerHTML = "<p style='color: #FF5000;font-weight: bold;'>" +PORTAL_IS.L10N.L10N_Obj.getStr("EMAIL_ALREADY_DISCARDED") +"</p>";
32 error         			}
32 error         			else
32 error         			{
32 error         				document.getElementById('usercheck_main_div').innerHTML = "<p>" + PORTAL_IS.L10N.L10N_Obj.getStr("UNKOWN_INCIDENT_STATUS") + "</p>" + window.oUserAction.incidentObject.IncidentStatus;
32 error         			}
32 error
32 error
32 error         			var btnDiv = document.getElementById('usercheck_ok_div');
32 error         			if (btnDiv != null)
32 error         				btnDiv.innerHTML = OKButtonMessage;
32 error         			btnDiv = document.getElementById('usercheck_cancel_div');
32 error         			if (btnDiv != null)
32 error         				btnDiv.innerHTML = CancelButtonMessage;
32 error         			btnDiv = document.getElementById('usercheck_send_div');
32 error         			// show the send button on SMTP (which is actually the send button) OR show it on inform action (which is actually OK button)
32 error         			if (btnDiv != null && (window.oUserAction.incidentObject.RedirectToAddr == "" || window.oUserAction.incidentObject.Action == "INFORM") )
32 error         			{
32 error         				// alert("setting usercheck_send_div");
32 error         				btnDiv.innerHTML = SendButtonMessage;
32 error         			}
32 error         			btnDiv = document.getElementById('usercheck_middle_div');
32 error         			if (btnDiv != null)
32 error         			{
32 error         				// alert("setting discard button div");
32 error         					btnDiv.innerHTML = MiddleButtonMessage;
32 error         			}
32 error         			var goBackDiv = document.getElementById('usercheck_return_to_site_div');
32 error         			if (goBackDiv)
32 error         			{
32 error         				// show return to site only when its http violation AND if the action is: sent or discarded or already sent or already discarded or cancelled.
32 error         				if (window.oUserAction.incidentObject.RedirectToAddr != "" && (window.oUserAction.incidentObject.IncidentStatus == 3 || window.oUserAction.incidentObject.IncidentStatus == 4 || window.oUserAction.incidentObject.IncidentStatus == 5 || window.oUserAction.incidentObject.IncidentStatus == 6 || window.oUserAction.incidentObject.IncidentStatus == 2))
32 error         				{
32 error         					goBackDiv.innerHTML = '<a href="' + window.oUserAction.incidentObject.RedirectToAddr + '">' + PORTAL_IS.L10N.L10N_Obj.getStr("RETURN_TO_SITE") + '</a>';
32 error         				}
32 error         			}
32 error         		}
32 error         		else
32 error         			document.getElementById('usercheck_main_div').innerHTML = CancelMessage;
32 error
32 error         		var page_title = document.getElementById('usercheck_page_title');
32 error         		if(page_title != null)
32 error         			page_title.innerHTML = PageTitle;
32 error
32 error         		var span = document.getElementById('UserCheck_OK_Button_span');
32 error         		if(span != null)
32 error         			span.innerHTML = PORTAL_IS.L10N.L10N_Obj.getStr('BUTTON.OK');
32 error
32 error         		span = document.getElementById('UserCheck_Cancel_Button_span');
32 error         		if(span != null)
32 error         			span.innerHTML = PORTAL_IS.L10N.L10N_Obj.getStr('BUTTON.CANCEL');
32 error
32 error         		span = document.getElementById('UserCheck_Send_Button_span');
32 error         		if(span != null)
32 error         			span.innerHTML = PORTAL_IS.L10N.L10N_Obj.getStr('BUTTON.SEND');
32 error         		span = document.getElementById('UserCheck_Middle_Button_span');
32 error         		if(span != null)
32 error         		{
32 error         			if (window.oUserAction.incidentObject.RedirectToAddr == "")
32 error         			span.innerHTML = PORTAL_IS.L10N.L10N_Obj.getStr('BUTTON.DISCARD');
32 error         			else
32 error         				span.innerHTML = PORTAL_IS.L10N.L10N_Obj.getStr("BUTTON.APPROVE");
32 error         		}
32 error
32 error         		var reportLink = document.getElementById('UserCheck_Wrong_Category');
32 error         		if(reportLink != null)
32 error         		{
32 error         			var correctClass = window.oUserAction.getCorrectClass();
32 error
32 error         			reportLink.setAttribute(correctClass, "usercheck_url_class");
32 error
32 error         			reportLink.onclick = function(e) { window.oUserAction.sendReport(); }
32 error         		}
32 error
32 error         		//Clear the error message when switching language.
32 error         		var errorElement = document.getElementById('usercheck_error_div');
32 error         		if(errorElement != null)
32 error         			errorElement.innerHTML = "&nbsp;";
32 error
32 error         		//Keep TextArea default text to disallow it as input.
32 error         		var textarea_element = null;
32 error
32 error         		if(window.oUserAction.textareaExists(AdminMessage))
32 error         		{
32 error         			textarea_element = document.getElementById('UserCheck_Textual_Input');
32 error         			//If the textarea is an incorrect element or length is correct, check passes.
32 error         			if(textarea_element.value === undefined)
32 error         			{
32 error         				//This element is not really our text area so we don't need it.
32 error         				textarea_element = null;
32 error         			}
32 error         		}
32 error
32 error         		if(textarea_element != null)
32 error         		{
32 error         			window.oUserAction.textAreaText = textarea_element.value;
32 error
32 error         			var correctClass = window.oUserAction.getCorrectClass();
32 error         			textarea_element.setAttribute(correctClass, "usercheck_message_class usercheck_textual_input_class usercheck_textual_input_class_required");
32 error
32 error         			textarea_element.onfocus = function() { window.oUserAction.clearRequiredInput(); };
32 error         		}
32 error         		//disable the approve button only on PortalMaindlp. on thin client approve button should always be enabled
32 error         		if (window.oUserAction.incidentObject.RedirectToAddr != "" && window.isThinPortal != true)
32 error         		{
32 error         			window.oUserActionCommon.DlpHttpLearning(AdminMessage,HTTPLearningEnabled);
32 error         		}
32 error 		    // hiding the cancel button on infom on dlp only
32 error 		    window.oUserActionCommon.DlpHideCancelBtn(window.oUserAction.incidentObject.Action);
32 error 		}
32 error 	}
32 error
32 error 	//Sends report for wrong category.
32 error 	this.sendReport = function()
32 error 	{
32 error 		var Variables = window.oUserAction.incidentObject.Variables;
32 error
32 error 		var resource = Variables['resource'] === undefined ? "" : Variables['resource'];
32 error 		var hmac = Variables['resource_hmac'] === undefined ? "" : Variables['resource_hmac'];
32 error 		var version = Variables['version'];
32 error 		var product = Variables['product'];
32 error
32 error 		//Get the application name. If this variable has been modified (added application icon for example), take the original.
32 error 		var appname = Variables['application_name_orig'];
32 error 		var malwareID = Variables['application_id'];
32 error 		if(appname === undefined)
32 error 			appname = Variables['application_name'];
32 error
32 error 		var base64UrlEncode = function(input) { return $.base64Encode(input).replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, '') };
32 error
32 error 		//Encode to base64 URL form spec.
32 error 		appname = base64UrlEncode(appname);
32 error 		resource = base64UrlEncode(resource);
32 error
32 error 		//URL of the external URL
32 error 		var url = window.location.protocol + "//cws.checkpoint.com/MISCAT/miscat/1.0?resource=" + resource + "&hmac=" + hmac + "&appname=" + appname + "&version=" + version + "&product=" + product + "&malwareID=" + malwareID;
32 error
32 error 		//Display a portal messge indicating the action was successful. On mobile devices we use the built-in message display.
32 error 		if(window.browserDetails.isMobile())
32 error 			alert(PORTAL_IS.L10N.L10N_Obj.getStr("REPORT_SUCCESS"));
32 error 		else
32 error 			showPortalMessage('<table><tr><td>' + draw_img_tag_span(getURL("images/confirmation.png")) + '&nbsp;&nbsp;</td><td>' + PORTAL_IS.L10N.L10N_Obj.getStr("REPORT_SUCCESS") + '</td></tr></table>', null, PORTAL_IS.MESSAGE_TYPE.Confirmation, true, false);
32 error
32 error 		var img = new Image();
32 error 		img.src = url;
32 error
32 error 		var reportLink = document.getElementById('UserCheck_Wrong_Category');
32 error
32 error 		var correctClass = window.oUserAction.getCorrectClass();
32 error
32 error 		//Disable the link.
32 error 		reportLink.setAttribute(correctClass, "usercheck_url_class usercheck_disabled_url_class");
32 error
32 error 		//send log on wrong category
32 error 		var cookie = getCookie('UserCheck_UserID');
32 error
32 error 		var requestData = {};
32 error
32 error 		requestData.IID = "-1";
32 error 		requestData.UserOption = "LOG-WRONG-CATEGORY";
32 error 		requestData.UserID = cookie;
32 error 		requestData.IsReasonExist = false;
32 error
32 error
32 error 		//Sometimes the cookie is not written correctly, so used global user.
32 error 		if(requestData.UserID == null || requestData.UserID == "")
32 error 			requestData.UserID = g_userID;
32 error
32 error 		requestData.IID = UserCheck.DataObj.IID;
32 error
32 error 		var sAbsoluteURL = PORTAL_IS.TOOLS.getURL("data/GetUserCheckUserChoiceData");
32 error
32 error 		sendAsynchronousRequest(sAbsoluteURL,
32 error 								flattenObject(requestData),
32 error 								this.handleUserReportWrongCategoryData,
32 error 								this,
32 error 								[new Callback()]);
32 error
32 error 		//Nothing should happen on click from now on.
32 error 		reportLink.onclick = function() { };
32 error 	}
32 error
32 error 	this.handleReportTimeout = function()
32 error 	{
32 error 		var elem = document.getElementById('testID');
32 error 		document.getElementsByTagName('head')[0].removeChild(elem);
32 error 	}
32 error
32 error 	//Verifies the input of the user, including checkbox and textarea.
32 error 	this.highlightInput = function()
32 error 	{
32 error 		var checkbox_element = null;
32 error 		var textarea_element = null;
32 error 		var checkbox_ready = false;
32 error 		var textarea_ready = false;
32 error
32 error 		var AdminMessage = window.oUserAction.incidentObject.Languages[window.oUserAction.incidentObject.SelectedLanguage].AdminMessage;
32 error
32 error 		//If the checkbox exists (and it is a correct element), its value will determine the button status.
32 error 		if(window.oUserAction.incidentObject.IsCheckBoxEnforced == true && window.oUserAction.checkBoxExists(AdminMessage) == true && document.getElementById('UserCheck_Confirm_Checkbox').checked !== undefined)
32 error 		{
32 error 			checkbox_element = document.getElementById('UserCheck_Confirm_Checkbox');
32 error 			checkbox_ready = checkbox_element.checked;
32 error 		}
32 error 		else
32 error 			checkbox_ready = true;
32 error
32 error 		//If the reason textbox exists and is enforced, its value will determine the button status.
32 error 		if(window.oUserAction.incidentObject.IsReasonEnforced === true && window.oUserAction.textareaExists(AdminMessage))
32 error 		{
32 error 			textarea_element = document.getElementById('UserCheck_Textual_Input');
32 error
32 error 			//If the textarea is an incorrect element or length is correct, check passes.
32 error 			if(textarea_element.value === undefined)
32 error 			{
32 error 				textarea_ready = true;
32 error 				//This element is not really our text area so we don't need it.
32 error 				textarea_element = null;
32 error 			}
32 error 			else
32 error 			{
32 error 				if (textarea_element.value.length > 0 && textarea_element.value.length <= 400 && textarea_element.value != PORTAL_IS.L10N.L10N_Obj.getStr("ENTER_TEXT") && textarea_element.value != window.oUserAction.textAreaText)
32 error 					textarea_ready = true;
32 error 				else
32 error 					textarea_ready = false;
32 error 			}
32 error 		}
32 error 		else
32 error 			textarea_ready = true;
32 error
32 error 		var all_ready = checkbox_ready === true && textarea_ready === true;
32 error
32 error 		var correctClass = window.oUserAction.getCorrectClass();
32 error          var elememt_to_scroll = null;
32 error
32 error 		if(checkbox_element != null)
32 error 		{
32 error
32 error 			checkbox_element.parentNode.parentNode.parentNode.parentNode.setAttribute(correctClass, (checkbox_ready ? "usercheck_red_no_highlight" : "usercheck_red_highlight" ));
32 error               elememt_to_scroll = checkbox_ready ? elememt_to_scroll : checkbox_element.parentNode.parentNode.parentNode.parentNode;
32 error 		}
32 error
32 error 		if(textarea_element != null)
32 error 		{
32 error 			textarea_element.setAttribute(correctClass, "usercheck_message_class usercheck_textual_input_class " + (textarea_ready ? "usercheck_red_no_highlight" : "usercheck_red_highlight usercheck_textual_input_class_required" ));
32 error 			elememt_to_scroll = textarea_ready ? elememt_to_scroll : textarea_element;
32 error 			if(!textarea_ready)
32 error 			{
32 error 				if(window.oUserAction.textAreaText === "" || textarea_element.value !== window.oUserAction.textAreaText)
32 error 				{
32 error 					if(window.oUserAction.textAreaText != "")
32 error 						textarea_element.value = window.oUserAction.textAreaText;
32 error 					else
32 error 				textarea_element.value = PORTAL_IS.L10N.L10N_Obj.getStr("ENTER_TEXT");
32 error 				}
32 error 				textarea_element.onfocus = function() { window.oUserAction.clearRequiredInput(); };
32 error 			}
32 error 		}
32 error
32 error 		if(!textarea_ready && !checkbox_ready && checkbox_element!=null && textarea_element!=null)
32 error 		{
32 error 			if(checkbox_element.parentNode.parentNode.parentNode.parentNode.offsetTop > textarea_element.offsetTop)
32 error 				elememt_to_scroll = checkbox_element;
32 error
32 error 		}
32 error
32 error 		if(elememt_to_scroll!=null){
32 error 			elememt_to_scroll.scrollIntoView(false);
32 error 			var scrollableDiv = document.getElementById("usercheck_scrollable_div");
32 error 			if (scrollableDiv !== null)
32 error 				scrollableDiv.scrollLeft = 0;
32 error 		}
32 error
32 error 		var errorElement = document.getElementById('usercheck_error_div');
32 error 		if(errorElement != null)
32 error 			errorElement.innerHTML = all_ready ? "" : "<br/><span style='color: #FF0000;'>* " + PORTAL_IS.L10N.L10N_Obj.getStr("REQUIRED_FIELDS") + "</span>";
32 error
32 error 		return all_ready;
32 error 	}
32 error
32 error 	this.clearRequiredInput = function()
32 error 	{
32 error 		textarea_element = document.getElementById('UserCheck_Textual_Input');
32 error
32 error 		textarea_element.value = "";
32 error
32 error 		var correctClass = window.oUserAction.getCorrectClass();
32 error
32 error 		if(textarea_element.getAttribute(correctClass).indexOf("usercheck_red_highlight") !== -1)
32 error 		textarea_element.setAttribute(correctClass, "usercheck_message_class usercheck_textual_input_class usercheck_red_highlight");
32 error 		else
32 error 			textarea_element.setAttribute(correctClass, "usercheck_message_class usercheck_textual_input_class");
32 error
32 error 		textarea_element.onfocus = function() { };
32 error 	}
32 error
32 error 	this.sendMail  = function()
32 error 	{
32 error 		DEBUG.out("UserAction::sendMail");
32 error         	this.last_action = 'sent';
32 error
32 error 		if(!window.oUserAction.highlightInput())
32 error 			//There was some user input missing - don't continue.
32 error 			return;
32 error
32 error 		var reason = "";
32 error 		if(document.getElementById('UserCheck_Textual_Input') != null)
32 error 		{
32 error 			reason = document.getElementById('UserCheck_Textual_Input').value;
32 error 			//If the reason box is not found, there is nothing to enforce.
32 error 			if(reason === undefined)
32 error 			{
32 error 				reason = "";
32 error 			}
32 error 		}
32 error
32 error
32 error 		var sendMailCallback = new Callback();
32 error 		sendMailCallback.methodReference 	= this.handleConfirmationData;
32 error 		sendMailCallback.thisArgument		= this;
32 error 		sendMailCallback.args.push(new Callback());
32 error 		PORTAL_IS.AJAX_MGR.sendAsyncReq(	getURL("EmailSend"),
32 error 											"mailId="+encodeURIComponent(UserCheck.DataObj.IID)+
32 error 											"&justification="+encodeURIComponent(reason)+"&action=DLP-CHOICE-ACTION-SEND",
32 error 											sendMailCallback,
32 error 											null,
32 error 											null,
32 error 											"Sending email failed.");
32 error
32 error
32 error 	}
32 error
32 error 	this.discardMail = function()
32 error 	{
32 error 		DEBUG.out("UserAction::deleteMail");
32 error        		 this.last_action = 'delete';
32 error
32 error 		var sendMailCallback = new Callback();
32 error 		sendMailCallback.methodReference 	= this.handleConfirmationData;
32 error 		sendMailCallback.thisArgument		= this;
32 error 		sendMailCallback.args.push(new Callback());
32 error 		PORTAL_IS.AJAX_MGR.sendAsyncReq(	getURL("EmailSend"),
32 error 											"mailId="+encodeURIComponent(UserCheck.DataObj.IID)+
32 error 											"&justification="+encodeURIComponent("")+"&action=DLP-CHOICE-ACTION-DISCARD",
32 error 											sendMailCallback,
32 error 											null,
32 error 											null,
32 error 											"Sending email failed.");
32 error
32 error
32 error 	}
32 error
32 error 	this.handleConfirmationData = function(xhrStatus, xhrResponse, callback)
32 error 	{
32 error 		DEBUG.out("UserAction::handleConfirmationData ");
32 error 		if (callback == undefined)
32 error     	{
32 error     	    callback = new Callback();
32 error 		}
32 error 		if (xhrStatus != 200)
32 error 		{
32 error 			// TODO: Handle error.
32 error 			DEBUG.out('Retreiving Single Incident Review Data failed. ('+xhrStatus+')', DEBUG.ERROR);
32 error 			callback.call();
32 error 			return;
32 error 		}
32 error 		var newViewJSONObj = JSON.parse(xhrResponse);
32 error 		var message = newViewJSONObj.message;
32 error 		var lastChanged = newViewJSONObj.lastChanged;
32 error 		var succeeded = newViewJSONObj.succeeded;
32 error 		if (lastChanged != -1 && lastChanged != 0)
32 error 		{
32 error             //message += " ";
32 error             //message += convertToGmt(lastChanged);
32 error             //this.emailData.date = convertToGmt(lastChanged);
32 error         }
32 error 		//@@NA add test if this is from Thin Portal and only then redirect to about:blank
32 error         // window.location = "about:blank";
32 error 		if (succeeded)
32 error 		{
32 error 			var cookie = getCookie('UserCheck_UserID');
32 error 			var requestData = {};
32 error 			requestData.IID = "-1";
32 error 			requestData.UserID = cookie;
32 error 			requestData.IsReasonExist = true;
32 error 			requestData.Reason = "";
32 error 			requestData.UserOption = "SEND";
32 error 			if (newViewJSONObj.action == "DLP-CHOICE-ACTION-DISCARD")
32 error 			{
32 error 				requestData.UserOption = "DISCARD";
32 error 			}
32 error
32 error 			if (newViewJSONObj.action === undefined || newViewJSONObj.action != "DLP-CHOICE-ACTION-SEND")
32 error 			{
32 error 				requestData.IsReasonExist = false;
32 error 			}
32 error 			else
32 error 			{
32 error 			if(document.getElementById('UserCheck_Textual_Input') != null)
32 error 			{
32 error 				var reason = document.getElementById('UserCheck_Textual_Input').value;
32 error
32 error 				//If the reason box is not found, there is nothing to enforce.
32 error 				if(reason === undefined)
32 error 				{
32 error 					reason = "";
32 error 					requestData.IsReasonExist = false;
32 error 				}
32 error 				else if(window.oUserAction.incidentObject.IsReasonEnforced === true && (reason.length == 0 || reason.length > 400))
32 error 					return;
32 error
32 error 				requestData.Reason = reason;
32 error 			}
32 error 			else
32 error 			{
32 error 				requestData.IsReasonExist = false;
32 error 			}
32 error 			}
32 error 			//Sometimes the cookie is not written correctly, so used global user.
32 error 			if(requestData.UserID == null || requestData.UserID == "")
32 error 				requestData.UserID = g_userID;
32 error 			requestData.IID = UserCheck.DataObj.IID;
32 error
32 error 			var sAbsoluteURL = PORTAL_IS.TOOLS.getURL("data/GetUserCheckUserChoiceData");
32 error
32 error 			sendAsynchronousRequest(sAbsoluteURL,
32 error 									flattenObject(requestData),
32 error 									this.handleUserCheckChoiceData,
32 error 									this,
32 error 									[new Callback()]);
32 error 		}
32 error
32 error 	}
32 error
32 error 	this.goToBlank = function()
32 error 	{
32 error 		window.location = "about:blank";
32 error 	}
32 error
32 error 	this.ApproveHttp = function()
32 error 	{
32 error 		this.sendMail();
32 error 	}
32 error
32 error
32 error 	this.createScrubbingLinks = function(attachments, isExtended)
32 error 	{
32 error 		var scrub_files_out = "<ul style=\"list-style-type: none;padding: 0;\">";
32 error 		for (var i = 0;i<attachments.length;i++)
32 error 		{
32 error 			if (attachments[i].fileStatus == "FILE-STATUS-APPROVED-BY-TE" || attachments[i].fileStatus == "FILE-STATUS-AVAILABLE" || attachments[i].fileStatus == "FILE-STATUS-AVAILABLE-SUSPICIOUS")
32 error 			{
32 error 				var image = "images/confirmation.png";
32 error 				var comment = "";
32 error 				var toolTip = "Click to download";
32 error 				var removedParts = attachments[i].removedParts;
32 error 				if (isExtended == true)
32 error 				{
32 error 					if(removedParts != "")
32 error 					{
32 error 						removedParts = removedParts.replace(/\n/g,", ");
32 error 						comment = " contains " + removedParts;
32 error 					}
32 error 					else
32 error 					{
32 error 						 comment = PORTAL_IS.L10N.L10N_Obj.getStr(attachments[i].scrubResult);
32 error 					}
32 error 				}
32 error 				scrub_files_out += "<li title=\"" + toolTip + "\"><img src=\"" + image + "\" width=\"20\" height=\"20\"/>&nbsp;&nbsp;" + "<a href=\"ScrubGetFile?IID="+UserCheck.DataObj.IID+"&fileID="+attachments[i].fileId+"\" TARGET=\"_blank\"><span style=\"font-weight:bold\">" + attachments[i].fileName + "</span></a> <span style=\"color:Red;font-size:80%\">" + comment + "</span></li>"
32 error 			}
32 error 			else
32 error 			{
32 error 				var description = "";
32 error 				var img = "";
32 error 				var toolTip = "";
32 error 				if (attachments[i].fileStatus == "FILE-STATUS-WAITING-FOR-TE")
32 error 				{
32 error 					g_refreshFiles = true;
32 error 					description = "scanning...";
32 error 					img = "img/loader.gif";
32 error 					toolTip = "Please wait while file is being scanned";
32 error 				}
32 error 				else if (attachments[i].fileStatus == "FILE-STATUS-BLOCKED-BY-TE")
32 error 				{
32 error 					description = "blocked";
32 error 					img = "img/block.png";
32 error 					toolTip = "File is malicious - blocked for download";
32 error 				}
32 error 				else if (attachments[i].fileStatus == "FILE-STATUS-BLOCKED-BY-POLICY")
32 error 				{
32 error 					description = "blocked";
32 error 					img = "img/block.png";
32 error 					toolTip = "File is blocked for download according to company policy";
32 error 				}
32 error 				scrub_files_out += "<li title=\"" + toolTip + "\"><img src=\"" + img + "\" width=\"20\" height=\"20\"/>&nbsp;&nbsp;" + attachments[i].fileName + " <span style=\"color:LightSteelBlue\">(" + description + ")</span></li>"
32 error 			}
32 error 		}
32 error 		scrub_files_out += "</ul><div id=\"refresh_timer_div\"></div>";
32 error 		return scrub_files_out;
32 error 	}
32 error
32 error 	this.handleScrubbingFiles = function(xhrStatus, xhrResponse, callback)
32 error 	{
32 error 		if (callback == undefined)
32 error     	{
32 error     	    callback = new Callback();
32 error 		}
32 error
32 error 		if (xhrStatus != 200)
32 error 		{
32 error 			DEBUG.out('Retreiving UserCheck Incident Data failed. ('+xhrStatus+')', DEBUG.ERROR);
32 error 			callback.call();
32 error 			return;
32 error 		}
32 error
32 error 		this.scrubbingResponse = JSON.parse(xhrResponse);
32 error
32 error 		var attachments = [];
32 error 		if( Object.prototype.toString.call( this.scrubbingResponse.data.attachments ) != '[object Array]' ) {
32 error 			attachments[0] = this.scrubbingResponse.data.attachments;
32 error 		}
32 error 		else
32 error 		{
32 error 			attachments = this.scrubbingResponse.data.attachments;
32 error 		}
32 error
32 error 		g_refreshFiles = false;
32 error 		var scrub_links_simple = document.getElementById('links_simple');
32 error 		if (scrub_links_simple != null)
32 error 		{
32 error 			if (scrub_links_simple.hasChildNodes())
32 error 				scrub_links_simple.removeChild(scrub_links_simple.childNodes[0]);
32 error 			var tmp = document.createElement("div");
32 error 			tmp.innerHTML = window.oUserAction.createScrubbingLinks(attachments, false);
32 error 			scrub_links_simple.appendChild(tmp);
32 error 		}
32 error
32 error 		var scrub_links_extended = document.getElementById('links_extended');
32 error 		if (scrub_links_extended != null)
32 error 		{
32 error 			if (scrub_links_extended.hasChildNodes())
32 error 				scrub_links_extended.removeChild(scrub_links_extended.childNodes[0]);
32 error 			var tmp = document.createElement("div");
32 error 			tmp.innerHTML = window.oUserAction.createScrubbingLinks(attachments, true);
32 error 			scrub_links_extended.appendChild(tmp);
32 error 		}
32 error
32 error 		if (g_refreshFiles)
32 error 		{
32 error 			UserCheck.tools.oTimeoutManager.startTimeoutTimer(30, window.oUserAction.refreshScrubbingFiles);
32 error 		}
32 error 		callback.call();
32 error 	}
32 error
32 error 	this.refreshScrubbingFiles = function()
32 error 	{
32 error 		var requestData = 	{
32 error 				IID: "-1"
32 error 			};
32 error 		requestData.IID = UserCheck.DataObj.IID;
32 error 		var sAbsoluteURL = PORTAL_IS.TOOLS.getURL("data/GetScrubFiles");
32 error 		sendAsynchronousRequest(sAbsoluteURL,
32 error 				flattenObject(requestData),
32 error 				window.oUserAction.handleScrubbingFiles,
32 error 				this,
32 error 				[new Callback()]);
32 error 	}
32 error
32 error     this.showOrHideRemovedPartsfromFiles = function(FileIndex)
32 error     {
32 error         var infoimg_element = document.getElementById('infoimg_' + FileIndex);
32 error         var removed_parts_element = document.getElementById('removed_parts_' + FileIndex);
32 error
32 error         if ( infoimg_element != null && removed_parts_element != null )
32 error         {
32 error             if( removed_parts_element.style.display === "none" )
32 error             {
32 error                 infoimg_element.style.display = 'none';
32 error                 removed_parts_element.style.display = 'inline';
32 error             }
32 error             else
32 error             {
32 error                 infoimg_element.style.display = "inline";
32 error                 removed_parts_element.style.display = 'none';
32 error             }
32 error         }
32 error     }
32 error
32 error } //END: window.UserAction = function()
32 error
32 error window.oUserAction = new UserAction();
32 error oUserAction.init();
32 error
32 error     </script>
32 error
32 error </html>
32 error
32 error     at Object.parse (native)
32 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:274:23)
32 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:246:65)
32 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:236:22)
32 error     at Request.emit (events.js:98:17)
32 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1142:14)
32 error     at Request.emit (events.js:117:20)
32 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1096:12)
32 error     at IncomingMessage.emit (events.js:117:20)
32 error     at _stream_readable.js:943:16
33 error If you need help, you may report this *entire* log,
33 error including the npm and node versions, at:
33 error     <http://github.com/npm/npm/issues>
34 error System Linux 4.4.0-64-generic
35 error command "/usr/local/bin/node" "/usr/local/bin/npm" "install" "body-parser"
36 error cwd /home/ashwini2/web
37 error node -v v0.10.33
38 error npm -v 1.4.28
39 error type unexpected_token
40 verbose exit [ 1, true ]
